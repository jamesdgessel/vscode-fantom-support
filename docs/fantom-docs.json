[
  {
    "classes": [
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return this script's source file path.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "target",
            "doc": "Lookup a target by name.  If not found and checked is\nfalse return null, otherwise throw an exception.\n",
            "returns": "build::TargetMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "targets",
            "doc": "Get the list of published targets for this script.  The\nfirst target should be the default.  The list of targets\nis defined by all the methods with the `Target` facet.\n",
            "returns": "build::TargetMethod[]",
            "params": [

            ]
          },
          {
            "name": "config",
            "doc": "Get a config property using the following rules:\n  1. `sys::Env.vars` with 'FAN_BUILD_$name.upper'\n  2. `sys::Env.config` for build pod\n  3. fallback to 'def' parameter\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::Str? def"
              }
            ]
          },
          {
            "name": "configDir",
            "doc": "Get a `config` prop which identifies a directory.\nIf the prop isn't configured or doesn't map to a\nvalid directory, then return def.\n",
            "returns": "sys::File?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::File? def"
              }
            ]
          },
          {
            "name": "configs",
            "doc": "Get the key/value map of config props which are loaded\nfrom \"etc/build/config.props\".\n",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "applyMacros",
            "doc": "Apply a set of macro substitutions to the given pattern.\nSubstitution keys are indicated in the pattern using \"@{key}\"\nand replaced by definition in macros map.  If a substitution\nkey is undefined then raise an exception.  The `configs`\nmethod is used for default macro key/value map.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pattern",
                "type": "sys::Str pattern"
              },
              {
                "name": "macros",
                "type": "[sys::Str:sys::Str] macros"
              }
            ]
          },
          {
            "name": "resolveFiles",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveFilesOrDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "dumpEnv",
            "doc": "Dump script environment for debug.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "parseArgs",
            "doc": "",
            "returns": "build::TargetMethod[]?",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          {
            "name": "usage",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "Run the script with the specified arguments.\nReturn 0 on success or -1 on failure.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          null,
          null
        ],
        "name": "BuildScript",
        "doc": "BuildScript is the base class for build scripts - it manages\nthe command line interface, argument parsing, environment, and\ntarget execution.\n\nSee `docTools::Build` for details.\n",
        "fields": [
          {
            "name": "log",
            "doc": "Log used for error reporting and tracing\n",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "doc": "The source file of this script\n",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "doc": "The directory containing the this script\n",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "doc": "Home directory of development installation.  By default this\nvalue is initialized by 'devHome' config prop, otherwise\n`sys::Env.homeDir` is used.\n",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "doc": "",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "doc": "",
            "type": "build::BuildScript.configs$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return this script's source file path.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "target",
            "doc": "Lookup a target by name.  If not found and checked is\nfalse return null, otherwise throw an exception.\n",
            "returns": "build::TargetMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "targets",
            "doc": "Get the list of published targets for this script.  The\nfirst target should be the default.  The list of targets\nis defined by all the methods with the `Target` facet.\n",
            "returns": "build::TargetMethod[]",
            "params": [

            ]
          },
          {
            "name": "config",
            "doc": "Get a config property using the following rules:\n  1. `sys::Env.vars` with 'FAN_BUILD_$name.upper'\n  2. `sys::Env.config` for build pod\n  3. fallback to 'def' parameter\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::Str? def"
              }
            ]
          },
          {
            "name": "configDir",
            "doc": "Get a `config` prop which identifies a directory.\nIf the prop isn't configured or doesn't map to a\nvalid directory, then return def.\n",
            "returns": "sys::File?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::File? def"
              }
            ]
          },
          {
            "name": "configs",
            "doc": "Get the key/value map of config props which are loaded\nfrom \"etc/build/config.props\".\n",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "applyMacros",
            "doc": "Apply a set of macro substitutions to the given pattern.\nSubstitution keys are indicated in the pattern using \"@{key}\"\nand replaced by definition in macros map.  If a substitution\nkey is undefined then raise an exception.  The `configs`\nmethod is used for default macro key/value map.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pattern",
                "type": "sys::Str pattern"
              },
              {
                "name": "macros",
                "type": "[sys::Str:sys::Str] macros"
              }
            ]
          },
          {
            "name": "resolveFiles",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveFilesOrDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "dumpEnv",
            "doc": "Dump script environment for debug.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "parseArgs",
            "doc": "",
            "returns": "build::TargetMethod[]?",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          {
            "name": "usage",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "Run the script with the specified arguments.\nReturn 0 on success or -1 on failure.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          null,
          null,
          null,
          {
            "name": "validate",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "compile",
            "doc": "Compile the source into a pod file and all associated\nnatives.  See `compileFan`, `compileJava`, and `compileDotnet`.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "nodeJs",
            "doc": "Compile to all classes to run in Node.js\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "compileFan",
            "doc": "Compile Fan code into pod file\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "stdFanCompilerInput",
            "doc": "",
            "returns": "compiler::CompilerInput",
            "params": [

            ]
          },
          {
            "name": "onCompileFan",
            "doc": "Callback to tune the Fantom compiler input\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ci",
                "type": "compiler::CompilerInput ci"
              }
            ]
          },
          {
            "name": "compileJava",
            "doc": "Compile Java class files if javaDirs is configured\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "compileJni",
            "doc": "Compile JNI bindings if jniDirs configured.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "compileNodeJs",
            "doc": "Compile to javascript node module\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "compileDotnet",
            "doc": "Compile native .NET assembly dotnetDirs configured\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "clean",
            "doc": "Delete all intermediate and target files\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "isFantomCore",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "test",
            "doc": "Run the unit tests using 'fant' for this pod\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "full",
            "doc": "Run clean, compile, and test\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "BuildPod",
        "doc": "BuildPod is the base class for build scripts used to manage\nbuilding a Fantom source code and resources into a Fantom pod.\n\nSee `docTools::Build` for details.\n",
        "fields": [
          {
            "name": "log",
            "doc": "Log used for error reporting and tracing\n",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "doc": "The source file of this script\n",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "doc": "The directory containing the this script\n",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "doc": "Home directory of development installation.  By default this\nvalue is initialized by 'devHome' config prop, otherwise\n`sys::Env.homeDir` is used.\n",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "doc": "",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "doc": "",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "podName",
            "doc": "Required name of the pod.\n",
            "type": "build::BuildPod.podName"
          },
          {
            "name": "summary",
            "doc": "Required summary description of pod.\n",
            "type": "build::BuildPod.summary"
          },
          {
            "name": "version",
            "doc": "Version of the pod - default is set to `BuildScript.config`\nprop 'buildVersion'.\n",
            "type": "build::BuildPod.version"
          },
          {
            "name": "depends",
            "doc": "List of dependencies for pod formatted as `sys::Depend`.\nStrings are automatically run through `BuildScript.applyMacros`.\n",
            "type": "build::BuildPod.depends"
          },
          {
            "name": "meta",
            "doc": "Pod meta-data name/value pairs to compile into pod.  See `sys::Pod.meta`.\n",
            "type": "build::BuildPod.meta"
          },
          {
            "name": "index",
            "doc": "Pod index name/value pairs to compile into pod.  See `sys::Env.index`.\nThe index values can be a single Str or a Str[] if there are\nmultiple values mapped to one key.\n",
            "type": "build::BuildPod.index"
          },
          {
            "name": "docApi",
            "doc": "Indicates if if fandoc API should be included in the documentation.\nBy default API *is* included.\n",
            "type": "build::BuildPod.docApi"
          },
          {
            "name": "docSrc",
            "doc": "Indicates if if source code should be included in the pod/documentation.\nBy default source code it *not* included.\n",
            "type": "build::BuildPod.docSrc"
          },
          {
            "name": "srcDirs",
            "doc": "List of Uris relative to build script of directories containing\nthe Fan source files to compile.\n",
            "type": "build::BuildPod.srcDirs"
          },
          {
            "name": "resDirs",
            "doc": "List of optional Uris relative to build script of directories of\nresources files to package into pod zip file.  If a file has a \"jar\"\nextension then its contents are unzipped into the target pod.\n",
            "type": "build::BuildPod.resDirs"
          },
          {
            "name": "javaDirs",
            "doc": "List of Uris relative to build script of directories containing\nthe Java source files to compile for Java native methods.\n",
            "type": "build::BuildPod.javaDirs"
          },
          {
            "name": "jniDirs",
            "doc": "List of Uris relative to build script of directories containing\nthe JNI C source files to compile.\n",
            "type": "build::BuildPod.jniDirs"
          },
          {
            "name": "jniPlatforms",
            "doc": "If non-null, whitelist of platforms JNI should be enabled for.\nPlatform string may be full platform name (\"macosx-x86_64\") or OS\nonly (\"macosx\").\n",
            "type": "build::BuildPod.jniPlatforms"
          },
          {
            "name": "dotnetDirs",
            "doc": "List of Uris relative to build script of directories containing\nthe C# source files to compile for .NET native methods.\n",
            "type": "build::BuildPod.dotnetDirs"
          },
          {
            "name": "jsDirs",
            "doc": "List of Uris relative to build script of directories containing\nthe JavaScript source files to compile for JavaScript native methods.\n",
            "type": "build::BuildPod.jsDirs"
          },
          {
            "name": "jsProps",
            "doc": "List of Uris relative to build script that should be searched for '.props'\nfiles to compile to JavaScript. You may also give relative paths to files\nwith a '.props' ext.  If this field is null, it defaults to `resDirs`.\n",
            "type": "build::BuildPod.jsProps"
          },
          {
            "name": "dependsDir",
            "doc": "The directory to look in for the dependency pod file (and\npotentially their recursive dependencies).  If null then we\nuse the compiler's own pod definitions via reflection (which\nis more efficient).  As a general rule you shouldn't mess\nwith this field - it is used by the 'build' and 'compiler'\nbuild scripts for bootstrap build.\n",
            "type": "build::BuildPod.dependsDir"
          },
          {
            "name": "outPodDir",
            "doc": "Directory to output pod file.  By default it goes into\n\"{Env.cur.workDir}/lib/fan/\"\n",
            "type": "build::BuildPod.outPodDir"
          },
          {
            "name": "outDocDir",
            "doc": "Directory to output documentation (docs always get placed in sub-directory\nnamed by pod).  By default it goes into\n\"{Env.cur.workDir}/doc/\"\n",
            "type": "build::BuildPod.outDocDir"
          }
        ],
        "facets": [

        ],
        "base": "build::BuildScript"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return this script's source file path.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "target",
            "doc": "Lookup a target by name.  If not found and checked is\nfalse return null, otherwise throw an exception.\n",
            "returns": "build::TargetMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "targets",
            "doc": "Get the list of published targets for this script.  The\nfirst target should be the default.  The list of targets\nis defined by all the methods with the `Target` facet.\n",
            "returns": "build::TargetMethod[]",
            "params": [

            ]
          },
          {
            "name": "config",
            "doc": "Get a config property using the following rules:\n  1. `sys::Env.vars` with 'FAN_BUILD_$name.upper'\n  2. `sys::Env.config` for build pod\n  3. fallback to 'def' parameter\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::Str? def"
              }
            ]
          },
          {
            "name": "configDir",
            "doc": "Get a `config` prop which identifies a directory.\nIf the prop isn't configured or doesn't map to a\nvalid directory, then return def.\n",
            "returns": "sys::File?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::File? def"
              }
            ]
          },
          {
            "name": "configs",
            "doc": "Get the key/value map of config props which are loaded\nfrom \"etc/build/config.props\".\n",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "applyMacros",
            "doc": "Apply a set of macro substitutions to the given pattern.\nSubstitution keys are indicated in the pattern using \"@{key}\"\nand replaced by definition in macros map.  If a substitution\nkey is undefined then raise an exception.  The `configs`\nmethod is used for default macro key/value map.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pattern",
                "type": "sys::Str pattern"
              },
              {
                "name": "macros",
                "type": "[sys::Str:sys::Str] macros"
              }
            ]
          },
          {
            "name": "resolveFiles",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveFilesOrDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "dumpEnv",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "parseArgs",
            "doc": "",
            "returns": "build::TargetMethod[]?",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          {
            "name": "usage",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "Run the script with the specified arguments.\nReturn 0 on success or -1 on failure.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          null,
          null,
          null,
          {
            "name": "validate",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "compile",
            "doc": "Compile Java source into jar\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "findOutOfDateDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "temp",
                "type": "sys::File temp"
              }
            ]
          },
          {
            "name": "anyOutOfDate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "srcDir",
                "type": "sys::File srcDir"
              },
              {
                "name": "outDir",
                "type": "sys::File outDir"
              }
            ]
          },
          {
            "name": "clean",
            "doc": "Delete all intermediate and target files\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "full",
            "doc": "Run clean, compile\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "BuildJava",
        "doc": "BuildJava is the base class for build scripts used to manage\nbuilding Java source code into a Java jar file.\n",
        "fields": [
          {
            "name": "log",
            "doc": "Log used for error reporting and tracing\n",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "doc": "The source file of this script\n",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "doc": "The directory containing the this script\n",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "doc": "Home directory of development installation.  By default this\nvalue is initialized by 'devHome' config prop, otherwise\n`sys::Env.homeDir` is used.\n",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "doc": "",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "doc": "",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "jar",
            "doc": "Required target jar file to build\n",
            "type": "build::BuildJava.jar"
          },
          {
            "name": "packages",
            "doc": "Required list of dotted package names to compile.  Each of these\npackages must have a corresponding source directory relative to the\nscript directory.\n",
            "type": "build::BuildJava.packages"
          },
          {
            "name": "cp",
            "doc": "List of files to include in compiler classpath.  The core\nJava rt.jar is always implied and should not be specified.\nThese URIs are relative to the script dir.\n",
            "type": "build::BuildJava.cp"
          },
          {
            "name": "mainClass",
            "doc": "Main class name to add to manifest if not null.\n",
            "type": "build::BuildJava.mainClass"
          }
        ],
        "facets": [

        ],
        "base": "build::BuildScript"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "isDebug",
            "doc": "Is debug level enabled\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "indent",
            "doc": "Indent the output.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "unindent",
            "doc": "Unindent the output.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "err",
            "doc": "Log an error level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Log a warn level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "info",
            "doc": "Log an info level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "debug",
            "doc": "Log an debug level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "log",
            "doc": "Generate a log entry.  The log entry is only generated\nif the specified level is greater than or equal to\nthe configured level field.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "rec",
                "type": "sys::LogRec rec"
              }
            ]
          },
          {
            "name": "compilerErr",
            "doc": "Log a CompilerErr\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "err",
                "type": "compiler::CompilerErr err"
              }
            ]
          },
          {
            "name": "print",
            "doc": "Print a string without trailing newline.\n",
            "returns": "compiler::CompilerLog",
            "params": [
              {
                "name": "s",
                "type": "sys::Obj? s"
              }
            ]
          },
          {
            "name": "printLine",
            "doc": "Print a line.\n",
            "returns": "compiler::CompilerLog",
            "params": [
              {
                "name": "s",
                "type": "sys::Obj? s"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          }
        ],
        "name": "BuildLog",
        "doc": "BuildLog is used for logging build scripts\n",
        "fields": [
          {
            "name": "level",
            "doc": "Max severity of log entries to report\n",
            "type": "compiler::CompilerLog.level"
          },
          {
            "name": "indentation",
            "doc": "Current level of indentation\n",
            "type": "compiler::CompilerLog.indentation"
          },
          {
            "name": "out",
            "doc": "Sink for all output\n",
            "type": "compiler::CompilerLog.out"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerLog"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return the qualified type name and optional message.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "msg",
            "doc": "Get the string message passed to the contructor or empty\nstring if a message is not available.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "cause",
            "doc": "Get the underyling cause exception or null.\n",
            "returns": "sys::Err?",
            "params": [

            ]
          },
          {
            "name": "trace",
            "doc": "Dump the stack trace of this exception to the specified\noutput stream (or 'Env.cur.err' by default).  Return this.\n\nThe options may be used to specify the format of the output:\n  - \"indent\": Int for initial number of indentation spaces\n  - \"maxDepth\": Int specifies how many methods in each\n       exception of chain to include.  If unspecified the\n       default is configured from the \"errTraceMaxDepth\" prop\n       in etc/sys/config.props.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              },
              {
                "name": "options",
                "type": "[sys::Str:sys::Obj]? options"
              }
            ]
          },
          {
            "name": "traceToStr",
            "doc": "Dump the stack trace of this exception to a Str.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "cause",
                "type": "sys::Err? cause"
              }
            ]
          }
        ],
        "name": "FatalBuildErr",
        "doc": "FatalBuildErr is thrown to immediately terminate\nthe current build script.\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Err"
      },
      {
        "public": false,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "main",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "Main",
        "doc": "",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": false,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "parsePath",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "createEnv",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "createPod",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "InitCmd",
        "doc": "",
        "fields": [
          {
            "name": "buildGroup",
            "doc": "",
            "type": "build::InitCmd.buildGroup"
          },
          {
            "name": "buildPod",
            "doc": "",
            "type": "build::InitCmd.buildPod"
          },
          {
            "name": "envDir",
            "doc": "",
            "type": "build::InitCmd.envDir"
          },
          {
            "name": "srcDir",
            "doc": "",
            "type": "build::InitCmd.srcDir"
          },
          {
            "name": "curDir",
            "doc": "",
            "type": "build::InitCmd.curDir"
          },
          {
            "name": "hasEnv",
            "doc": "",
            "type": "build::InitCmd.hasEnv"
          },
          {
            "name": "podName",
            "doc": "",
            "type": "build::InitCmd.podName"
          },
          {
            "name": "podPath",
            "doc": "",
            "type": "build::InitCmd.podPath"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return name.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct a target to run under the specified build script.\nThe name is the key used to invoke this target from the command\nline. Description is used for usage summary.  Func is invoked\nwhen this target is executed.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              },
              {
                "name": "method",
                "type": "sys::Method method"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Method of the target.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "help",
            "doc": "Summary description for usage help, derived\nfrom `Target` facet on method.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "run",
            "doc": "Run this target by invoking the target's method.  If the target\nfails to run then it should report errors via the log and throw\nFatalBuildErr.\n",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "TargetMethod",
        "doc": "TargetMethod wraps a build target method which may be executed independently\nwithin a build script.  Targets are the top level unit for organizing\nbuild scripts - each script publishes its available targets via\n`BuildScript.targets`.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::TargetMethod.script"
          },
          {
            "name": "method",
            "doc": "Method to invoke when this target is executed.\n",
            "type": "build::TargetMethod.method"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return this script's source file path.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "target",
            "doc": "Lookup a target by name.  If not found and checked is\nfalse return null, otherwise throw an exception.\n",
            "returns": "build::TargetMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "targets",
            "doc": "Get the list of published targets for this script.  The\nfirst target should be the default.  The list of targets\nis defined by all the methods with the `Target` facet.\n",
            "returns": "build::TargetMethod[]",
            "params": [

            ]
          },
          {
            "name": "config",
            "doc": "Get a config property using the following rules:\n  1. `sys::Env.vars` with 'FAN_BUILD_$name.upper'\n  2. `sys::Env.config` for build pod\n  3. fallback to 'def' parameter\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::Str? def"
              }
            ]
          },
          {
            "name": "configDir",
            "doc": "Get a `config` prop which identifies a directory.\nIf the prop isn't configured or doesn't map to a\nvalid directory, then return def.\n",
            "returns": "sys::File?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::File? def"
              }
            ]
          },
          {
            "name": "configs",
            "doc": "Get the key/value map of config props which are loaded\nfrom \"etc/build/config.props\".\n",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "applyMacros",
            "doc": "Apply a set of macro substitutions to the given pattern.\nSubstitution keys are indicated in the pattern using \"@{key}\"\nand replaced by definition in macros map.  If a substitution\nkey is undefined then raise an exception.  The `configs`\nmethod is used for default macro key/value map.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pattern",
                "type": "sys::Str pattern"
              },
              {
                "name": "macros",
                "type": "[sys::Str:sys::Str] macros"
              }
            ]
          },
          {
            "name": "resolveFiles",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveFilesOrDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "dumpEnv",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "parseArgs",
            "doc": "",
            "returns": "build::TargetMethod[]?",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          {
            "name": "usage",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "Run the script with the specified arguments.\nReturn 0 on success or -1 on failure.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          null,
          null,
          null,
          {
            "name": "validate",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "compile",
            "doc": "Compile C# source into exe or dll\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "clean",
            "doc": "Delete all intermediate and target files\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "full",
            "doc": "Run clean, compile\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "BuildCs",
        "doc": "BuildCs is the base class for build scripts used to manage\nbuilding C# source code into a .NET exe or dll.\n",
        "fields": [
          {
            "name": "log",
            "doc": "Log used for error reporting and tracing\n",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "doc": "The source file of this script\n",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "doc": "The directory containing the this script\n",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "doc": "Home directory of development installation.  By default this\nvalue is initialized by 'devHome' config prop, otherwise\n`sys::Env.homeDir` is used.\n",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "doc": "",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "doc": "",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "output",
            "doc": "Required output file created by the compiler.\n",
            "type": "build::BuildCs.output"
          },
          {
            "name": "targetType",
            "doc": "Required output type. Possible values are 'exe',\n'winexe', 'library' or 'module'.\n",
            "type": "build::BuildCs.targetType"
          },
          {
            "name": "srcDirs",
            "doc": "Required list of directories to compile.  All C# source\nfiles in each directory will be compiled.\n",
            "type": "build::BuildCs.srcDirs"
          },
          {
            "name": "libs",
            "doc": "List of libraries to link to.\n",
            "type": "build::BuildCs.libs"
          },
          {
            "name": "skip",
            "doc": "Should we skip compiling .NET code?  Default only\nruns C# compiler if running on Windows.\n",
            "type": "build::BuildCs.skip"
          }
        ],
        "facets": [

        ],
        "base": "build::BuildScript"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return this script's source file path.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "target",
            "doc": "Lookup a target by name.  If not found and checked is\nfalse return null, otherwise throw an exception.\n",
            "returns": "build::TargetMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "targets",
            "doc": "BuildGroup publishes the union by name of it's\nchildren script targets plus any of its own targets.\n",
            "returns": "build::TargetMethod[]",
            "params": [

            ]
          },
          {
            "name": "config",
            "doc": "Get a config property using the following rules:\n  1. `sys::Env.vars` with 'FAN_BUILD_$name.upper'\n  2. `sys::Env.config` for build pod\n  3. fallback to 'def' parameter\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::Str? def"
              }
            ]
          },
          {
            "name": "configDir",
            "doc": "Get a `config` prop which identifies a directory.\nIf the prop isn't configured or doesn't map to a\nvalid directory, then return def.\n",
            "returns": "sys::File?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "sys::File? def"
              }
            ]
          },
          {
            "name": "configs",
            "doc": "Get the key/value map of config props which are loaded\nfrom \"etc/build/config.props\".\n",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "applyMacros",
            "doc": "Apply a set of macro substitutions to the given pattern.\nSubstitution keys are indicated in the pattern using \"@{key}\"\nand replaced by definition in macros map.  If a substitution\nkey is undefined then raise an exception.  The `configs`\nmethod is used for default macro key/value map.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pattern",
                "type": "sys::Str pattern"
              },
              {
                "name": "macros",
                "type": "[sys::Str:sys::Str] macros"
              }
            ]
          },
          {
            "name": "resolveFiles",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "resolveFilesOrDirs",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[] uris"
              }
            ]
          },
          {
            "name": "dumpEnv",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "parseArgs",
            "doc": "",
            "returns": "build::TargetMethod[]?",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          {
            "name": "usage",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "Run the script with the specified arguments.\nReturn 0 on success or -1 on failure.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          null,
          null,
          null,
          {
            "name": "children",
            "doc": "Compiled children scripts\n",
            "returns": "build::BuildScript[]",
            "params": [

            ]
          },
          {
            "name": "runOnChildren",
            "doc": "Run the specified target name on each of the\nchildren scripts that support the specified name.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "targetName",
                "type": "sys::Str targetName"
              }
            ]
          },
          {
            "name": "spawnOnChildren",
            "doc": "Run the specified target name on each of the children\nscripts that support the specified name.  Unlike runOnChildren\nthis method actually spawns a new process to run the child\nscript.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "targetName",
                "type": "sys::Str targetName"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          null
        ],
        "name": "BuildGroup",
        "doc": "BuildGroup is the base class for build scripts which compose\na set of children build scripts into a single group.  The\ntarget's of a BuildGroup are the union of the target\nnames available in the children scripts.\n",
        "fields": [
          {
            "name": "log",
            "doc": "Log used for error reporting and tracing\n",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "doc": "The source file of this script\n",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "doc": "The directory containing the this script\n",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "doc": "Home directory of development installation.  By default this\nvalue is initialized by 'devHome' config prop, otherwise\n`sys::Env.homeDir` is used.\n",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "doc": "",
            "type": "build::BuildGroup.targets$Store"
          },
          {
            "name": "configs$Store",
            "doc": "",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "childrenScripts",
            "doc": "Required list of Uris relative to this scriptDir of\nFantom build script files to group together.\n",
            "type": "build::BuildGroup.childrenScripts"
          },
          {
            "name": "children$Store",
            "doc": "",
            "type": "build::BuildGroup.children$Store"
          }
        ],
        "facets": [

        ],
        "base": "build::BuildScript"
      },
      {
        "public": false,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return name.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "help",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "s",
                "type": "build::BuildGroup s"
              },
              {
                "name": "n",
                "type": "sys::Str n"
              }
            ]
          }
        ],
        "name": "GroupTarget",
        "doc": "",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::TargetMethod.script"
          },
          {
            "name": "method",
            "doc": "Method to invoke when this target is executed.\n",
            "type": "build::TargetMethod.method"
          },
          {
            "name": "name",
            "doc": "",
            "type": "build::GroupTarget.name"
          }
        ],
        "facets": [

        ],
        "base": "build::TargetMethod"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct with parent script.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run this task.  If there is an error, the report them via\nthe script's log and throw FatalBuildErr if the script should\nbe terminated.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          }
        ],
        "name": "Task",
        "doc": "Task is the base class for commands to run in build scripts.\nThe library of Task subclasses represent the reusable units of\nwork which are composed together to implement build script\nTargets.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "|build::Target->sys::Void|? f"
              }
            ]
          },
          null
        ],
        "name": "Target",
        "doc": "Target facet is applied to a `BuildScript` method to\nindicate it is a build target or goal.\n",
        "fields": [
          {
            "name": "help",
            "doc": "String for usage help, should be a single short line summary of target\n",
            "type": "build::Target.help"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=false\ncollection=false\n}"
        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              },
              {
                "name": "file",
                "type": "sys::File file"
              }
            ]
          }
        ],
        "name": "Delete",
        "doc": "Delete is used to delete a file or directory.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "file",
            "doc": "",
            "type": "build::Delete.file"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run JNI task\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Constructor.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          },
          {
            "name": "platLib",
            "doc": "",
            "returns": "sys::Uri",
            "params": [

            ]
          },
          {
            "name": "addFiles",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "file",
                "type": "sys::File file"
              },
              {
                "name": "cmd",
                "type": "sys::Str[] cmd"
              }
            ]
          },
          null
        ],
        "name": "CompileJni",
        "doc": "Compile JNI C source code.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "src",
            "doc": "List of source files or directories to compile\n",
            "type": "build::CompileJni.src"
          },
          {
            "name": "lib",
            "doc": "Library for compiler output.\n",
            "type": "build::CompileJni.lib"
          },
          {
            "name": "out",
            "doc": "Output directory for compiler.\n",
            "type": "build::CompileJni.out"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              },
              {
                "name": "cmd",
                "type": "sys::Str[] cmd"
              },
              {
                "name": "dir",
                "type": "sys::File? dir"
              }
            ]
          },
          {
            "name": "exePath",
            "doc": "Given a executable file turn it into a path to use for Exec:\n  - if running on Window's add the '.exe' extension\n  - return `sys::File.osPath`\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "exe",
                "type": "sys::File exe"
              }
            ]
          }
        ],
        "name": "Exec",
        "doc": "Exec is used to run an external OS process\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "process",
            "doc": "",
            "type": "build::Exec.process"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run the task\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct uninitialized task\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          },
          {
            "name": "rewrite",
            "doc": "Rewrite the given pod file with the configured options\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "podFile",
                "type": "sys::File podFile"
              },
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "strip",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "entry",
                "type": "sys::File entry"
              },
              {
                "name": "data",
                "type": "sys::Buf data"
              }
            ]
          },
          null
        ],
        "name": "PodRewrite",
        "doc": "PodRewrite is used to update the contents of one or more pod files.\nIt can be used to strip javascript, source code, and docs.  However it\ncannot strip test code - that requires a recompile from source with\nthe 'stripTest' flag.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "outDir",
            "doc": "Required output directory to place rewritten pods\n",
            "type": "build::PodRewrite.outDir"
          },
          {
            "name": "pods",
            "doc": "List of pod files or pod names to rewrite\n",
            "type": "build::PodRewrite.pods"
          },
          {
            "name": "stripJs",
            "doc": "Remove pod's JavaScript files: \"pod.js\" and \"pod.js.map\"\n",
            "type": "build::PodRewrite.stripJs"
          },
          {
            "name": "stripSrc",
            "doc": "Remove pod's source code if bundled into the pod zip\n",
            "type": "build::PodRewrite.stripSrc"
          },
          {
            "name": "stripDocs",
            "doc": "Remove pod's documentation: pod.fandoc and all api docs\n",
            "type": "build::PodRewrite.stripDocs"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run not implemented\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Initialize the JDK environment fields.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          }
        ],
        "name": "JdkTask",
        "doc": "Java Developer Kit task provides a common set of\nenvironment variables for the Java environment.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "jdkHomeDir",
            "doc": "Home directory for jdk installation\nconfigured via config prop 'jdkHome'\n",
            "type": "build::JdkTask.jdkHomeDir"
          },
          {
            "name": "jdkBinDir",
            "doc": "JDK bin for executables: {jdkHomeDir}/bin/\n",
            "type": "build::JdkTask.jdkBinDir"
          },
          {
            "name": "javaExe",
            "doc": "Java runtime executable: {jdkBinDir}/java\n",
            "type": "build::JdkTask.javaExe"
          },
          {
            "name": "javacExe",
            "doc": "Javac compiler executable: {jdkBinDir}/javac\n",
            "type": "build::JdkTask.javacExe"
          },
          {
            "name": "jarExe",
            "doc": "Jar (Java Archive) executable: {jdkBinDir}/jar\n",
            "type": "build::JdkTask.jarExe"
          },
          {
            "name": "rtJar",
            "doc": "Standard runtime library jar file: {jdkHomeDir}/jre/lib/rt.jar\n",
            "type": "build::JdkTask.rtJar"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run the javac task\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct uninitialized javac task\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          },
          {
            "name": "cpAddExtJars",
            "doc": "Add all the jars found in lib/java/ext and lib/java/ext/os\nto the class path.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "cpAddJars",
            "doc": "Add all the jar files found in the specified\ndirectory to the classpath.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "dir",
                "type": "sys::File dir"
              }
            ]
          },
          {
            "name": "listFiles",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "list",
                "type": "sys::Str[] list"
              },
              {
                "name": "cwd",
                "type": "sys::File cwd"
              },
              {
                "name": "files",
                "type": "sys::File[] files"
              }
            ]
          },
          null
        ],
        "name": "CompileJava",
        "doc": "Run the Java compiler to produce a directory of Java classfiles.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "jdkHomeDir",
            "doc": "Home directory for jdk installation\nconfigured via config prop 'jdkHome'\n",
            "type": "build::JdkTask.jdkHomeDir"
          },
          {
            "name": "jdkBinDir",
            "doc": "JDK bin for executables: {jdkHomeDir}/bin/\n",
            "type": "build::JdkTask.jdkBinDir"
          },
          {
            "name": "javaExe",
            "doc": "Java runtime executable: {jdkBinDir}/java\n",
            "type": "build::JdkTask.javaExe"
          },
          {
            "name": "javacExe",
            "doc": "Javac compiler executable: {jdkBinDir}/javac\n",
            "type": "build::JdkTask.javacExe"
          },
          {
            "name": "jarExe",
            "doc": "Jar (Java Archive) executable: {jdkBinDir}/jar\n",
            "type": "build::JdkTask.jarExe"
          },
          {
            "name": "rtJar",
            "doc": "Standard runtime library jar file: {jdkHomeDir}/jre/lib/rt.jar\n",
            "type": "build::JdkTask.rtJar"
          },
          {
            "name": "params",
            "doc": "Extra parameters to pass to javac.  Default is\nto target 1.5 classfiles.\n",
            "type": "build::CompileJava.params"
          },
          {
            "name": "cp",
            "doc": "Class path - list of jars to compile against,\nrt.jar is automatically included\n",
            "type": "build::CompileJava.cp"
          },
          {
            "name": "src",
            "doc": "List of source files or directories to compile.  If\na directory is specified, then it is recursively searched\nfor all \".java\" files.\n",
            "type": "build::CompileJava.src"
          },
          {
            "name": "outDir",
            "doc": "Output directory\n",
            "type": "build::CompileJava.outDir"
          }
        ],
        "facets": [

        ],
        "base": "build::JdkTask"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              },
              {
                "name": "dir",
                "type": "sys::File dir"
              }
            ]
          }
        ],
        "name": "CreateDir",
        "doc": "CreateDir is used to create a directory\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "dir",
            "doc": "",
            "type": "build::CreateDir.dir"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Make with script name, arguments are Fantom arguments\npassed to main method (**not** command line string arguments)\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              },
              {
                "name": "file",
                "type": "sys::File file"
              },
              {
                "name": "args",
                "type": "sys::Obj[]? args"
              }
            ]
          },
          {
            "name": "compile",
            "doc": "",
            "returns": "sys::Pod",
            "params": [

            ]
          }
        ],
        "name": "FanScript",
        "doc": "FanScript is used to compile a Fantom script into\nmemory and run it via reflection.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "file",
            "doc": "",
            "type": "build::FanScript.file"
          },
          {
            "name": "args",
            "doc": "",
            "type": "build::FanScript.args"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run the javac task\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct uninitialized task\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          },
          {
            "name": "verifyConfig",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "isMainParamsOk",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "sys::Method m"
              }
            ]
          },
          {
            "name": "initTempDir",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "cleanupTempDir",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "sysClasses",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "podClasses",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              }
            ]
          },
          {
            "name": "extractClassfilesToTemp",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zipFile",
                "type": "sys::File zipFile"
              }
            ]
          },
          {
            "name": "reflect",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              }
            ]
          },
          {
            "name": "etcFiles",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "copyEtcFile",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "uri",
                "type": "sys::Uri uri"
              },
              {
                "name": "destUri",
                "type": "sys::Uri destUri"
              }
            ]
          },
          {
            "name": "manifest",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "jar",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "JarDist",
        "doc": "JarDist compiles a set of Fantom pods into a single Java JAR file.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "jdkHomeDir",
            "doc": "Home directory for jdk installation\nconfigured via config prop 'jdkHome'\n",
            "type": "build::JdkTask.jdkHomeDir"
          },
          {
            "name": "jdkBinDir",
            "doc": "JDK bin for executables: {jdkHomeDir}/bin/\n",
            "type": "build::JdkTask.jdkBinDir"
          },
          {
            "name": "javaExe",
            "doc": "Java runtime executable: {jdkBinDir}/java\n",
            "type": "build::JdkTask.javaExe"
          },
          {
            "name": "javacExe",
            "doc": "Javac compiler executable: {jdkBinDir}/javac\n",
            "type": "build::JdkTask.javacExe"
          },
          {
            "name": "jarExe",
            "doc": "Jar (Java Archive) executable: {jdkBinDir}/jar\n",
            "type": "build::JdkTask.jarExe"
          },
          {
            "name": "rtJar",
            "doc": "Standard runtime library jar file: {jdkHomeDir}/jre/lib/rt.jar\n",
            "type": "build::JdkTask.rtJar"
          },
          {
            "name": "outFile",
            "doc": "Required output jar file to create\n",
            "type": "build::JarDist.outFile"
          },
          {
            "name": "mainMethod",
            "doc": "Qualified name of main method to run for JAR.\nThis must be a static void method with no arguments.\n",
            "type": "build::JarDist.mainMethod"
          },
          {
            "name": "mainMethodArg",
            "doc": "Does the main method accept a Str[] arg\n",
            "type": "build::JarDist.mainMethodArg"
          },
          {
            "name": "podNames",
            "doc": "List of pods to compile into JAR; sys is always implied\n",
            "type": "build::JarDist.podNames"
          },
          {
            "name": "tempDir",
            "doc": "",
            "type": "build::JarDist.tempDir"
          },
          {
            "name": "manifestFile",
            "doc": "",
            "type": "build::JarDist.manifestFile"
          }
        ],
        "facets": [

        ],
        "base": "build::JdkTask"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run the csc task\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Initialize the .NET environment fields for csc.exe.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          },
          null
        ],
        "name": "CompileCs",
        "doc": "Run the C# compiler to produce an exe or dll.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "dotnetHomeDir",
            "doc": "Home directory for .NET installation\nconfigured via config prop\n",
            "type": "build::CompileCs.dotnetHomeDir"
          },
          {
            "name": "cscExe",
            "doc": "C# compiler executable: {dotnetHomeDir}/csc.exe\n",
            "type": "build::CompileCs.cscExe"
          },
          {
            "name": "output",
            "doc": "Output file created by the compiler.\n",
            "type": "build::CompileCs.output"
          },
          {
            "name": "targetType",
            "doc": "Output target type\n",
            "type": "build::CompileCs.targetType"
          },
          {
            "name": "libs",
            "doc": "List of dll libraries to link in\n",
            "type": "build::CompileCs.libs"
          },
          {
            "name": "src",
            "doc": "List of source files or directories to compile\n",
            "type": "build::CompileCs.src"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for script.log\n",
            "returns": "build::BuildLog",
            "params": [

            ]
          },
          {
            "name": "fatal",
            "doc": "Log an error and return a FatalBuildErr instance\n",
            "returns": "build::FatalBuildErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "script",
                "type": "build::BuildScript script"
              }
            ]
          },
          {
            "name": "zip",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::Zip out"
              },
              {
                "name": "f",
                "type": "sys::File f"
              },
              {
                "name": "path",
                "type": "sys::Str path"
              }
            ]
          },
          null
        ],
        "name": "CreateZip",
        "doc": "CreateZip is used to create a zip file from a directory on the file system.\n",
        "fields": [
          {
            "name": "script",
            "doc": "Return the parent build script associated with this task.\n",
            "type": "build::Task.script"
          },
          {
            "name": "outFile",
            "doc": "Required output zip file to create\n",
            "type": "build::CreateZip.outFile"
          },
          {
            "name": "inDirs",
            "doc": "Required directories to zip up.  The contents of these dirs are\nrecursively zipped up with zip paths relative to this root\ndirectory.\n",
            "type": "build::CreateZip.inDirs"
          },
          {
            "name": "filter",
            "doc": "This function is called on each file under 'inDir'; if true\nreturned it is included in the zip, if false then it is excluded.\nReturning false for a directory will skip recursing the entire\ndirectory.\n",
            "type": "build::CreateZip.filter"
          },
          {
            "name": "pathPrefix",
            "doc": "Specifies the top level directory inside the zip file\nprefixed to all the files.  For example use 'acme/' to\nput everything inside the zip file inside a \"acme\" directory.\nThe URI used must end with a slash.  If null, then no path\nprefix is used.\n",
            "type": "build::CreateZip.pathPrefix"
          }
        ],
        "facets": [

        ],
        "base": "build::Task"
      },
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ],
    "name": "build",
    "type": "pod"
  },
  {
    "classes": [
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return the qualified type name and optional message.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "msg",
            "doc": "Get the string message passed to the contructor or empty\nstring if a message is not available.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "cause",
            "doc": "Get the underyling cause exception or null.\n",
            "returns": "sys::Err?",
            "params": [

            ]
          },
          {
            "name": "trace",
            "doc": "Dump the stack trace of this exception to the specified\noutput stream (or 'Env.cur.err' by default).  Return this.\n\nThe options may be used to specify the format of the output:\n  - \"indent\": Int for initial number of indentation spaces\n  - \"maxDepth\": Int specifies how many methods in each\n       exception of chain to include.  If unspecified the\n       default is configured from the \"errTraceMaxDepth\" prop\n       in etc/sys/config.props.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              },
              {
                "name": "options",
                "type": "[sys::Str:sys::Obj]? options"
              }
            ]
          },
          {
            "name": "traceToStr",
            "doc": "Dump the stack trace of this exception to a Str.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              },
              {
                "name": "cause",
                "type": "sys::Err? cause"
              },
              {
                "name": "level",
                "type": "sys::LogLevel level"
              }
            ]
          },
          {
            "name": "loc",
            "doc": "",
            "returns": "compiler::Loc",
            "params": [

            ]
          },
          {
            "name": "isErr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isWarn",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "CompilerErr",
        "doc": "CompilerErr - instances should always be created via CompilerStep.err().\n",
        "fields": [
          {
            "name": "level",
            "doc": "",
            "type": "compiler::CompilerErr.level"
          },
          {
            "name": "file",
            "doc": "",
            "type": "compiler::CompilerErr.file"
          },
          {
            "name": "line",
            "doc": "",
            "type": "compiler::CompilerErr.line"
          },
          {
            "name": "col",
            "doc": "",
            "type": "compiler::CompilerErr.col"
          }
        ],
        "facets": [

        ],
        "base": "sys::Err"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct for specified output stream.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "isDebug",
            "doc": "Is debug level enabled\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "indent",
            "doc": "Indent the output.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "unindent",
            "doc": "Unindent the output.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "err",
            "doc": "Log an error level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Log a warn level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "info",
            "doc": "Log an info level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "debug",
            "doc": "Log an debug level message.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "err",
                "type": "sys::Err? err"
              }
            ]
          },
          {
            "name": "log",
            "doc": "Generate a log entry.  The log entry is only generated\nif the specified level is greater than or equal to\nthe configured level field.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "rec",
                "type": "sys::LogRec rec"
              }
            ]
          },
          {
            "name": "compilerErr",
            "doc": "Log a CompilerErr\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "err",
                "type": "compiler::CompilerErr err"
              }
            ]
          },
          {
            "name": "print",
            "doc": "Print a string without trailing newline.\n",
            "returns": "compiler::CompilerLog",
            "params": [
              {
                "name": "s",
                "type": "sys::Obj? s"
              }
            ]
          },
          {
            "name": "printLine",
            "doc": "Print a line.\n",
            "returns": "compiler::CompilerLog",
            "params": [
              {
                "name": "s",
                "type": "sys::Obj? s"
              }
            ]
          },
          null
        ],
        "name": "CompilerLog",
        "doc": "CompilerLog manages logging compiler messages.  The default\nwrites everything to standard output.\n",
        "fields": [
          {
            "name": "level",
            "doc": "Max severity of log entries to report\n",
            "type": "compiler::CompilerLog.level"
          },
          {
            "name": "indentation",
            "doc": "Current level of indentation\n",
            "type": "compiler::CompilerLog.indentation"
          },
          {
            "name": "out",
            "doc": "Sink for all output\n",
            "type": "compiler::CompilerLog.out"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "file",
                "type": "sys::Str file"
              },
              {
                "name": "line",
                "type": "sys::Int? line"
              },
              {
                "name": "col",
                "type": "sys::Int? col"
              }
            ]
          },
          {
            "name": "makeFile",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "file",
                "type": "sys::File? file"
              },
              {
                "name": "line",
                "type": "sys::Int? line"
              },
              {
                "name": "col",
                "type": "sys::Int? col"
              }
            ]
          },
          {
            "name": "makeUninit",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "filename",
            "doc": "",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "fileUri",
            "doc": "",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "toLocStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          null
        ],
        "name": "Loc",
        "doc": "Loc provides a source file, line number, and column number.\n",
        "fields": [
          {
            "name": "file",
            "doc": "",
            "type": "compiler::Loc.file"
          },
          {
            "name": "line",
            "doc": "",
            "type": "compiler::Loc.line"
          },
          {
            "name": "col",
            "doc": "",
            "type": "compiler::Loc.col"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct with reasonable defaults\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "input",
                "type": "compiler::CompilerInput input"
              }
            ]
          },
          {
            "name": "compile",
            "doc": "Compile fan source code from the configured CompilerInput\ninto a fan pod and return the resulting CompilerOutput.\n",
            "returns": "compiler::CompilerOutput",
            "params": [

            ]
          },
          {
            "name": "frontend",
            "doc": "Execute front-end compiler pipeline\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "backend",
            "doc": "Execute back-end compiler pipeline\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "cleanup",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "Compiler",
        "doc": "Compiler manages the top level process of the compiler pipeline.\nThere are a couple different \"pipelines\" used to accomplish\nvarious twists on compiling Fantom code (from memory, files, etc).\nThe pipelines are implemented as discrete CompilerSteps.\nAs the steps are executed, the Compiler instance itself stores\nthe state as we move from files -> ast -> resolved ast -> code.\n\nError reporting is managed via the Compiler.errors list.  If\nthe compiler encounters problems it accumulates the errors as\nCompileExceptions in this list, then raises the first exception\nto the caller.  All errors go thru the CompilerSupport.err()\nmethods for logging.  To log an error and continue we simply\ncall err().  To fail fast, we code something like: throw err().\nOr at the end of a step we may call bombIfErr() which throws the\nfirst exception if any errors have accumulated.\n",
        "fields": [
          {
            "name": "input",
            "doc": "",
            "type": "compiler::Compiler.input"
          },
          {
            "name": "log",
            "doc": "",
            "type": "compiler::Compiler.log"
          },
          {
            "name": "errs",
            "doc": "",
            "type": "compiler::Compiler.errs"
          },
          {
            "name": "warns",
            "doc": "",
            "type": "compiler::Compiler.warns"
          },
          {
            "name": "depends",
            "doc": "",
            "type": "compiler::Compiler.depends"
          },
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::Compiler.ns"
          },
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::Compiler.pod"
          },
          {
            "name": "isSys",
            "doc": "",
            "type": "compiler::Compiler.isSys"
          },
          {
            "name": "srcFiles",
            "doc": "",
            "type": "compiler::Compiler.srcFiles"
          },
          {
            "name": "resFiles",
            "doc": "",
            "type": "compiler::Compiler.resFiles"
          },
          {
            "name": "jsFiles",
            "doc": "",
            "type": "compiler::Compiler.jsFiles"
          },
          {
            "name": "jsPropsFiles",
            "doc": "",
            "type": "compiler::Compiler.jsPropsFiles"
          },
          {
            "name": "types",
            "doc": "",
            "type": "compiler::Compiler.types"
          },
          {
            "name": "closures",
            "doc": "",
            "type": "compiler::Compiler.closures"
          },
          {
            "name": "wrappers",
            "doc": "",
            "type": "compiler::Compiler.wrappers"
          },
          {
            "name": "jsPod",
            "doc": "",
            "type": "compiler::Compiler.jsPod"
          },
          {
            "name": "js",
            "doc": "",
            "type": "compiler::Compiler.js"
          },
          {
            "name": "jsSourceMap",
            "doc": "",
            "type": "compiler::Compiler.jsSourceMap"
          },
          {
            "name": "cjs",
            "doc": "",
            "type": "compiler::Compiler.cjs"
          },
          {
            "name": "cjsSourceMap",
            "doc": "",
            "type": "compiler::Compiler.cjsSourceMap"
          },
          {
            "name": "esm",
            "doc": "",
            "type": "compiler::Compiler.esm"
          },
          {
            "name": "tsDecl",
            "doc": "",
            "type": "compiler::Compiler.tsDecl"
          },
          {
            "name": "localeDefs",
            "doc": "",
            "type": "compiler::Compiler.localeDefs"
          },
          {
            "name": "localeProps",
            "doc": "",
            "type": "compiler::Compiler.localeProps"
          },
          {
            "name": "fpod",
            "doc": "",
            "type": "compiler::Compiler.fpod"
          },
          {
            "name": "output",
            "doc": "",
            "type": "compiler::Compiler.output"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "CompilerSupport",
        "doc": "CompilerSupport provides lots of convenience methods for classes\nused during the compiler pipeline.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "Callback when entering a compilation unit.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "Callback when existing a compilation unit.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "Callback when entering a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "Callback when exiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "Callback when entering a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "Callback when exiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          }
        ],
        "name": "Visitor",
        "doc": "Vistor is used to walk the abstract syntax tree and visit key nodes.\nThe walk for each node type entails:\n  1. enter\n  2. children\n  3. exit\n  4. visit\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "CompilerStep",
        "doc": "VisitStep represents one discrete task run during the compiler\npipeline.  The implementations are found under steps.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "validate",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "validateReqField",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "field",
                "type": "sys::Str field"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "CompilerInput",
        "doc": "CompilerInput encapsulates all the input needed run the compiler.\nThe compiler can be run in one of two modes - file or str.  In\nfile mode the source code and resource files are read from the\nfile system.  In str mode we compile a single source file from\nan in-memory string.\n",
        "fields": [
          {
            "name": "inputLoc",
            "doc": "Location to use for reporting errors associated with the input\nitself - typically this is mapped to the build script.\n",
            "type": "compiler::CompilerInput.inputLoc"
          },
          {
            "name": "podName",
            "doc": "Name of output pod - required in all modes.\n",
            "type": "compiler::CompilerInput.podName"
          },
          {
            "name": "isScript",
            "doc": "Flag to indicate if we are are compiling a script.  Scripts\ndon't require explicit depends and can import any type via the\nusing statement or with qualified type names.\n",
            "type": "compiler::CompilerInput.isScript"
          },
          {
            "name": "forceJs",
            "doc": "Flag indicating if we should treat all types as having the @Js facet\n",
            "type": "compiler::CompilerInput.forceJs"
          },
          {
            "name": "jsReflectClosures",
            "doc": "Flag to force Fantom closures to be compiled with type reflection information\nwhen emitting JavaScript.\n",
            "type": "compiler::CompilerInput.jsReflectClosures"
          },
          {
            "name": "version",
            "doc": "Version to include in ouput pod's manifest.\n",
            "type": "compiler::CompilerInput.version"
          },
          {
            "name": "summary",
            "doc": "Summary description for pod\n",
            "type": "compiler::CompilerInput.summary"
          },
          {
            "name": "depends",
            "doc": "List of this pod's dependencies used for both the\ncompiler checking and output in the pod's manifest.\n",
            "type": "compiler::CompilerInput.depends"
          },
          {
            "name": "ns",
            "doc": "Namespace used to resolve dependency pods/types.\nDefault implementation uses reflection of the compiler's VM.\n",
            "type": "compiler::CompilerInput.ns"
          },
          {
            "name": "meta",
            "doc": "Pod meta-data name/value pairs\n",
            "type": "compiler::CompilerInput.meta"
          },
          {
            "name": "index",
            "doc": "Pod indexing name/value pairs.  The index values can be\na single Str or a Str[] if there are multiple values\nmapped to one key.\n",
            "type": "compiler::CompilerInput.index"
          },
          {
            "name": "output",
            "doc": "What type of output should be generated - the compiler\ncan be used to generate a transient in-memory pod, write a\npod zip file to disk, or generate JavaScript code.\n",
            "type": "compiler::CompilerInput.output"
          },
          {
            "name": "log",
            "doc": "Log used for reporting compile status\n",
            "type": "compiler::CompilerInput.log"
          },
          {
            "name": "outDir",
            "doc": "Output directory to write pod to, defaults to the\ncurrent environment's working lib directory\n",
            "type": "compiler::CompilerInput.outDir"
          },
          {
            "name": "includeDoc",
            "doc": "Include fandoc in output pod, default is false\n",
            "type": "compiler::CompilerInput.includeDoc"
          },
          {
            "name": "includeSrc",
            "doc": "Include source code in output pod, default is false\n",
            "type": "compiler::CompilerInput.includeSrc"
          },
          {
            "name": "isTest",
            "doc": "Is this compile process being run inside a test, default is false\n",
            "type": "compiler::CompilerInput.isTest"
          },
          {
            "name": "fcodeDump",
            "doc": "If set to true, then disassembled fcode is dumped to 'log.out'.\n",
            "type": "compiler::CompilerInput.fcodeDump"
          },
          {
            "name": "mode",
            "doc": "This mode determines whether the source code is input\nfrom the file system or from an in-memory string.\n",
            "type": "compiler::CompilerInput.mode"
          },
          {
            "name": "docTests",
            "doc": "If set to true, then generate apidocs for test subclasses\n",
            "type": "compiler::CompilerInput.docTests"
          },
          {
            "name": "baseDir",
            "doc": "Base directory of source tree - this directory is used to create\nthe relative paths of the source and resource files in the pod zip.\n",
            "type": "compiler::CompilerInput.baseDir"
          },
          {
            "name": "srcFiles",
            "doc": "List of Fantom source files or directories containing Fantom\nsource files to compile.  Uris are relative to `baseDir`.  This\nfield is used only in file mode.\n",
            "type": "compiler::CompilerInput.srcFiles"
          },
          {
            "name": "resFiles",
            "doc": "List of resource files or directories containing resource files\nto include in the pod zip.  Uris are relative to `baseDir`.\nThis field is used only in file mode.  If a file has a \"jar\"\nextension then its contents are unzipped into the target pod.\n",
            "type": "compiler::CompilerInput.resFiles"
          },
          {
            "name": "jsFiles",
            "doc": "List of JavaScript files or directories containing JavaScript files\nto include in the JavaScript output.  Uris are relative to `baseDir`.\nThis field is used only in file mode.\n",
            "type": "compiler::CompilerInput.jsFiles"
          },
          {
            "name": "jsPropsFiles",
            "doc": "List of files or directores containing '.props' files that should\nbe compiled to JavaScript.  If this field is null then it defaults\nto `resFiles`.  Uris are relative to `baseDir`.\nThis field is used only in file mode.\n",
            "type": "compiler::CompilerInput.jsPropsFiles"
          },
          {
            "name": "srcStr",
            "doc": "Fantom source code to compile (str mode only)\n",
            "type": "compiler::CompilerInput.srcStr"
          },
          {
            "name": "srcStrLoc",
            "doc": "Location to use for SourceFile facet (str mode only)\n",
            "type": "compiler::CompilerInput.srcStrLoc"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the CompilerInputMode instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::CompilerInputMode?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "CompilerInputMode",
        "doc": "Input source from the file system\n",
        "fields": [
          {
            "name": "file",
            "doc": "",
            "type": "compiler::CompilerInputMode.file"
          },
          {
            "name": "str",
            "doc": "",
            "type": "compiler::CompilerInputMode.str"
          },
          {
            "name": "vals",
            "doc": "List of CompilerInputMode values indexed by ordinal\n",
            "type": "compiler::CompilerInputMode.vals"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": false,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return the qualified type name and optional message.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "msg",
            "doc": "Get the string message passed to the contructor or empty\nstring if a message is not available.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "cause",
            "doc": "Get the underyling cause exception or null.\n",
            "returns": "sys::Err?",
            "params": [

            ]
          },
          {
            "name": "trace",
            "doc": "Dump the stack trace of this exception to the specified\noutput stream (or 'Env.cur.err' by default).  Return this.\n\nThe options may be used to specify the format of the output:\n  - \"indent\": Int for initial number of indentation spaces\n  - \"maxDepth\": Int specifies how many methods in each\n       exception of chain to include.  If unspecified the\n       default is configured from the \"errTraceMaxDepth\" prop\n       in etc/sys/config.props.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              },
              {
                "name": "options",
                "type": "[sys::Str:sys::Obj]? options"
              }
            ]
          },
          {
            "name": "traceToStr",
            "doc": "Dump the stack trace of this exception to a Str.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "SuppressedErr",
        "doc": "",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Err"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "CompilerOutput",
        "doc": "CompilerOutput encapsulates the result of a compile.  The compiler\ncan output in three modes:\n  - 'transientPod': compiles to an in-memory pod\n  - 'podFile': compile a pod file to the file system, but don't\n    automatically load it.\n  - 'js': runs through frontend of compiler to build AST and\n    generates JavaScript code (doesn't perform any backend\n    fcode or pod generation)\n",
        "fields": [
          {
            "name": "mode",
            "doc": "Mode indicates the type of this output\n",
            "type": "compiler::CompilerOutput.mode"
          },
          {
            "name": "transientPod",
            "doc": "If `CompilerOutputMode.transientPod` mode, this is loaded pod.\n",
            "type": "compiler::CompilerOutput.transientPod"
          },
          {
            "name": "podFile",
            "doc": "If `CompilerOutputMode.podFile` mode, the pod zip file written to disk.\n",
            "type": "compiler::CompilerOutput.podFile"
          },
          {
            "name": "js",
            "doc": "If `CompilerOutputMode.js` mode, the JavaScript code string.\n",
            "type": "compiler::CompilerOutput.js"
          },
          {
            "name": "cjs",
            "doc": "",
            "type": "compiler::CompilerOutput.cjs"
          },
          {
            "name": "esm",
            "doc": "",
            "type": "compiler::CompilerOutput.esm"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the CompilerOutputMode instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::CompilerOutputMode?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "CompilerOutputMode",
        "doc": "Input source from the file system - see `CompilerOutput`\n",
        "fields": [
          {
            "name": "transientPod",
            "doc": "",
            "type": "compiler::CompilerOutputMode.transientPod"
          },
          {
            "name": "podFile",
            "doc": "",
            "type": "compiler::CompilerOutputMode.podFile"
          },
          {
            "name": "js",
            "doc": "",
            "type": "compiler::CompilerOutputMode.js"
          },
          {
            "name": "vals",
            "doc": "List of CompilerOutputMode values indexed by ordinal\n",
            "type": "compiler::CompilerOutputMode.vals"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compileScript",
            "doc": "Compile the script file into a transient pod.\nSee `sys::Env.compileScript` for option definitions.\n",
            "returns": "sys::Pod",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "file",
                "type": "sys::File file"
              },
              {
                "name": "options",
                "type": "[sys::Str:sys::Obj]? options"
              }
            ]
          },
          {
            "name": "compileScriptToJs",
            "doc": "Compile the script file into JS source code.\nSee `sys::Env.compileScript` for option definitions.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "file",
                "type": "sys::File file"
              },
              {
                "name": "options",
                "type": "[sys::Str:sys::Obj]? options"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "Main",
        "doc": "Main is the main entry point for the Fantom compiler.\nOriginally it was used for \"fanc\" command line, but it\nencapsualtes static methods used by sys.\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "fpod",
                "type": "compiler::FPod fpod"
              }
            ]
          },
          {
            "name": "sourceFile",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "source",
                "type": "sys::Str? source"
              }
            ]
          },
          {
            "name": "lineNumber",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "line",
                "type": "sys::Int? line"
              }
            ]
          },
          {
            "name": "facets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "facets",
                "type": "compiler::FacetDef[]? facets"
              }
            ]
          },
          {
            "name": "enumOrdinal",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ordinal",
                "type": "sys::Int ordinal"
              }
            ]
          },
          {
            "name": "utf",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "data",
                "type": "sys::Str data"
              }
            ]
          },
          {
            "name": "u2",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "data",
                "type": "sys::Int data"
              }
            ]
          },
          {
            "name": "add",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "data",
                "type": "sys::Buf data"
              }
            ]
          }
        ],
        "name": "AttrAsm",
        "doc": "AttrAsm provides support for assembling the attributes\ntable for types and slots.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "fpod",
            "doc": "",
            "type": "compiler::AttrAsm.fpod"
          },
          {
            "name": "attrs",
            "doc": "",
            "type": "compiler::AttrAsm.attrs"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          null
        ],
        "name": "FConst",
        "doc": "FConst provides all the fcode constants\n",
        "fields": [
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          null,
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "assemblePod",
            "doc": "",
            "returns": "compiler::FPod",
            "params": [

            ]
          },
          {
            "name": "assembleMeta",
            "doc": "",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "assembleType",
            "doc": "",
            "returns": "compiler::FType",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "assembleField",
            "doc": "",
            "returns": "compiler::FField",
            "params": [
              {
                "name": "fparent",
                "type": "compiler::FType fparent"
              },
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "assembleMethod",
            "doc": "",
            "returns": "compiler::FMethod",
            "params": [
              {
                "name": "fparent",
                "type": "compiler::FType fparent"
              },
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "typeRef",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "type",
                "type": "compiler::CType type"
              }
            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "val",
                "type": "sys::Str val"
              }
            ]
          },
          {
            "name": "assembleCode",
            "doc": "",
            "returns": "sys::Buf?",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              },
              {
                "name": "attrs",
                "type": "compiler::AttrAsm attrs"
              }
            ]
          },
          {
            "name": "assembleExpr",
            "doc": "",
            "returns": "sys::Buf?",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          }
        ],
        "name": "Assembler",
        "doc": "Assembler assembles all the TypeDefs into their fcode representation.\n",
        "fields": [
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "fpod",
            "doc": "",
            "type": "compiler::Assembler.fpod"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "fpod",
                "type": "compiler::FPod fpod"
              },
              {
                "name": "curMethod",
                "type": "compiler::MethodDef? curMethod"
              }
            ]
          },
          {
            "name": "block",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "stmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "ifStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::IfStmt stmt"
              }
            ]
          },
          {
            "name": "returnStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ReturnStmt stmt"
              }
            ]
          },
          {
            "name": "throwStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ThrowStmt stmt"
              }
            ]
          },
          {
            "name": "throwOp",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "exception",
                "type": "compiler::Expr exception"
              }
            ]
          },
          {
            "name": "localVarDefStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::LocalDefStmt stmt"
              }
            ]
          },
          {
            "name": "whileStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::WhileStmt stmt"
              }
            ]
          },
          {
            "name": "forStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ForStmt stmt"
              }
            ]
          },
          {
            "name": "breakOrContinueStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "switchStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::SwitchStmt stmt"
              }
            ]
          },
          {
            "name": "computeTableRange",
            "doc": "",
            "returns": "sys::Int[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::SwitchStmt stmt"
              }
            ]
          },
          {
            "name": "tableSwitchStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::SwitchStmt stmt"
              },
              {
                "name": "min",
                "type": "sys::Int min"
              },
              {
                "name": "max",
                "type": "sys::Int max"
              }
            ]
          },
          {
            "name": "equalsSwitchStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::SwitchStmt stmt"
              }
            ]
          },
          {
            "name": "switchBlock",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block? block"
              },
              {
                "name": "popType",
                "type": "compiler::CType? popType"
              }
            ]
          },
          {
            "name": "inProtectedRegion",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "tryStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "tryCatch",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "c",
                "type": "compiler::Catch c"
              },
              {
                "name": "start",
                "type": "sys::Int start"
              },
              {
                "name": "end",
                "type": "sys::Int end"
              },
              {
                "name": "region",
                "type": "compiler::ProtectedRegion region"
              }
            ]
          },
          {
            "name": "addToErrTable",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "start",
                "type": "sys::Int start"
              },
              {
                "name": "end",
                "type": "sys::Int end"
              },
              {
                "name": "handler",
                "type": "sys::Int handler"
              },
              {
                "name": "errType",
                "type": "compiler::CType? errType"
              }
            ]
          },
          {
            "name": "expr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "nullLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "boolLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "intLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "floatLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "decimalLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "strLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "durationLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "uriLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "typeLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "slotLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::SlotLiteralExpr expr"
              }
            ]
          },
          {
            "name": "rangeLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "r",
                "type": "compiler::RangeLiteralExpr r"
              }
            ]
          },
          {
            "name": "listLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "list",
                "type": "compiler::ListLiteralExpr list"
              }
            ]
          },
          {
            "name": "mapLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "map",
                "type": "compiler::MapLiteralExpr map"
              }
            ]
          },
          {
            "name": "not",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unary",
                "type": "compiler::UnaryExpr unary"
              }
            ]
          },
          {
            "name": "cmpNull",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unary",
                "type": "compiler::UnaryExpr unary"
              }
            ]
          },
          {
            "name": "cmpNotNull",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unary",
                "type": "compiler::UnaryExpr unary"
              }
            ]
          },
          {
            "name": "same",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "binary",
                "type": "compiler::BinaryExpr binary"
              }
            ]
          },
          {
            "name": "notSame",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "binary",
                "type": "compiler::BinaryExpr binary"
              }
            ]
          },
          {
            "name": "cond",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::CondExpr expr"
              },
              {
                "name": "cond",
                "type": "compiler::Cond cond"
              }
            ]
          },
          {
            "name": "or",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::CondExpr expr"
              },
              {
                "name": "cond",
                "type": "compiler::Cond? cond"
              }
            ]
          },
          {
            "name": "and",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::CondExpr expr"
              },
              {
                "name": "cond",
                "type": "compiler::Cond? cond"
              }
            ]
          },
          {
            "name": "condEnd",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "cond",
                "type": "compiler::Cond cond"
              }
            ]
          },
          {
            "name": "isExpr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "tc",
                "type": "compiler::TypeCheckExpr tc"
              }
            ]
          },
          {
            "name": "isnotExpr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "tc",
                "type": "compiler::TypeCheckExpr tc"
              }
            ]
          },
          {
            "name": "asExpr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "tc",
                "type": "compiler::TypeCheckExpr tc"
              }
            ]
          },
          {
            "name": "coerce",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "tc",
                "type": "compiler::TypeCheckExpr tc"
              }
            ]
          },
          {
            "name": "coerceOp",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "from",
                "type": "compiler::CType from"
              },
              {
                "name": "to",
                "type": "compiler::CType to"
              }
            ]
          },
          {
            "name": "elvis",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "binary",
                "type": "compiler::BinaryExpr binary"
              }
            ]
          },
          {
            "name": "ternary",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ternary",
                "type": "compiler::TernaryExpr ternary"
              }
            ]
          },
          {
            "name": "closure",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::ClosureExpr c"
              }
            ]
          },
          {
            "name": "assign",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::BinaryExpr expr"
              }
            ]
          },
          {
            "name": "loadLocalVar",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "var",
                "type": "compiler::LocalVarExpr var"
              }
            ]
          },
          {
            "name": "storeLocalVar",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "var",
                "type": "compiler::LocalVarExpr var"
              }
            ]
          },
          {
            "name": "assignLocalVar",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "assign",
                "type": "compiler::BinaryExpr assign"
              }
            ]
          },
          {
            "name": "loadField",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "fexpr",
                "type": "compiler::FieldExpr fexpr"
              },
              {
                "name": "dupTarget",
                "type": "sys::Bool dupTarget"
              }
            ]
          },
          {
            "name": "assignField",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "assign",
                "type": "compiler::BinaryExpr assign"
              }
            ]
          },
          {
            "name": "storeField",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "fexpr",
                "type": "compiler::FieldExpr fexpr"
              }
            ]
          },
          {
            "name": "call",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              },
              {
                "name": "leave",
                "type": "sys::Bool leave"
              }
            ]
          },
          {
            "name": "dynamicCall",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "invokeCall",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              },
              {
                "name": "leave",
                "type": "sys::Bool leave"
              }
            ]
          },
          {
            "name": "shortcut",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::ShortcutExpr call"
              }
            ]
          },
          {
            "name": "compareOp",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "lhs",
                "type": "sys::Obj lhs"
              },
              {
                "name": "opCode",
                "type": "compiler::FOp opCode"
              },
              {
                "name": "rhs",
                "type": "compiler::Expr rhs"
              }
            ]
          },
          {
            "name": "shortcutAssign",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::ShortcutExpr c"
              }
            ]
          },
          {
            "name": "addStr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ShortcutExpr expr"
              },
              {
                "name": "topLevel",
                "type": "sys::Bool topLevel"
              }
            ]
          },
          {
            "name": "isEmptyStrLiteral",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "opType",
            "doc": "Append a opcode with a type argument.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "opcode",
                "type": "compiler::FOp opcode"
              },
              {
                "name": "arg",
                "type": "compiler::CType arg"
              }
            ]
          },
          {
            "name": "op",
            "doc": "Append a opcode with option two byte argument.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "op",
                "type": "compiler::FOp op"
              },
              {
                "name": "arg",
                "type": "sys::Int? arg"
              }
            ]
          },
          {
            "name": "mark",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "jump",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "op",
                "type": "compiler::FOp op"
              },
              {
                "name": "mark",
                "type": "sys::Int mark"
              }
            ]
          },
          {
            "name": "backpatch",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "pos",
                "type": "sys::Int pos"
              },
              {
                "name": "mark",
                "type": "sys::Int mark"
              }
            ]
          },
          {
            "name": "finishCode",
            "doc": "Finish writing out the exception handling table\n",
            "returns": "sys::Buf",
            "params": [

            ]
          },
          {
            "name": "finishErrTable",
            "doc": "Finish writing out the exception handling table\n",
            "returns": "sys::Buf",
            "params": [

            ]
          },
          {
            "name": "finishLines",
            "doc": "Finish writing out the line number table\n",
            "returns": "sys::Buf",
            "params": [

            ]
          },
          {
            "name": "line",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          null
        ],
        "name": "CodeAsm",
        "doc": "CodeAsm is used to assemble the fcode instructions of an Expr or Block.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::CodeAsm.loc"
          },
          {
            "name": "fpod",
            "doc": "",
            "type": "compiler::CodeAsm.fpod"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CodeAsm.curMethod"
          },
          {
            "name": "code",
            "doc": "",
            "type": "compiler::CodeAsm.code"
          },
          {
            "name": "errTable",
            "doc": "",
            "type": "compiler::CodeAsm.errTable"
          },
          {
            "name": "errCount",
            "doc": "",
            "type": "compiler::CodeAsm.errCount"
          },
          {
            "name": "lines",
            "doc": "",
            "type": "compiler::CodeAsm.lines"
          },
          {
            "name": "lineCount",
            "doc": "",
            "type": "compiler::CodeAsm.lineCount"
          },
          {
            "name": "lastLine",
            "doc": "",
            "type": "compiler::CodeAsm.lastLine"
          },
          {
            "name": "lastOffset",
            "doc": "",
            "type": "compiler::CodeAsm.lastOffset"
          },
          {
            "name": "loopStack",
            "doc": "",
            "type": "compiler::CodeAsm.loopStack"
          },
          {
            "name": "protectedRegions",
            "doc": "",
            "type": "compiler::CodeAsm.protectedRegions"
          },
          {
            "name": "leavesToReturn",
            "doc": "",
            "type": "compiler::CodeAsm.leavesToReturn"
          },
          {
            "name": "returnLocal",
            "doc": "",
            "type": "compiler::CodeAsm.returnLocal"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          null
        ],
        "name": "Loop",
        "doc": "Loop\n",
        "fields": [
          {
            "name": "stmt",
            "doc": "",
            "type": "compiler::Loop.stmt"
          },
          {
            "name": "breaks",
            "doc": "",
            "type": "compiler::Loop.breaks"
          },
          {
            "name": "continues",
            "doc": "",
            "type": "compiler::Loop.continues"
          },
          {
            "name": "protectedRegions",
            "doc": "",
            "type": "compiler::Loop.protectedRegions"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          }
        ],
        "name": "ProtectedRegion",
        "doc": "ProtectedRegion\n",
        "fields": [
          {
            "name": "hasFinally",
            "doc": "",
            "type": "compiler::ProtectedRegion.hasFinally"
          },
          {
            "name": "jumpFinallys",
            "doc": "",
            "type": "compiler::ProtectedRegion.jumpFinallys"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "Cond",
        "doc": "Cond\n",
        "fields": [
          {
            "name": "jumpTrues",
            "doc": "",
            "type": "compiler::Cond.jumpTrues"
          },
          {
            "name": "jumpFalses",
            "doc": "",
            "type": "compiler::Cond.jumpFalses"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "All Node's must have a valid location in a source file.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "Pretty print this node and it's descendants.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          }
        ],
        "name": "Node",
        "doc": "Node is the base class of all classes which represent a node\nin the abstract syntax tree generated by the parser.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "Associated namespace for this type representation\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "Fandoc API docs if available\n",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "Get the facet keyed by given type, or null if not defined.\n",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "CNode",
        "doc": "CNode represents a compile node as base type for CType and CSlot\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "Associated namespace for this type representation\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "Pretty print this node and it's descendants.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "walkFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "addFacet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "support",
                "type": "compiler::CompilerSupport support"
              },
              {
                "name": "type",
                "type": "compiler::CType type"
              },
              {
                "name": "vals",
                "type": "[sys::Str:sys::Obj]? vals"
              }
            ]
          },
          {
            "name": "printFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isDocumented",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null
        ],
        "name": "DefNode",
        "doc": "DefNode is the abstract base class for definition nodes such as TypeDef,\nMethodDef, and FieldDef.  All definitions may be documented using a\nJavadoc style FanDoc comment.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "doc": "",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "facets",
            "doc": "",
            "type": "compiler::DefNode.facets"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Constructor for raw string\n",
            "returns": "compiler::CDoc?",
            "params": [
              {
                "name": "s",
                "type": "sys::Str? s"
              }
            ]
          },
          {
            "name": "text",
            "doc": "Raw fandoc text string\n",
            "returns": "sys::Str",
            "params": [

            ]
          }
        ],
        "name": "CDoc",
        "doc": "CDoc models the fandoc for a definition node\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "text",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "lines",
                "type": "sys::Str[] lines"
              }
            ]
          }
        ],
        "name": "DocDef",
        "doc": "Type or slot documentation in plain text fandoc format\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "lines",
            "doc": "",
            "type": "compiler::DocDef.lines"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "isEmpty",
            "doc": "Return is there are no statements\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "size",
            "doc": "Return number of statements\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isExit",
            "doc": "Does this block always cause us to exit the method (does the\nlast statement return true for Stmt.isExit)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "Return if any of the statements perform definite assignment.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "add",
            "doc": "Append a statement\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "addAll",
            "doc": "Append a list of statements\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmts",
                "type": "compiler::Stmt[] stmts"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "closure",
                "type": "|compiler::Expr->compiler::Expr| closure"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "printOpt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              },
              {
                "name": "braces",
                "type": "sys::Bool braces"
              }
            ]
          }
        ],
        "name": "Block",
        "doc": "Block is a list of zero or more Stmts\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "stmts",
            "doc": "",
            "type": "compiler::Block.stmts"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null
        ],
        "name": "Expr",
        "doc": "Expr\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              },
              {
                "name": "val",
                "type": "sys::Obj? val"
              }
            ]
          },
          {
            "name": "makeNull",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              }
            ]
          },
          {
            "name": "makeTrue",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              }
            ]
          },
          {
            "name": "makeFalse",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              }
            ]
          },
          {
            "name": "makeStr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Str val"
              }
            ]
          },
          {
            "name": "makeDefaultLiteral",
            "doc": "",
            "returns": "compiler::LiteralExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              }
            ]
          }
        ],
        "name": "LiteralExpr",
        "doc": "LiteralExpr puts an Bool, Int, Float, Str, Duration, Uri,\nor null constant onto the stack.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "val",
            "doc": "",
            "type": "compiler::LiteralExpr.val"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "pattern",
                "type": "sys::Str pattern"
              }
            ]
          }
        ],
        "name": "LocaleLiteralExpr",
        "doc": "LocaleLiteralExpr: podName::key=defVal\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "pattern",
            "doc": "",
            "type": "compiler::LocaleLiteralExpr.pattern"
          },
          {
            "name": "key",
            "doc": "",
            "type": "compiler::LocaleLiteralExpr.key"
          },
          {
            "name": "podName",
            "doc": "",
            "type": "compiler::LocaleLiteralExpr.podName"
          },
          {
            "name": "def",
            "doc": "",
            "type": "compiler::LocaleLiteralExpr.def"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::CType parent"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          }
        ],
        "name": "SlotLiteralExpr",
        "doc": "SlotLiteralExpr\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::SlotLiteralExpr.parent"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::SlotLiteralExpr.name"
          },
          {
            "name": "slot",
            "doc": "",
            "type": "compiler::SlotLiteralExpr.slot"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              },
              {
                "name": "start",
                "type": "compiler::Expr start"
              },
              {
                "name": "end",
                "type": "compiler::Expr end"
              },
              {
                "name": "exclusive",
                "type": "sys::Bool exclusive"
              }
            ]
          }
        ],
        "name": "RangeLiteralExpr",
        "doc": "RangeLiteralExpr creates a Range instance\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "start",
            "doc": "",
            "type": "compiler::RangeLiteralExpr.start"
          },
          {
            "name": "end",
            "doc": "",
            "type": "compiler::RangeLiteralExpr.end"
          },
          {
            "name": "exclusive",
            "doc": "",
            "type": "compiler::RangeLiteralExpr.exclusive"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "explicitType",
                "type": "compiler::ListType? explicitType"
              }
            ]
          },
          {
            "name": "makeFor",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              },
              {
                "name": "vals",
                "type": "compiler::Expr[] vals"
              }
            ]
          },
          {
            "name": "format",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Str| f"
              }
            ]
          },
          null
        ],
        "name": "ListLiteralExpr",
        "doc": "ListLiteralExpr creates a List instance\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "explicitType",
            "doc": "",
            "type": "compiler::ListLiteralExpr.explicitType"
          },
          {
            "name": "vals",
            "doc": "",
            "type": "compiler::ListLiteralExpr.vals"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "explicitType",
                "type": "compiler::MapType? explicitType"
              }
            ]
          },
          {
            "name": "format",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Str| f"
              }
            ]
          },
          null
        ],
        "name": "MapLiteralExpr",
        "doc": "MapLiteralExpr creates a List instance\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "explicitType",
            "doc": "",
            "type": "compiler::MapLiteralExpr.explicitType"
          },
          {
            "name": "keys",
            "doc": "",
            "type": "compiler::MapLiteralExpr.keys"
          },
          {
            "name": "vals",
            "doc": "",
            "type": "compiler::MapLiteralExpr.vals"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              },
              {
                "name": "opToken",
                "type": "compiler::Token opToken"
              },
              {
                "name": "operand",
                "type": "compiler::Expr operand"
              }
            ]
          }
        ],
        "name": "UnaryExpr",
        "doc": "UnaryExpr is used for unary expressions including !, +.\nNote that - is mapped to negate() as a shortcut method.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "opToken",
            "doc": "",
            "type": "compiler::UnaryExpr.opToken"
          },
          {
            "name": "operand",
            "doc": "",
            "type": "compiler::UnaryExpr.operand"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "lhs",
                "type": "compiler::Expr lhs"
              },
              {
                "name": "opToken",
                "type": "compiler::Token opToken"
              },
              {
                "name": "rhs",
                "type": "compiler::Expr rhs"
              }
            ]
          },
          {
            "name": "makeAssign",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "lhs",
                "type": "compiler::Expr lhs"
              },
              {
                "name": "rhs",
                "type": "compiler::Expr rhs"
              },
              {
                "name": "leave",
                "type": "sys::Bool leave"
              }
            ]
          }
        ],
        "name": "BinaryExpr",
        "doc": "BinaryExpr is used for binary expressions with a left hand side and a\nright hand side including assignment.  Note that many common binary\noperations are actually modeled as ShortcutExpr to enable method based\noperator overloading.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "opToken",
            "doc": "",
            "type": "compiler::BinaryExpr.opToken"
          },
          {
            "name": "lhs",
            "doc": "",
            "type": "compiler::BinaryExpr.lhs"
          },
          {
            "name": "rhs",
            "doc": "",
            "type": "compiler::BinaryExpr.rhs"
          },
          {
            "name": "tempVar",
            "doc": "",
            "type": "compiler::BinaryExpr.tempVar"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "first",
                "type": "compiler::Expr first"
              },
              {
                "name": "opToken",
                "type": "compiler::Token opToken"
              }
            ]
          }
        ],
        "name": "CondExpr",
        "doc": "CondExpr is used for || and && short-circuit boolean conditionals.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "opToken",
            "doc": "",
            "type": "compiler::CondExpr.opToken"
          },
          {
            "name": "operands",
            "doc": "",
            "type": "compiler::CondExpr.operands"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              },
              {
                "name": "target",
                "type": "compiler::Expr? target"
              },
              {
                "name": "name",
                "type": "sys::Str? name"
              }
            ]
          }
        ],
        "name": "NameExpr",
        "doc": "NameExpr is the base class for an identifier expression which has\nan optional base expression.  NameExpr is the base class for\nUnknownVarExpr and CallExpr which are resolved via CallResolver\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "doc": "",
            "type": "compiler::NameExpr.isSafe"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "target",
                "type": "compiler::Expr? target"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              }
            ]
          }
        ],
        "name": "UnknownVarExpr",
        "doc": "UnknownVarExpr is a place holder in the AST for a variable until\nwe can figure out what it references: local or slot.  We also use\nthis class for storage operators before they are resolved to a field.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "doc": "",
            "type": "compiler::NameExpr.isSafe"
          }
        ],
        "facets": [

        ],
        "base": "compiler::NameExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "target",
                "type": "compiler::Expr? target"
              },
              {
                "name": "name",
                "type": "sys::Str? name"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              }
            ]
          },
          {
            "name": "makeWithMethod",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "target",
                "type": "compiler::Expr? target"
              },
              {
                "name": "method",
                "type": "compiler::CMethod method"
              },
              {
                "name": "args",
                "type": "compiler::Expr[]? args"
              }
            ]
          },
          {
            "name": "isCompare",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toCallStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "isToStr",
                "type": "sys::Bool isToStr"
              }
            ]
          },
          null
        ],
        "name": "CallExpr",
        "doc": "CallExpr is a method call.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "doc": "",
            "type": "compiler::CallExpr.synthetic"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "doc": "",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "args",
            "doc": "",
            "type": "compiler::CallExpr.args"
          },
          {
            "name": "isDynamic",
            "doc": "",
            "type": "compiler::CallExpr.isDynamic"
          },
          {
            "name": "isCtorChain",
            "doc": "",
            "type": "compiler::CallExpr.isCtorChain"
          },
          {
            "name": "noParens",
            "doc": "",
            "type": "compiler::CallExpr.noParens"
          },
          {
            "name": "isCallOp",
            "doc": "",
            "type": "compiler::CallExpr.isCallOp"
          },
          {
            "name": "isItAdd",
            "doc": "",
            "type": "compiler::CallExpr.isItAdd"
          },
          {
            "name": "method",
            "doc": "",
            "type": "compiler::CallExpr.method"
          }
        ],
        "facets": [

        ],
        "base": "compiler::NameExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "isCompare",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toCallStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "isToStr",
                "type": "sys::Bool isToStr"
              }
            ]
          },
          null,
          {
            "name": "makeUnary",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "opToken",
                "type": "compiler::Token opToken"
              },
              {
                "name": "operand",
                "type": "compiler::Expr operand"
              }
            ]
          },
          {
            "name": "makeBinary",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "lhs",
                "type": "compiler::Expr lhs"
              },
              {
                "name": "opToken",
                "type": "compiler::Token opToken"
              },
              {
                "name": "rhs",
                "type": "compiler::Expr rhs"
              }
            ]
          },
          {
            "name": "makeGet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "target",
                "type": "compiler::Expr target"
              },
              {
                "name": "index",
                "type": "compiler::Expr index"
              }
            ]
          },
          {
            "name": "makeFrom",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "from",
                "type": "compiler::ShortcutExpr from"
              }
            ]
          },
          {
            "name": "isAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStrConcat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null
        ],
        "name": "ShortcutExpr",
        "doc": "ShortcutExpr is used for operator expressions which are a shortcut\nto a method call:\n  a + b     =>  a.plus(b)\n  a - b     =>  a.minus(b)\n  a * b     =>  a.mult(b)\n  a / b     =>  a.div(b)\n  a % b     =>  a.mod(b)\n  a[b]      =>  a.get(b)\n  a[b] = c  =>  a.set(b, c)\n  -a        =>  a.negate()\n  ++a, a++  =>  a.increment()\n  --a, a--  =>  a.decrement()\n  a == b    =>  a.equals(b)\n  a != b    =>  ! a.equals(b)\n  a <=>     =>  a.compare(b)\n  a > b     =>  a.compare(b) > 0\n  a >= b    =>  a.compare(b) >= 0\n  a < b     =>  a.compare(b) < 0\n  a <= b    =>  a.compare(b) <= 0\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "doc": "",
            "type": "compiler::CallExpr.synthetic"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "doc": "",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "args",
            "doc": "",
            "type": "compiler::CallExpr.args"
          },
          {
            "name": "isDynamic",
            "doc": "",
            "type": "compiler::CallExpr.isDynamic"
          },
          {
            "name": "isCtorChain",
            "doc": "",
            "type": "compiler::CallExpr.isCtorChain"
          },
          {
            "name": "noParens",
            "doc": "",
            "type": "compiler::CallExpr.noParens"
          },
          {
            "name": "isCallOp",
            "doc": "",
            "type": "compiler::CallExpr.isCallOp"
          },
          {
            "name": "isItAdd",
            "doc": "",
            "type": "compiler::CallExpr.isItAdd"
          },
          {
            "name": "method",
            "doc": "",
            "type": "compiler::CallExpr.method"
          },
          {
            "name": "op",
            "doc": "",
            "type": "compiler::ShortcutExpr.op"
          },
          {
            "name": "opToken",
            "doc": "",
            "type": "compiler::ShortcutExpr.opToken"
          },
          {
            "name": "isPostfixLeave",
            "doc": "",
            "type": "compiler::ShortcutExpr.isPostfixLeave"
          },
          {
            "name": "tempVar",
            "doc": "",
            "type": "compiler::ShortcutExpr.tempVar"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CallExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "isCompare",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toCallStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "isToStr",
                "type": "sys::Bool isToStr"
              }
            ]
          },
          null,
          {
            "name": "isAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStrConcat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null,
          {
            "name": "makeFrom",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "from",
                "type": "compiler::ShortcutExpr from"
              }
            ]
          }
        ],
        "name": "IndexedAssignExpr",
        "doc": "IndexedAssignExpr is a subclass of ShortcutExpr used\nin situations like x[y] += z where we need keep of two\nextra scratch variables and the get's matching set method.\nNote this class models the top x[y] += z, NOT the get target\nwhich is x[y].\n\nIn this example, IndexedAssignExpr shortcuts Int.plus and\nits target shortcuts List.get:\n  x := [2]\n  x[0] += 3\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "doc": "",
            "type": "compiler::CallExpr.synthetic"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "doc": "",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "args",
            "doc": "",
            "type": "compiler::CallExpr.args"
          },
          {
            "name": "isDynamic",
            "doc": "",
            "type": "compiler::CallExpr.isDynamic"
          },
          {
            "name": "isCtorChain",
            "doc": "",
            "type": "compiler::CallExpr.isCtorChain"
          },
          {
            "name": "noParens",
            "doc": "",
            "type": "compiler::CallExpr.noParens"
          },
          {
            "name": "isCallOp",
            "doc": "",
            "type": "compiler::CallExpr.isCallOp"
          },
          {
            "name": "isItAdd",
            "doc": "",
            "type": "compiler::CallExpr.isItAdd"
          },
          {
            "name": "method",
            "doc": "",
            "type": "compiler::CallExpr.method"
          },
          {
            "name": "op",
            "doc": "",
            "type": "compiler::ShortcutExpr.op"
          },
          {
            "name": "opToken",
            "doc": "",
            "type": "compiler::ShortcutExpr.opToken"
          },
          {
            "name": "isPostfixLeave",
            "doc": "",
            "type": "compiler::ShortcutExpr.isPostfixLeave"
          },
          {
            "name": "tempVar",
            "doc": "",
            "type": "compiler::ShortcutExpr.tempVar"
          },
          {
            "name": "scratchA",
            "doc": "",
            "type": "compiler::IndexedAssignExpr.scratchA"
          },
          {
            "name": "scratchB",
            "doc": "",
            "type": "compiler::IndexedAssignExpr.scratchB"
          },
          {
            "name": "setMethod",
            "doc": "",
            "type": "compiler::IndexedAssignExpr.setMethod"
          }
        ],
        "facets": [

        ],
        "base": "compiler::ShortcutExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "target",
                "type": "compiler::Expr? target"
              },
              {
                "name": "field",
                "type": "compiler::CField? field"
              },
              {
                "name": "useAccessor",
                "type": "sys::Bool useAccessor"
              }
            ]
          }
        ],
        "name": "FieldExpr",
        "doc": "FieldExpr is used for a field variable access.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "doc": "",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "field",
            "doc": "",
            "type": "compiler::FieldExpr.field"
          },
          {
            "name": "useAccessor",
            "doc": "",
            "type": "compiler::FieldExpr.useAccessor"
          }
        ],
        "facets": [

        ],
        "base": "compiler::NameExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "var",
                "type": "compiler::MethodVar? var"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              }
            ]
          },
          {
            "name": "makeNoUnwrap",
            "doc": "",
            "returns": "compiler::LocalVarExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "var",
                "type": "compiler::MethodVar var"
              }
            ]
          },
          {
            "name": "register",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          null
        ],
        "name": "LocalVarExpr",
        "doc": "LocalVarExpr is used to access a local variable stored in a register.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "doc": "",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "doc": "",
            "type": "compiler::LocalVarExpr.unwrap"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "makeNoUnwrap",
            "doc": "",
            "returns": "compiler::LocalVarExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "var",
                "type": "compiler::MethodVar var"
              }
            ]
          },
          {
            "name": "register",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType? ctype"
              }
            ]
          }
        ],
        "name": "ThisExpr",
        "doc": "ThisExpr models the \"this\" keyword to access the implicit this\nlocal variable always stored in register zero.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "doc": "",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "doc": "",
            "type": "compiler::LocalVarExpr.unwrap"
          }
        ],
        "facets": [

        ],
        "base": "compiler::LocalVarExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "makeNoUnwrap",
            "doc": "",
            "returns": "compiler::LocalVarExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "var",
                "type": "compiler::MethodVar var"
              }
            ]
          },
          {
            "name": "register",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "explicitType",
                "type": "compiler::CType? explicitType"
              }
            ]
          }
        ],
        "name": "SuperExpr",
        "doc": "SuperExpr is used to access super class slots.  It always references\nthe implicit this local variable stored in register zero, but the\nsuper class's slot definitions.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "doc": "",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "doc": "",
            "type": "compiler::LocalVarExpr.unwrap"
          },
          {
            "name": "explicitType",
            "doc": "",
            "type": "compiler::SuperExpr.explicitType"
          }
        ],
        "facets": [

        ],
        "base": "compiler::LocalVarExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "makeNoUnwrap",
            "doc": "",
            "returns": "compiler::LocalVarExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "var",
                "type": "compiler::MethodVar var"
              }
            ]
          },
          {
            "name": "register",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType? ctype"
              }
            ]
          }
        ],
        "name": "ItExpr",
        "doc": "ItExpr models the \"it\" keyword to access the implicit\ntarget of an it-block.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "doc": "",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "doc": "",
            "type": "compiler::LocalVarExpr.unwrap"
          }
        ],
        "facets": [

        ],
        "base": "compiler::LocalVarExpr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              }
            ]
          }
        ],
        "name": "StaticTargetExpr",
        "doc": "StaticTargetExpr wraps a type reference as an Expr for use as\na target in a static field access or method call\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "id",
                "type": "compiler::ExprId id"
              },
              {
                "name": "target",
                "type": "compiler::Expr target"
              },
              {
                "name": "check",
                "type": "compiler::CType check"
              }
            ]
          },
          {
            "name": "coerce",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr target"
              },
              {
                "name": "to",
                "type": "compiler::CType to"
              }
            ]
          },
          {
            "name": "opStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          null
        ],
        "name": "TypeCheckExpr",
        "doc": "TypeCheckExpr is an expression which is composed of an arbitrary\nexpression and a type - is, as, coerce\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "doc": "",
            "type": "compiler::TypeCheckExpr.synthetic"
          },
          {
            "name": "from",
            "doc": "From type if coerce\n",
            "type": "compiler::TypeCheckExpr.from"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::TypeCheckExpr.target"
          },
          {
            "name": "check",
            "doc": "",
            "type": "compiler::TypeCheckExpr.check"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "condition",
                "type": "compiler::Expr condition"
              },
              {
                "name": "trueExpr",
                "type": "compiler::Expr trueExpr"
              },
              {
                "name": "falseExpr",
                "type": "compiler::Expr falseExpr"
              }
            ]
          }
        ],
        "name": "TernaryExpr",
        "doc": "TernaryExpr is used for the ternary expression <cond> ? <true> : <false>\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "condition",
            "doc": "",
            "type": "compiler::TernaryExpr.condition"
          },
          {
            "name": "trueExpr",
            "doc": "",
            "type": "compiler::TernaryExpr.trueExpr"
          },
          {
            "name": "falseExpr",
            "doc": "",
            "type": "compiler::TernaryExpr.falseExpr"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              }
            ]
          },
          {
            "name": "doToStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Str| f"
              }
            ]
          }
        ],
        "name": "ComplexLiteral",
        "doc": "ComplexLiteral is used to model a serialized complex object\ndeclared in facets.  It is only used in facets, in all other\ncode complex literals are parsed as it-block ClosureExprs.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "names",
            "doc": "",
            "type": "compiler::ComplexLiteral.names"
          },
          {
            "name": "vals",
            "doc": "",
            "type": "compiler::ComplexLiteral.vals"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "enclosingType",
                "type": "compiler::TypeDef enclosingType"
              },
              {
                "name": "enclosingSlot",
                "type": "compiler::SlotDef enclosingSlot"
              },
              {
                "name": "enclosingClosure",
                "type": "compiler::ClosureExpr? enclosingClosure"
              },
              {
                "name": "signature",
                "type": "compiler::FuncType signature"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "outerThisField",
            "doc": "",
            "returns": "compiler::CField",
            "params": [

            ]
          },
          {
            "name": "toWith",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr target"
              }
            ]
          },
          {
            "name": "setInferredSignature",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::FuncType t"
              }
            ]
          },
          {
            "name": "collapseExprAndReturn",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          null,
          null
        ],
        "name": "ClosureExpr",
        "doc": "ClosureExpr is an \"inlined anonymous method\" which closes over it's\nlexical scope.  ClosureExpr is placed into the AST by the parser\nwith the code field containing the method implementation.  In\nInitClosures we remap a ClosureExpr to an anonymous class TypeDef\nwhich extends Func.  The function implementation is moved to the\nanonymous class's doCall() method.  However we leave ClosureExpr\nin the AST in it's original location with a substitute expression.\nThe substitute expr just creates an instance of the anonymous class.\nBut by leaving the ClosureExpr in the tree, we can keep track of\nthe original lexical scope of the closure.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "enclosingType",
            "doc": "",
            "type": "compiler::ClosureExpr.enclosingType"
          },
          {
            "name": "enclosingSlot",
            "doc": "",
            "type": "compiler::ClosureExpr.enclosingSlot"
          },
          {
            "name": "enclosingClosure",
            "doc": "",
            "type": "compiler::ClosureExpr.enclosingClosure"
          },
          {
            "name": "signature",
            "doc": "",
            "type": "compiler::ClosureExpr.signature"
          },
          {
            "name": "code",
            "doc": "",
            "type": "compiler::ClosureExpr.code"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::ClosureExpr.name"
          },
          {
            "name": "isItBlock",
            "doc": "",
            "type": "compiler::ClosureExpr.isItBlock"
          },
          {
            "name": "substitute",
            "doc": "",
            "type": "compiler::ClosureExpr.substitute"
          },
          {
            "name": "cls",
            "doc": "",
            "type": "compiler::ClosureExpr.cls"
          },
          {
            "name": "call",
            "doc": "",
            "type": "compiler::ClosureExpr.call"
          },
          {
            "name": "doCall",
            "doc": "",
            "type": "compiler::ClosureExpr.doCall"
          },
          {
            "name": "enclosingVars",
            "doc": "",
            "type": "compiler::ClosureExpr.enclosingVars"
          },
          {
            "name": "setsConst",
            "doc": "",
            "type": "compiler::ClosureExpr.setsConst"
          },
          {
            "name": "itType",
            "doc": "",
            "type": "compiler::ClosureExpr.itType"
          },
          {
            "name": "outerThisField$Store",
            "doc": "",
            "type": "compiler::ClosureExpr.outerThisField$Store"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "anchorType",
                "type": "compiler::CType anchorType"
              },
              {
                "name": "srcLoc",
                "type": "compiler::Loc srcLoc"
              },
              {
                "name": "src",
                "type": "sys::Str src"
              }
            ]
          }
        ],
        "name": "DslExpr",
        "doc": "DslExpr is an embedded Domain Specific Language which\nis parsed by a DslPlugin.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "anchorType",
            "doc": "",
            "type": "compiler::DslExpr.anchorType"
          },
          {
            "name": "src",
            "doc": "",
            "type": "compiler::DslExpr.src"
          },
          {
            "name": "srcLoc",
            "doc": "",
            "type": "compiler::DslExpr.srcLoc"
          },
          {
            "name": "leadingTabs",
            "doc": "",
            "type": "compiler::DslExpr.leadingTabs"
          },
          {
            "name": "leadingSpaces",
            "doc": "",
            "type": "compiler::DslExpr.leadingSpaces"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "asTableSwitchCase",
            "doc": "Return this expression as an Int literal usable in a tableswitch,\nor null if this Expr doesn't represent a constant Int.  Expressions\nwhich work as table switch cases: int literals and enum constants\n",
            "returns": "sys::Int?",
            "params": [

            ]
          },
          {
            "name": "toTypeStr",
            "doc": "Get this expression's type as a string for error reporting.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "assignTarget",
            "doc": "If this expression performs assignment, then return\nthe target of that assignment.  Otherwise return null.\n",
            "returns": "sys::Obj?",
            "params": [

            ]
          },
          {
            "name": "isAssignable",
            "doc": "Return if this expression can be used as the\nleft hand side of an assignment expression.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCond",
            "doc": "Is this a boolean conditional (boolOr/boolAnd)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStmt",
            "doc": "Does this expression make up a complete statement.\nIf you override this to true, then you must make sure\nthe expr is popped in CodeAsm.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "synthetic",
            "doc": "Was this expression generated by the compiler (not necessarily\neverything auto-generated has this flag true, but we set in\ncases where error checking needs to be handled special)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "If this an assignment expression, then return the\nresult of calling the given function with the LHS.\nOtherwise return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "isAlwaysNullable",
            "doc": "Return if this expression is guaranteed to sometimes\nreturn a null result (safe invoke, as, etc)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "assignRequiresTempVar",
            "doc": "Assignments to instance fields require a temporary local variable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "sameVarAs",
            "doc": "Return if this expression represents the same variable or\nfield as that.  This is used for self assignment checks.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::Expr that"
              }
            ]
          },
          {
            "name": "ctypes",
            "doc": "Map the list of expressions into their list of types\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "commonType",
            "doc": "Given a list of Expr instances, find the common base type\nthey all share.  This method does not take into account\nthe null literal.  It is used for type inference for lists\nand maps.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr[] exprs"
              }
            ]
          },
          {
            "name": "toStmt",
            "doc": "Return this expression as an ExprStmt\n",
            "returns": "compiler::ExprStmt",
            "params": [

            ]
          },
          {
            "name": "serialize",
            "doc": "Return this expression as serialization text or\nthrow exception if not serializable.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "makeForLiteral",
            "doc": "Make an Expr which will serialize the given literal.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "noLeave",
            "doc": "Set this expression to not be left on the stack.\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "toDocStr",
            "doc": "Get this expression as a string suitable for documentation.\nThis string must not contain a newline or it will break the\nDocApiParser.\n",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "walkExprs",
            "doc": "",
            "returns": "compiler::Expr[]",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "exprs",
                "type": "compiler::Expr?[] exprs"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "exception",
                "type": "compiler::Expr exception"
              }
            ]
          }
        ],
        "name": "ThrowExpr",
        "doc": "ThrowExpr models throw as an expr versus a statement\nfor use inside ternary/elvis operations.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "doc": "",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "exception",
            "doc": "",
            "type": "compiler::ThrowExpr.exception"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Expr"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the ExprId instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::ExprId?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "ExprId",
        "doc": "ExprId uniquely identifies the type of expr\n",
        "fields": [
          {
            "name": "nullLiteral",
            "doc": "",
            "type": "compiler::ExprId.nullLiteral"
          },
          {
            "name": "trueLiteral",
            "doc": "",
            "type": "compiler::ExprId.trueLiteral"
          },
          {
            "name": "falseLiteral",
            "doc": "",
            "type": "compiler::ExprId.falseLiteral"
          },
          {
            "name": "intLiteral",
            "doc": "",
            "type": "compiler::ExprId.intLiteral"
          },
          {
            "name": "floatLiteral",
            "doc": "",
            "type": "compiler::ExprId.floatLiteral"
          },
          {
            "name": "decimalLiteral",
            "doc": "",
            "type": "compiler::ExprId.decimalLiteral"
          },
          {
            "name": "strLiteral",
            "doc": "",
            "type": "compiler::ExprId.strLiteral"
          },
          {
            "name": "durationLiteral",
            "doc": "",
            "type": "compiler::ExprId.durationLiteral"
          },
          {
            "name": "uriLiteral",
            "doc": "",
            "type": "compiler::ExprId.uriLiteral"
          },
          {
            "name": "typeLiteral",
            "doc": "",
            "type": "compiler::ExprId.typeLiteral"
          },
          {
            "name": "localeLiteral",
            "doc": "",
            "type": "compiler::ExprId.localeLiteral"
          },
          {
            "name": "slotLiteral",
            "doc": "",
            "type": "compiler::ExprId.slotLiteral"
          },
          {
            "name": "rangeLiteral",
            "doc": "",
            "type": "compiler::ExprId.rangeLiteral"
          },
          {
            "name": "listLiteral",
            "doc": "",
            "type": "compiler::ExprId.listLiteral"
          },
          {
            "name": "mapLiteral",
            "doc": "",
            "type": "compiler::ExprId.mapLiteral"
          },
          {
            "name": "boolNot",
            "doc": "",
            "type": "compiler::ExprId.boolNot"
          },
          {
            "name": "cmpNull",
            "doc": "",
            "type": "compiler::ExprId.cmpNull"
          },
          {
            "name": "cmpNotNull",
            "doc": "",
            "type": "compiler::ExprId.cmpNotNull"
          },
          {
            "name": "elvis",
            "doc": "",
            "type": "compiler::ExprId.elvis"
          },
          {
            "name": "assign",
            "doc": "",
            "type": "compiler::ExprId.assign"
          },
          {
            "name": "same",
            "doc": "",
            "type": "compiler::ExprId.same"
          },
          {
            "name": "notSame",
            "doc": "",
            "type": "compiler::ExprId.notSame"
          },
          {
            "name": "boolOr",
            "doc": "",
            "type": "compiler::ExprId.boolOr"
          },
          {
            "name": "boolAnd",
            "doc": "",
            "type": "compiler::ExprId.boolAnd"
          },
          {
            "name": "isExpr",
            "doc": "",
            "type": "compiler::ExprId.isExpr"
          },
          {
            "name": "isnotExpr",
            "doc": "",
            "type": "compiler::ExprId.isnotExpr"
          },
          {
            "name": "asExpr",
            "doc": "",
            "type": "compiler::ExprId.asExpr"
          },
          {
            "name": "coerce",
            "doc": "",
            "type": "compiler::ExprId.coerce"
          },
          {
            "name": "call",
            "doc": "",
            "type": "compiler::ExprId.call"
          },
          {
            "name": "construction",
            "doc": "",
            "type": "compiler::ExprId.construction"
          },
          {
            "name": "shortcut",
            "doc": "",
            "type": "compiler::ExprId.shortcut"
          },
          {
            "name": "field",
            "doc": "",
            "type": "compiler::ExprId.field"
          },
          {
            "name": "localVar",
            "doc": "",
            "type": "compiler::ExprId.localVar"
          },
          {
            "name": "thisExpr",
            "doc": "",
            "type": "compiler::ExprId.thisExpr"
          },
          {
            "name": "superExpr",
            "doc": "",
            "type": "compiler::ExprId.superExpr"
          },
          {
            "name": "itExpr",
            "doc": "",
            "type": "compiler::ExprId.itExpr"
          },
          {
            "name": "staticTarget",
            "doc": "",
            "type": "compiler::ExprId.staticTarget"
          },
          {
            "name": "unknownVar",
            "doc": "",
            "type": "compiler::ExprId.unknownVar"
          },
          {
            "name": "storage",
            "doc": "",
            "type": "compiler::ExprId.storage"
          },
          {
            "name": "ternary",
            "doc": "",
            "type": "compiler::ExprId.ternary"
          },
          {
            "name": "complexLiteral",
            "doc": "",
            "type": "compiler::ExprId.complexLiteral"
          },
          {
            "name": "closure",
            "doc": "",
            "type": "compiler::ExprId.closure"
          },
          {
            "name": "dsl",
            "doc": "",
            "type": "compiler::ExprId.dsl"
          },
          {
            "name": "throwExpr",
            "doc": "",
            "type": "compiler::ExprId.throwExpr"
          },
          {
            "name": "vals",
            "doc": "List of ExprId values indexed by ordinal\n",
            "type": "compiler::ExprId.vals"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              },
              {
                "name": "degree",
                "type": "sys::Int degree"
              },
              {
                "name": "symbol",
                "type": "sys::Str symbol"
              },
              {
                "name": "methodName",
                "type": "sys::Str? methodName"
              }
            ]
          },
          {
            "name": "fromPrefix",
            "doc": "",
            "returns": "compiler::ShortcutOp?",
            "params": [
              {
                "name": "prefix",
                "type": "sys::Str prefix"
              }
            ]
          },
          {
            "name": "formatErr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "lhs",
                "type": "compiler::CType lhs"
              },
              {
                "name": "rhs",
                "type": "compiler::CType rhs"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the ShortcutOp instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::ShortcutOp?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "ShortcutOp",
        "doc": "ShortcutOp is a sub-id for ExprId.shortcut which identifies the\nan shortuct operation and it's method call\n",
        "fields": [
          {
            "name": "plus",
            "doc": "",
            "type": "compiler::ShortcutOp.plus"
          },
          {
            "name": "minus",
            "doc": "",
            "type": "compiler::ShortcutOp.minus"
          },
          {
            "name": "mult",
            "doc": "",
            "type": "compiler::ShortcutOp.mult"
          },
          {
            "name": "div",
            "doc": "",
            "type": "compiler::ShortcutOp.div"
          },
          {
            "name": "mod",
            "doc": "",
            "type": "compiler::ShortcutOp.mod"
          },
          {
            "name": "negate",
            "doc": "",
            "type": "compiler::ShortcutOp.negate"
          },
          {
            "name": "increment",
            "doc": "",
            "type": "compiler::ShortcutOp.increment"
          },
          {
            "name": "decrement",
            "doc": "",
            "type": "compiler::ShortcutOp.decrement"
          },
          {
            "name": "eq",
            "doc": "",
            "type": "compiler::ShortcutOp.eq"
          },
          {
            "name": "cmp",
            "doc": "",
            "type": "compiler::ShortcutOp.cmp"
          },
          {
            "name": "get",
            "doc": "",
            "type": "compiler::ShortcutOp.get"
          },
          {
            "name": "set",
            "doc": "",
            "type": "compiler::ShortcutOp.set"
          },
          {
            "name": "add",
            "doc": "",
            "type": "compiler::ShortcutOp.add"
          },
          {
            "name": "vals",
            "doc": "List of ShortcutOp values indexed by ordinal\n",
            "type": "compiler::ShortcutOp.vals"
          },
          {
            "name": "prefixes",
            "doc": "",
            "type": "compiler::ShortcutOp.prefixes"
          },
          {
            "name": "degree",
            "doc": "",
            "type": "compiler::ShortcutOp.degree"
          },
          {
            "name": "methodName",
            "doc": "",
            "type": "compiler::ShortcutOp.methodName"
          },
          {
            "name": "isOperator",
            "doc": "",
            "type": "compiler::ShortcutOp.isOperator"
          },
          {
            "name": "symbol",
            "doc": "",
            "type": "compiler::ShortcutOp.symbol"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "pod",
                "type": "compiler::CPod pod"
              }
            ]
          }
        ],
        "name": "CompilationUnit",
        "doc": "CompilationUnit models the top level compilation unit of a source file.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::CompilationUnit.pod"
          },
          {
            "name": "tokens",
            "doc": "",
            "type": "compiler::CompilationUnit.tokens"
          },
          {
            "name": "usings",
            "doc": "",
            "type": "compiler::CompilationUnit.usings"
          },
          {
            "name": "types",
            "doc": "",
            "type": "compiler::CompilationUnit.types"
          },
          {
            "name": "importedTypes",
            "doc": "",
            "type": "compiler::CompilationUnit.importedTypes"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "qname",
            "doc": "Qualified name of facet type\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "get",
            "doc": "Get the value of the given facet field or null if undefined.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          }
        ],
        "name": "CFacet",
        "doc": "CFacet models a facet definition in a CType or CSlot\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "get",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "type",
                "type": "compiler::CType type"
              }
            ]
          },
          {
            "name": "serialize",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              }
            ]
          },
          null
        ],
        "name": "FacetDef",
        "doc": "FacetDef models a facet declaration.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "type",
            "doc": "",
            "type": "compiler::FacetDef.type"
          },
          {
            "name": "names",
            "doc": "",
            "type": "compiler::FacetDef.names"
          },
          {
            "name": "vals",
            "doc": "",
            "type": "compiler::FacetDef.vals"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "Pretty print this node and it's descendants.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "id",
                "type": "compiler::StmtId id"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "Does this statement always cause us to exit the method (or does it\ncause us to loop forever without a break to the next statement)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "Check for definite assignment where the given function\nreturns true for the LHS of an assignment in all code paths.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          }
        ],
        "name": "Stmt",
        "doc": "Stmt\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          }
        ],
        "name": "NopStmt",
        "doc": "NopStmt is no operation do nothing statement.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "printOpt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              },
              {
                "name": "nl",
                "type": "sys::Bool nl"
              }
            ]
          }
        ],
        "name": "ExprStmt",
        "doc": "ExprStmt is a statement with a stand along expression such\nas an assignment or method call.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "expr",
            "doc": "",
            "type": "compiler::ExprStmt.expr"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType? ctype"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "makeCatchVar",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Catch c"
              }
            ]
          },
          {
            "name": "printOpt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              },
              {
                "name": "nl",
                "type": "sys::Bool nl"
              }
            ]
          }
        ],
        "name": "LocalDefStmt",
        "doc": "LocalDefStmt models a local variable declaration and its\noptional initialization expression.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::LocalDefStmt.ctype"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::LocalDefStmt.name"
          },
          {
            "name": "init",
            "doc": "",
            "type": "compiler::LocalDefStmt.init"
          },
          {
            "name": "isCatchVar",
            "doc": "",
            "type": "compiler::LocalDefStmt.isCatchVar"
          },
          {
            "name": "var",
            "doc": "",
            "type": "compiler::LocalDefStmt.var"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "condition",
                "type": "compiler::Expr condition"
              },
              {
                "name": "trueBlock",
                "type": "compiler::Block trueBlock"
              }
            ]
          }
        ],
        "name": "IfStmt",
        "doc": "IfStmt models an if or if/else statement.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "condition",
            "doc": "",
            "type": "compiler::IfStmt.condition"
          },
          {
            "name": "trueBlock",
            "doc": "",
            "type": "compiler::IfStmt.trueBlock"
          },
          {
            "name": "falseBlock",
            "doc": "",
            "type": "compiler::IfStmt.falseBlock"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "makeSynthetic",
            "doc": "",
            "returns": "compiler::ReturnStmt",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          }
        ],
        "name": "ReturnStmt",
        "doc": "ReturnStmt returns from the method\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "expr",
            "doc": "",
            "type": "compiler::ReturnStmt.expr"
          },
          {
            "name": "leaveVar",
            "doc": "",
            "type": "compiler::ReturnStmt.leaveVar"
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "type": "compiler::ReturnStmt.isSynthetic"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "exception",
                "type": "compiler::Expr exception"
              }
            ]
          }
        ],
        "name": "ThrowStmt",
        "doc": "ThrowStmt throws an exception\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "exception",
            "doc": "",
            "type": "compiler::ThrowStmt.exception"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          }
        ],
        "name": "ForStmt",
        "doc": "ForStmt models a for loop of the format:\n  for (init; condition; update) block\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "init",
            "doc": "",
            "type": "compiler::ForStmt.init"
          },
          {
            "name": "condition",
            "doc": "",
            "type": "compiler::ForStmt.condition"
          },
          {
            "name": "update",
            "doc": "",
            "type": "compiler::ForStmt.update"
          },
          {
            "name": "block",
            "doc": "",
            "type": "compiler::ForStmt.block"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "condition",
                "type": "compiler::Expr condition"
              },
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          }
        ],
        "name": "WhileStmt",
        "doc": "WhileStmt models a while loop of the format:\n  while (condition) block\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "condition",
            "doc": "",
            "type": "compiler::WhileStmt.condition"
          },
          {
            "name": "block",
            "doc": "",
            "type": "compiler::WhileStmt.block"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          }
        ],
        "name": "BreakStmt",
        "doc": "BreakStmt breaks out of a while/for loop.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "loop",
            "doc": "",
            "type": "compiler::BreakStmt.loop"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          }
        ],
        "name": "ContinueStmt",
        "doc": "ContinueStmt continues a while/for loop.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "loop",
            "doc": "",
            "type": "compiler::ContinueStmt.loop"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          }
        ],
        "name": "TryStmt",
        "doc": "TryStmt models a try/catch/finally block\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "exception",
            "doc": "",
            "type": "compiler::TryStmt.exception"
          },
          {
            "name": "block",
            "doc": "",
            "type": "compiler::TryStmt.block"
          },
          {
            "name": "catches",
            "doc": "",
            "type": "compiler::TryStmt.catches"
          },
          {
            "name": "finallyBlock",
            "doc": "",
            "type": "compiler::TryStmt.finallyBlock"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          }
        ],
        "name": "Catch",
        "doc": "Catch models a single catch clause of a TryStmt\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "errType",
            "doc": "",
            "type": "compiler::Catch.errType"
          },
          {
            "name": "errVariable",
            "doc": "",
            "type": "compiler::Catch.errVariable"
          },
          {
            "name": "block",
            "doc": "",
            "type": "compiler::Catch.block"
          },
          {
            "name": "start",
            "doc": "",
            "type": "compiler::Catch.start"
          },
          {
            "name": "end",
            "doc": "",
            "type": "compiler::Catch.end"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isExit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDefiniteAssign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "|compiler::Expr->sys::Bool| f"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkChildren",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "walkExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              },
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "condition",
                "type": "compiler::Expr condition"
              }
            ]
          }
        ],
        "name": "SwitchStmt",
        "doc": "SwitchStmt models a switch and its case and default block\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "doc": "",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "condition",
            "doc": "",
            "type": "compiler::SwitchStmt.condition"
          },
          {
            "name": "cases",
            "doc": "",
            "type": "compiler::SwitchStmt.cases"
          },
          {
            "name": "defaultBlock",
            "doc": "",
            "type": "compiler::SwitchStmt.defaultBlock"
          },
          {
            "name": "isTableswitch",
            "doc": "",
            "type": "compiler::SwitchStmt.isTableswitch"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Stmt"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          }
        ],
        "name": "Case",
        "doc": "Case models a single case block of a SwitchStmt\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "cases",
            "doc": "",
            "type": "compiler::Case.cases"
          },
          {
            "name": "block",
            "doc": "",
            "type": "compiler::Case.block"
          },
          {
            "name": "startOffset",
            "doc": "",
            "type": "compiler::Case.startOffset"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the StmtId instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::StmtId?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "StmtId",
        "doc": "StmtId\n",
        "fields": [
          {
            "name": "nop",
            "doc": "",
            "type": "compiler::StmtId.nop"
          },
          {
            "name": "expr",
            "doc": "",
            "type": "compiler::StmtId.expr"
          },
          {
            "name": "localDef",
            "doc": "",
            "type": "compiler::StmtId.localDef"
          },
          {
            "name": "ifStmt",
            "doc": "",
            "type": "compiler::StmtId.ifStmt"
          },
          {
            "name": "returnStmt",
            "doc": "",
            "type": "compiler::StmtId.returnStmt"
          },
          {
            "name": "throwStmt",
            "doc": "",
            "type": "compiler::StmtId.throwStmt"
          },
          {
            "name": "forStmt",
            "doc": "",
            "type": "compiler::StmtId.forStmt"
          },
          {
            "name": "whileStmt",
            "doc": "",
            "type": "compiler::StmtId.whileStmt"
          },
          {
            "name": "breakStmt",
            "doc": "",
            "type": "compiler::StmtId.breakStmt"
          },
          {
            "name": "continueStmt",
            "doc": "",
            "type": "compiler::StmtId.continueStmt"
          },
          {
            "name": "tryStmt",
            "doc": "",
            "type": "compiler::StmtId.tryStmt"
          },
          {
            "name": "switchStmt",
            "doc": "",
            "type": "compiler::StmtId.switchStmt"
          },
          {
            "name": "vals",
            "doc": "List of StmtId values indexed by ordinal\n",
            "type": "compiler::StmtId.vals"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "Associated namespace for this type representation\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "Fandoc API docs if available\n",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "Get the facet keyed by given type, or null if not defined.\n",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Parent pod which defines this type.\n",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "Simple name of the type such as \"Str\".\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "Qualified name such as \"sys:Str\".\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "This is the full signature of the type.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "Is this is a value type (Bool, Int, or Float and their nullables)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "Is this is a nullable type (marked with trailing ?)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "Get this type as a nullable type (marked with trailing ?)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "A generic type means that one or more of my slots contain signatures\nusing a generic parameter (such as V or K).  Fantom supports three built-in\ngeneric types: List, Map, and Func.  A generic instance (such as Str[])\nis NOT a generic type (all of its generic parameters have been filled in).\nUser defined generic types are not supported in Fan.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "A parameterized type is a type which has parameterized a generic type\nand replaced all the generic parameter types with generic argument\ntypes.  The type Str[] is a parameterized type of the generic type\nList (V is replaced with Str).  A parameterized type always has a\nsignature which is different from the qname.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "Return if this type is a generic parameter (such as V or K) in a\ngeneric type (List, Map, or Method).  Generic parameters serve\nas place holders for the parameterization of the generic type.\nFantom has a predefined set of generic parameters which are always\ndefined in the sys pod with a one character name.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "Create a parameterized List of this type.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "base",
            "doc": "The direct super class of this type (null for Obj).\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "mixins",
            "doc": "Return the mixins directly implemented by this type.\n",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "Does this type implement the specified type.  If true, then\nthis type is assignable to the specified type (although the\nconverse is not necessarily true).  All types (including\nmixin types) fit sys::Obj.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "Get the flags bitmask.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "Is this a valid type usable anywhere (such as local var)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "Map of the all defined slots, both fields and\nmethods (including inherited slots).\n",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "Get operators lookup structure\n",
            "returns": "compiler::COperators",
            "params": [

            ]
          }
        ],
        "name": "CType",
        "doc": "CType is a \"compiler type\" which is class used for representing\nthe Fantom type system in the compiler.  CTypes map to types within\nthe compilation units themsevles as TypeDef and TypeRef or to\nprecompiled types in imported pods via ReflectType or FType.\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "fits",
            "doc": "Does this type implement the specified type.  If true, then\nthis type is assignable to the specified type (although the\nconverse is not necessarily true).  All types (including\nmixin types) fit sys::Obj.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "Is this a valid type usable anywhere (such as local var)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "Return all the all slots (inherited and defined)\n",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "Cached COperators map\n",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "walkFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "addFacet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "support",
                "type": "compiler::CompilerSupport support"
              },
              {
                "name": "type",
                "type": "compiler::CType type"
              },
              {
                "name": "vals",
                "type": "[sys::Str:sys::Obj]? vals"
              }
            ]
          },
          {
            "name": "printFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isDocumented",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          },
          {
            "name": "isClosure",
            "doc": "Return if this type is the anonymous class of a closure\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "addSlot",
            "doc": "Add a slot to the type definition.  The method is used to add\nSlotDefs declared by this type as well as slots inherited by\nthis type.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "s",
                "type": "compiler::CSlot s"
              },
              {
                "name": "slotDefIndex",
                "type": "sys::Int? slotDefIndex"
              }
            ]
          },
          {
            "name": "replaceSlot",
            "doc": "Replace oldSlot with newSlot in my slot tables.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "oldSlot",
                "type": "compiler::CSlot oldSlot"
              },
              {
                "name": "newSlot",
                "type": "compiler::CSlot newSlot"
              }
            ]
          },
          {
            "name": "staticInit",
            "doc": "Get static initializer if one is defined.\n",
            "returns": "compiler::MethodDef?",
            "params": [

            ]
          },
          {
            "name": "normalizeStaticInits",
            "doc": "If during parse we added any static initializer methods,\nnow is the time to remove them all and replace them with a\nsingle collapsed MethodDef (processed in Normalize step)\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "hasSlotDef",
            "doc": "Return if this class has a slot definition for specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slotDef",
            "doc": "Return SlotDef for specified name or null.\n",
            "returns": "compiler::SlotDef?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fieldDef",
            "doc": "Return FieldDef for specified name or null.\n",
            "returns": "compiler::FieldDef?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "methodDef",
            "doc": "Return MethodDef for specified name or null.\n",
            "returns": "compiler::MethodDef?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slotDefs",
            "doc": "Get the SlotDefs declared within this TypeDef.\n",
            "returns": "compiler::SlotDef[]",
            "params": [

            ]
          },
          {
            "name": "fieldDefs",
            "doc": "Get the FieldDefs declared within this TypeDef.\n",
            "returns": "compiler::FieldDef[]",
            "params": [

            ]
          },
          {
            "name": "staticFieldDefs",
            "doc": "Get the static FieldDefs declared within this TypeDef.\n",
            "returns": "compiler::FieldDef[]",
            "params": [

            ]
          },
          {
            "name": "instanceFieldDefs",
            "doc": "Get the instance FieldDefs declared within this TypeDef.\n",
            "returns": "compiler::FieldDef[]",
            "params": [

            ]
          },
          {
            "name": "methodDefs",
            "doc": "Get the MethodDefs declared within this TypeDef.\n",
            "returns": "compiler::MethodDef[]",
            "params": [

            ]
          },
          {
            "name": "ctorDefs",
            "doc": "Get the constructor MethodDefs declared within this TypeDef.\n",
            "returns": "compiler::MethodDef[]",
            "params": [

            ]
          },
          {
            "name": "enumDef",
            "doc": "Return EnumDef for specified name or null.\n",
            "returns": "compiler::EnumDef?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          null,
          null,
          null,
          null
        ],
        "name": "TypeDef",
        "doc": "TypeDef models a type definition for a class, mixin or enum\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::TypeDef.ns"
          },
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::TypeDef.pod"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::TypeDef.name"
          },
          {
            "name": "qname",
            "doc": "",
            "type": "compiler::TypeDef.qname"
          },
          {
            "name": "isVal",
            "doc": "",
            "type": "compiler::TypeDef.isVal"
          },
          {
            "name": "base",
            "doc": "",
            "type": "compiler::TypeDef.base"
          },
          {
            "name": "mixins",
            "doc": "",
            "type": "compiler::TypeDef.mixins"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "doc": "",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "doc": "",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "unit",
            "doc": "",
            "type": "compiler::TypeDef.unit"
          },
          {
            "name": "baseSpecified",
            "doc": "",
            "type": "compiler::TypeDef.baseSpecified"
          },
          {
            "name": "enumDefs",
            "doc": "",
            "type": "compiler::TypeDef.enumDefs"
          },
          {
            "name": "closures",
            "doc": "",
            "type": "compiler::TypeDef.closures"
          },
          {
            "name": "closure",
            "doc": "",
            "type": "compiler::TypeDef.closure"
          },
          {
            "name": "slotMap",
            "doc": "",
            "type": "compiler::TypeDef.slotMap"
          },
          {
            "name": "slotDefMap",
            "doc": "",
            "type": "compiler::TypeDef.slotDefMap"
          },
          {
            "name": "slotDefList",
            "doc": "",
            "type": "compiler::TypeDef.slotDefList"
          },
          {
            "name": "indexedFacets",
            "doc": "",
            "type": "compiler::TypeDef.indexedFacets"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::TypeDef.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::TypeDef.toListOf$Store"
          },
          {
            "name": "operators$Store",
            "doc": "",
            "type": "compiler::TypeDef.operators$Store"
          }
        ],
        "facets": [

        ],
        "base": "compiler::DefNode"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "isPod",
            "doc": "Does this using import the entire pod\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null
        ],
        "name": "Using",
        "doc": "Using models an using import statement.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "podName",
            "doc": "",
            "type": "compiler::Using.podName"
          },
          {
            "name": "typeName",
            "doc": "",
            "type": "compiler::Using.typeName"
          },
          {
            "name": "asName",
            "doc": "",
            "type": "compiler::Using.asName"
          },
          {
            "name": "resolvedPod",
            "doc": "",
            "type": "compiler::Using.resolvedPod"
          },
          {
            "name": "resolvedType",
            "doc": "",
            "type": "compiler::Using.resolvedType"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "Fandoc API docs if available\n",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "Get the facet keyed by given type, or null if not defined.\n",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          }
        ],
        "name": "CSlot",
        "doc": "CSlot is a \"compiler slot\" which is represents a Slot in the\ncompiler.  CSlots unifies slots being compiled as SlotDefs\nwith slots imported as ReflectSlot or FSlot.\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "Pretty print this node and it's descendants.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "walkFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "addFacet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "support",
                "type": "compiler::CompilerSupport support"
              },
              {
                "name": "type",
                "type": "compiler::CType type"
              },
              {
                "name": "vals",
                "type": "[sys::Str:sys::Obj]? vals"
              }
            ]
          },
          {
            "name": "printFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isDocumented",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parentDef",
                "type": "compiler::TypeDef parentDef"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          null
        ],
        "name": "SlotDef",
        "doc": "SlotDef models a slot definition - a FieldDef or MethodDef\n",
        "fields": [
          {
            "name": "name",
            "doc": "",
            "type": "compiler::SlotDef.name"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "doc": "",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "doc": "",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "parentDef",
            "doc": "",
            "type": "compiler::SlotDef.parentDef"
          },
          {
            "name": "overridden",
            "doc": "",
            "type": "compiler::SlotDef.overridden"
          }
        ],
        "facets": [

        ],
        "base": "compiler::DefNode"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the VisitDepth instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::VisitDepth?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "VisitDepth",
        "doc": "VisitDepth enumerates how deep to traverse the AST\n",
        "fields": [
          {
            "name": "typeDef",
            "doc": "",
            "type": "compiler::VisitDepth.typeDef"
          },
          {
            "name": "slotDef",
            "doc": "",
            "type": "compiler::VisitDepth.slotDef"
          },
          {
            "name": "stmt",
            "doc": "",
            "type": "compiler::VisitDepth.stmt"
          },
          {
            "name": "expr",
            "doc": "",
            "type": "compiler::VisitDepth.expr"
          },
          {
            "name": "vals",
            "doc": "List of VisitDepth values indexed by ordinal\n",
            "type": "compiler::VisitDepth.vals"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": false,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "Callback when entering a compilation unit.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "Callback when existing a compilation unit.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "Callback when entering a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "Callback when exiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "Callback when entering a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "Callback when exiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "func",
                "type": "|compiler::Expr->compiler::Expr| func"
              }
            ]
          }
        ],
        "name": "ExprVisitor",
        "doc": "",
        "fields": [
          {
            "name": "func",
            "doc": "",
            "type": "compiler::ExprVisitor.func"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "Fandoc API docs if available\n",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "Get the facet keyed by given type, or null if not defined.\n",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "fieldType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "getter",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "setter",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "Original return type from inherited method if a covariant override.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this field covariantly override a method?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Is this field typed with a generic parameter.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this field the parameterization of a generic field,\nwith the generic type replaced with a real type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "CField",
        "doc": "CField is a \"compiler field\" which is represents a Field in the\ncompiler.  CFields unify methods being compiled as FieldDefs\nwith methods imported as ReflectField or FField.\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "getter",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "setter",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this field covariantly override a method?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Is this field typed with a generic parameter.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this field the parameterization of a generic field,\nwith the generic type replaced with a real type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "walkFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "addFacet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "support",
                "type": "compiler::CompilerSupport support"
              },
              {
                "name": "type",
                "type": "compiler::CType type"
              },
              {
                "name": "vals",
                "type": "[sys::Str:sys::Obj]? vals"
              }
            ]
          },
          {
            "name": "printFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isDocumented",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null,
          {
            "name": "walk",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          },
          {
            "name": "hasGet",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "hasSet",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "makeAccessorExpr",
            "doc": "",
            "returns": "compiler::FieldExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "useAccessor",
                "type": "sys::Bool useAccessor"
              }
            ]
          },
          null
        ],
        "name": "FieldDef",
        "doc": "FieldDef models a field definition\n",
        "fields": [
          {
            "name": "name",
            "doc": "",
            "type": "compiler::SlotDef.name"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "fieldType",
            "doc": "",
            "type": "compiler::FieldDef.fieldType"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "doc": "",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "doc": "",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "parentDef",
            "doc": "",
            "type": "compiler::SlotDef.parentDef"
          },
          {
            "name": "overridden",
            "doc": "",
            "type": "compiler::SlotDef.overridden"
          },
          {
            "name": "field",
            "doc": "",
            "type": "compiler::FieldDef.field"
          },
          {
            "name": "init",
            "doc": "",
            "type": "compiler::FieldDef.init"
          },
          {
            "name": "walkInit",
            "doc": "",
            "type": "compiler::FieldDef.walkInit"
          },
          {
            "name": "get",
            "doc": "",
            "type": "compiler::FieldDef.get"
          },
          {
            "name": "set",
            "doc": "",
            "type": "compiler::FieldDef.set"
          },
          {
            "name": "concreteBase",
            "doc": "",
            "type": "compiler::FieldDef.concreteBase"
          },
          {
            "name": "inheritedRet",
            "doc": "",
            "type": "compiler::FieldDef.inheritedRet"
          },
          {
            "name": "requiresNullCheck",
            "doc": "",
            "type": "compiler::FieldDef.requiresNullCheck"
          },
          {
            "name": "enumDef",
            "doc": "",
            "type": "compiler::FieldDef.enumDef"
          },
          {
            "name": "closureInfo",
            "doc": "",
            "type": "compiler::FieldDef.closureInfo"
          }
        ],
        "facets": [

        ],
        "base": "compiler::SlotDef"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on pod name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on name.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return name\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "Associated namespace for this pod representation\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "Get the pod name\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "version",
            "doc": "Get the pod version or null if unknown.\n",
            "returns": "sys::Version",
            "params": [

            ]
          },
          {
            "name": "depends",
            "doc": "Get the pod dependencies\n",
            "returns": "compiler::CDepend[]",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "List of the all defined types.\n",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "file",
            "doc": "Pod zip file.  Not all implementations have a backing\nfile in which case they will throw UnsupportedErr\n",
            "returns": "sys::File",
            "params": [

            ]
          },
          {
            "name": "meta",
            "doc": "Pod meta data\n",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "hasJs",
            "doc": "Return if this pod has client side JavaScript\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "resolveType",
            "doc": "Lookup a type by its simple name.  If the type doesn't\nexist and checked is true then throw UnknownTypeErr\notherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface pod.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function interface return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          }
        ],
        "name": "CPod",
        "doc": "CPod is a \"compiler pod\" used for representing a Pod in the compiler.\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on pod name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on name.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return name\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "version",
            "doc": "",
            "returns": "sys::Version",
            "params": [

            ]
          },
          {
            "name": "depends",
            "doc": "",
            "returns": "compiler::CDepend[]",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "file",
            "doc": "",
            "returns": "sys::File",
            "params": [

            ]
          },
          {
            "name": "hasJs",
            "doc": "Return if this pod has client side JavaScript\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "resolveType",
            "doc": "",
            "returns": "compiler::CType?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface pod.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function interface return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          null
        ],
        "name": "PodDef",
        "doc": "PodDef models the pod being compiled.\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::PodDef.ns"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::PodDef.name"
          },
          {
            "name": "meta",
            "doc": "",
            "type": "compiler::PodDef.meta"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "index",
            "doc": "",
            "type": "compiler::PodDef.index"
          },
          {
            "name": "units",
            "doc": "",
            "type": "compiler::PodDef.units"
          },
          {
            "name": "typeDefs",
            "doc": "",
            "type": "compiler::PodDef.typeDefs"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "paramType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "hasDefault",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "CParam",
        "doc": "CParam models a MethodParam in the compiler.  CParams unify the params\nbeing compiled (ParamDef) and parameters imported (ReflectParam, FMethodVar)\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "hasDefault",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "paramType",
                "type": "compiler::CType paramType"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "def",
                "type": "compiler::Expr? def"
              }
            ]
          }
        ],
        "name": "ParamDef",
        "doc": "ParamDef models the definition of a method parameter.\n",
        "fields": [
          {
            "name": "name",
            "doc": "",
            "type": "compiler::ParamDef.name"
          },
          {
            "name": "paramType",
            "doc": "",
            "type": "compiler::ParamDef.paramType"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "def",
            "doc": "",
            "type": "compiler::ParamDef.def"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "Fandoc API docs if available\n",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "Get the facet keyed by given type, or null if not defined.\n",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "returnType",
            "doc": "Return type\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "params",
            "doc": "Parameter signatures\n",
            "returns": "compiler::CParam[]",
            "params": [

            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "Original return type from inherited method if a covariant override.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this method have a covariant return type (we\ndon't count This returns as covariant)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Does this method contains generic parameters in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this method the parameterization of a generic method,\nwith all the generic parameters filled in with real types.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "generic",
            "doc": "If isParameterized is true, then return the generic\nmethod which this method parameterizes, otherwise null\n",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "calcGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "compiler::CMethod m"
              }
            ]
          },
          {
            "name": "nameAndParamTypesToStr",
            "doc": "Return a string with the name and parameters.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasSameParams",
            "doc": "Return if this method has the exact same parameters as\nthe specified method.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::CMethod that"
              }
            ]
          }
        ],
        "name": "CMethod",
        "doc": "CMethod is a \"compiler method\" which is represents a Method in the\ncompiler.  CMethods unify methods being compiled as MethodDefs\nwith methods imported as ReflectMethod or FMethod.\n",
        "fields": [

        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "returnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "params",
            "doc": "",
            "returns": "compiler::CParam[]",
            "params": [

            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this method have a covariant return type (we\ndon't count This returns as covariant)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Does this method contains generic parameters in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this method the parameterization of a generic method,\nwith all the generic parameters filled in with real types.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "generic",
            "doc": "If isParameterized is true, then return the generic\nmethod which this method parameterizes, otherwise null\n",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "calcGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "compiler::CMethod m"
              }
            ]
          },
          {
            "name": "nameAndParamTypesToStr",
            "doc": "Return a string with the name and parameters.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasSameParams",
            "doc": "Return if this method has the exact same parameters as\nthe specified method.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::CMethod that"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "walkFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "addFacet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "support",
                "type": "compiler::CompilerSupport support"
              },
              {
                "name": "type",
                "type": "compiler::CType type"
              },
              {
                "name": "vals",
                "type": "[sys::Str:sys::Obj]? vals"
              }
            ]
          },
          {
            "name": "printFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "isDocumented",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null,
          {
            "name": "walk",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::Visitor v"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          null,
          {
            "name": "makeStaticInit",
            "doc": "",
            "returns": "compiler::MethodDef",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "block",
                "type": "compiler::Block? block"
              }
            ]
          },
          {
            "name": "makeInstanceInit",
            "doc": "",
            "returns": "compiler::MethodDef",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "block",
                "type": "compiler::Block? block"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          },
          {
            "name": "isStaticInit",
            "doc": "Return if this a static initializer block.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNameStaticInit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "isInstanceInit",
            "doc": "Return if this a instance initializer block.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNameInstanceInit",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "isFieldAccessor",
            "doc": "Return if getter/setter for FieldDef\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFieldSetter",
            "doc": "Return if setter for FieldDef\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isItBlockCtor",
            "doc": "Return if this is a constructor with an it-block as last parameter\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "addLocalVarForDef",
            "doc": "Make and add a MethodVar for a local variable.\n",
            "returns": "compiler::MethodVar",
            "params": [
              {
                "name": "def",
                "type": "compiler::LocalDefStmt def"
              },
              {
                "name": "scope",
                "type": "compiler::Block? scope"
              }
            ]
          },
          {
            "name": "addLocalVar",
            "doc": "Make and add a MethodVar for a local variable.  If name is\nnull then we auto-generate a temporary variable name\n",
            "returns": "compiler::MethodVar",
            "params": [
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              },
              {
                "name": "name",
                "type": "sys::Str? name"
              },
              {
                "name": "scope",
                "type": "compiler::Block? scope"
              }
            ]
          },
          {
            "name": "addParamVar",
            "doc": "Add a parameter to the end of the method signature and\ninitialize the param MethodVar.\nNote: currently this only works if no locals are defined.\n",
            "returns": "compiler::MethodVar",
            "params": [
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          }
        ],
        "name": "MethodDef",
        "doc": "MethodDef models a method definition - it's signature and body.\n",
        "fields": [
          {
            "name": "name",
            "doc": "",
            "type": "compiler::SlotDef.name"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "doc": "",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "doc": "",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "parentDef",
            "doc": "",
            "type": "compiler::SlotDef.parentDef"
          },
          {
            "name": "overridden",
            "doc": "",
            "type": "compiler::SlotDef.overridden"
          },
          {
            "name": "ret",
            "doc": "",
            "type": "compiler::MethodDef.ret"
          },
          {
            "name": "inheritedRet",
            "doc": "",
            "type": "compiler::MethodDef.inheritedRet"
          },
          {
            "name": "paramDefs",
            "doc": "",
            "type": "compiler::MethodDef.paramDefs"
          },
          {
            "name": "code",
            "doc": "",
            "type": "compiler::MethodDef.code"
          },
          {
            "name": "ctorChain",
            "doc": "",
            "type": "compiler::MethodDef.ctorChain"
          },
          {
            "name": "vars",
            "doc": "",
            "type": "compiler::MethodDef.vars"
          },
          {
            "name": "accessorFor",
            "doc": "",
            "type": "compiler::MethodDef.accessorFor"
          },
          {
            "name": "usesCvars",
            "doc": "",
            "type": "compiler::MethodDef.usesCvars"
          }
        ],
        "facets": [

        ],
        "base": "compiler::SlotDef"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "base",
            "doc": "",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::CType that"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          }
        ],
        "name": "TypeRef",
        "doc": "TypeRef models a type reference such as an extends clause or a\nmethod parameter.  Really it is just an AST node wrapper for a\nCType that let's us keep track of the source code Loc.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "t",
            "doc": "",
            "type": "compiler::TypeRef.t"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Make for specified output stream\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "w",
            "doc": "Write and then return this.\n",
            "returns": "compiler::AstWriter",
            "params": [
              {
                "name": "o",
                "type": "sys::Obj o"
              }
            ]
          },
          {
            "name": "nl",
            "doc": "Write newline and then return this.\n",
            "returns": "compiler::AstWriter",
            "params": [

            ]
          },
          {
            "name": "indent",
            "doc": "Increment the indentation\n",
            "returns": "compiler::AstWriter",
            "params": [

            ]
          },
          {
            "name": "unindent",
            "doc": "Decrement the indentation\n",
            "returns": "compiler::AstWriter",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "Write the source code for the mask of flags with a trailing space.\n",
            "returns": "compiler::AstWriter",
            "params": [
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          },
          {
            "name": "flagsToStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          },
          null
        ],
        "name": "AstWriter",
        "doc": "AstWriter\n",
        "fields": [
          {
            "name": "out",
            "doc": "",
            "type": "compiler::AstWriter.out"
          },
          {
            "name": "indentation",
            "doc": "",
            "type": "compiler::AstWriter.indentation"
          },
          {
            "name": "needIndent",
            "doc": "",
            "type": "compiler::AstWriter.needIndent"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "method",
                "type": "compiler::MethodDef method"
              },
              {
                "name": "register",
                "type": "sys::Int register"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              },
              {
                "name": "scope",
                "type": "compiler::Block? scope"
              }
            ]
          },
          {
            "name": "makeForParam",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "method",
                "type": "compiler::MethodDef method"
              },
              {
                "name": "register",
                "type": "sys::Int register"
              },
              {
                "name": "p",
                "type": "compiler::ParamDef p"
              },
              {
                "name": "paramType",
                "type": "compiler::CType paramType"
              }
            ]
          },
          {
            "name": "isParam",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isWrapped",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "reassigned",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "MethodVar",
        "doc": "MethodVar is a variable used in a method - either param or local.\n",
        "fields": [
          {
            "name": "method",
            "doc": "",
            "type": "compiler::MethodVar.method"
          },
          {
            "name": "register",
            "doc": "",
            "type": "compiler::MethodVar.register"
          },
          {
            "name": "ctype",
            "doc": "",
            "type": "compiler::MethodVar.ctype"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::MethodVar.name"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::MethodVar.flags"
          },
          {
            "name": "isCatchVar",
            "doc": "",
            "type": "compiler::MethodVar.isCatchVar"
          },
          {
            "name": "scope",
            "doc": "",
            "type": "compiler::MethodVar.scope"
          },
          {
            "name": "paramDef",
            "doc": "",
            "type": "compiler::MethodVar.paramDef"
          },
          {
            "name": "usedInClosure",
            "doc": "",
            "type": "compiler::MethodVar.usedInClosure"
          },
          {
            "name": "shadows",
            "doc": "",
            "type": "compiler::MethodVar.shadows"
          },
          {
            "name": "wrapField",
            "doc": "",
            "type": "compiler::MethodVar.wrapField"
          },
          {
            "name": "isReassigned",
            "doc": "",
            "type": "compiler::MethodVar.isReassigned"
          },
          {
            "name": "paramWrapper",
            "doc": "",
            "type": "compiler::MethodVar.paramWrapper"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "Print to std out\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "compiler::AstWriter out"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "doc",
                "type": "compiler::DocDef? doc"
              },
              {
                "name": "facets",
                "type": "compiler::FacetDef[]? facets"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "ordinal",
                "type": "sys::Int ordinal"
              }
            ]
          }
        ],
        "name": "EnumDef",
        "doc": "EnumDef is used to define one ordinal/named enum value in\nan enum TypeDef.  If using a custom constructor, it includes\nthe constructor arguments.\n",
        "fields": [
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::Node.loc"
          },
          {
            "name": "doc",
            "doc": "",
            "type": "compiler::EnumDef.doc"
          },
          {
            "name": "facets",
            "doc": "",
            "type": "compiler::EnumDef.facets"
          },
          {
            "name": "ordinal",
            "doc": "",
            "type": "compiler::EnumDef.ordinal"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::EnumDef.name"
          },
          {
            "name": "ctorArgs",
            "doc": "",
            "type": "compiler::EnumDef.ctorArgs"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Node"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "find",
            "doc": "Find a DSL plugin for the given anchor type.  If there\nis a problem then log an error and return null.\n",
            "returns": "compiler::DslPlugin?",
            "params": [
              {
                "name": "c",
                "type": "compiler::CompilerSupport c"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "anchorType",
                "type": "compiler::CType anchorType"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Constructor with associated compiler.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              }
            ]
          },
          {
            "name": "compile",
            "doc": "Compile DSL source into its Fantom equivalent expression.\nLog and throw compiler error if there is a problem.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "dsl",
                "type": "compiler::DslExpr dsl"
              }
            ]
          },
          {
            "name": "normalizeSrc",
            "doc": "Normalize the DSL source using Fantom's multi-line whitespace\nrules where no non-whitespace chars may be appear to the left\nof the opening \"<|\" token.  If source is formatted incorrectly\nthen log and throw error.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "dsl",
                "type": "compiler::DslExpr dsl"
              }
            ]
          }
        ],
        "name": "DslPlugin",
        "doc": "DslPlugin is the base class for Domain Specific Language plugins\nused to compile embedded DSLs.  Subclasses are registered on\nthe anchor type's qname with the \"compiler.dsl.{anchor}\" indexed\nprop and must declare a constructor with a Compiler arg.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "find",
            "doc": "Find a DSL plugin for the given anchor type.  If there\nis a problem then log an error and return null.\n",
            "returns": "compiler::DslPlugin?",
            "params": [
              {
                "name": "c",
                "type": "compiler::CompilerSupport c"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "anchorType",
                "type": "compiler::CType anchorType"
              }
            ]
          },
          {
            "name": "compile",
            "doc": "Find a DSL plugin for the given anchor type.  If there\nis a problem then log an error and return null.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "dsl",
                "type": "compiler::DslExpr dsl"
              }
            ]
          },
          {
            "name": "normalizeSrc",
            "doc": "Normalize the DSL source using Fantom's multi-line whitespace\nrules where no non-whitespace chars may be appear to the left\nof the opening \"<|\" token.  If source is formatted incorrectly\nthen log and throw error.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "dsl",
                "type": "compiler::DslExpr dsl"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Constructor with associated compiler.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              }
            ]
          }
        ],
        "name": "RegexDslPlugin",
        "doc": "RegexDslPlugin is used to create a Regex instance from a raw string.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ],
        "facets": [

        ],
        "base": "compiler::DslPlugin"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "find",
            "doc": "Find a DSL plugin for the given anchor type.  If there\nis a problem then log an error and return null.\n",
            "returns": "compiler::DslPlugin?",
            "params": [
              {
                "name": "c",
                "type": "compiler::CompilerSupport c"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "anchorType",
                "type": "compiler::CType anchorType"
              }
            ]
          },
          {
            "name": "compile",
            "doc": "Find a DSL plugin for the given anchor type.  If there\nis a problem then log an error and return null.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "dsl",
                "type": "compiler::DslExpr dsl"
              }
            ]
          },
          {
            "name": "normalizeSrc",
            "doc": "Normalize the DSL source using Fantom's multi-line whitespace\nrules where no non-whitespace chars may be appear to the left\nof the opening \"<|\" token.  If source is formatted incorrectly\nthen log and throw error.\n",
            "returns": "sys::Str",
            "params": [
              {
                "name": "dsl",
                "type": "compiler::DslExpr dsl"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Constructor with associated compiler.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              }
            ]
          }
        ],
        "name": "StrDslPlugin",
        "doc": "StrDslPlugin is used to create a raw Str literal.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ],
        "facets": [

        ],
        "base": "compiler::DslPlugin"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          null,
          {
            "name": "writeBuf",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream? out"
              },
              {
                "name": "buf",
                "type": "sys::Buf? buf"
              }
            ]
          },
          {
            "name": "readBuf",
            "doc": "",
            "returns": "sys::Buf?",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "writeAttrs",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              },
              {
                "name": "fattrs",
                "type": "compiler::FAttr[]? fattrs"
              }
            ]
          },
          {
            "name": "readAttrs",
            "doc": "",
            "returns": "compiler::FAttr[]",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "writeDoc",
            "doc": "Write a fandoc item to the specified output stream.  The fandoc file\nformat is an extremely simple plan text format with left justified\ntype/slot qnames, followed by the fandoc content indented two spaces.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              },
              {
                "name": "key",
                "type": "sys::Str key"
              },
              {
                "name": "doc",
                "type": "sys::Str? doc"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "FUtil",
        "doc": "FUtil provides fcode encoding and decoding utilities.\n",
        "fields": [
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on pod name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on name.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return name\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "types",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "file",
            "doc": "",
            "returns": "sys::File",
            "params": [

            ]
          },
          {
            "name": "hasJs",
            "doc": "Return if this pod has client side JavaScript\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "resolveType",
            "doc": "",
            "returns": "compiler::CType?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface pod.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function interface return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "zip",
                "type": "sys::Zip? zip"
              }
            ]
          },
          {
            "name": "toType",
            "doc": "",
            "returns": "compiler::CType?",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "resolveTypes",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "indexes",
                "type": "sys::Int[] indexes"
              }
            ]
          },
          {
            "name": "n",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "typeRef",
            "doc": "",
            "returns": "compiler::FTypeRef",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "fieldRef",
            "doc": "",
            "returns": "compiler::FFieldRef",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "methodRef",
            "doc": "",
            "returns": "compiler::FMethodRef",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "integer",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "float",
            "doc": "",
            "returns": "sys::Float",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "decimal",
            "doc": "",
            "returns": "sys::Decimal",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "str",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "duration",
            "doc": "",
            "returns": "sys::Duration",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "uri",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "typeRefStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "fieldRefStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "methodRefStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "addName",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "val",
                "type": "sys::Str val"
              }
            ]
          },
          {
            "name": "addTypeRef",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "addFieldRef",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "field",
                "type": "compiler::CField field"
              }
            ]
          },
          {
            "name": "addMethodRef",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "method",
                "type": "compiler::CMethod method"
              },
              {
                "name": "argCount",
                "type": "sys::Int? argCount"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "Read the just the pod and type meta-data, but\nnot each type's full definition\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "readFully",
            "doc": "Read the entire pod into memory (including full type specifications)\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "write",
            "doc": "Write the tables and type files out to zip storage\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              }
            ]
          },
          {
            "name": "writeMeta",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "uri",
                "type": "sys::Uri uri"
              }
            ]
          },
          {
            "name": "writeIndex",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "uri",
                "type": "sys::Uri uri"
              }
            ]
          },
          {
            "name": "prop",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              },
              {
                "name": "n",
                "type": "sys::Str n"
              },
              {
                "name": "v",
                "type": "sys::Str v"
              }
            ]
          },
          {
            "name": "in",
            "doc": "Get input stream to read the specified file from zip storage.\n",
            "returns": "sys::InStream?",
            "params": [
              {
                "name": "uri",
                "type": "sys::Uri uri"
              }
            ]
          },
          {
            "name": "out",
            "doc": "Get output stream to write the specified file to zip storage.\n",
            "returns": "sys::OutStream",
            "params": [
              {
                "name": "uri",
                "type": "sys::Uri uri"
              }
            ]
          }
        ],
        "name": "FPod",
        "doc": "FPod is the read/write fcode representation of sys::Pod.  It's main job in\nlife is to manage all the pod-wide constant tables for names, literals,\ntype/slot references and type/slot definitions.\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::FPod.ns"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::FPod.name"
          },
          {
            "name": "version",
            "doc": "",
            "type": "compiler::FPod.version"
          },
          {
            "name": "depends",
            "doc": "",
            "type": "compiler::FPod.depends"
          },
          {
            "name": "meta",
            "doc": "",
            "type": "compiler::FPod.meta"
          },
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "index",
            "doc": "",
            "type": "compiler::FPod.index"
          },
          {
            "name": "zip",
            "doc": "",
            "type": "compiler::FPod.zip"
          },
          {
            "name": "ftypes",
            "doc": "",
            "type": "compiler::FPod.ftypes"
          },
          {
            "name": "names",
            "doc": "",
            "type": "compiler::FPod.names"
          },
          {
            "name": "typeRefs",
            "doc": "",
            "type": "compiler::FPod.typeRefs"
          },
          {
            "name": "fieldRefs",
            "doc": "",
            "type": "compiler::FPod.fieldRefs"
          },
          {
            "name": "methodRefs",
            "doc": "",
            "type": "compiler::FPod.methodRefs"
          },
          {
            "name": "ints",
            "doc": "",
            "type": "compiler::FPod.ints"
          },
          {
            "name": "floats",
            "doc": "",
            "type": "compiler::FPod.floats"
          },
          {
            "name": "decimals",
            "doc": "",
            "type": "compiler::FPod.decimals"
          },
          {
            "name": "strs",
            "doc": "",
            "type": "compiler::FPod.strs"
          },
          {
            "name": "durations",
            "doc": "",
            "type": "compiler::FPod.durations"
          },
          {
            "name": "uris",
            "doc": "",
            "type": "compiler::FPod.uris"
          },
          {
            "name": "ftypesByName",
            "doc": "",
            "type": "compiler::FPod.ftypesByName"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "podName",
                "type": "sys::Int podName"
              },
              {
                "name": "typeName",
                "type": "sys::Int typeName"
              },
              {
                "name": "sig",
                "type": "sys::Str sig"
              }
            ]
          },
          {
            "name": "isGenericInstance",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "format",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "compiler::FTypeRef",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          }
        ],
        "name": "FTypeRef",
        "doc": "FTypeRef stores a typeRef structure used to reference type signatures.\n",
        "fields": [
          {
            "name": "podName",
            "doc": "",
            "type": "compiler::FTypeRef.podName"
          },
          {
            "name": "typeName",
            "doc": "",
            "type": "compiler::FTypeRef.typeName"
          },
          {
            "name": "sig",
            "doc": "",
            "type": "compiler::FTypeRef.sig"
          },
          {
            "name": "hashcode",
            "doc": "",
            "type": "compiler::FTypeRef.hashcode"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "sys::Int parent"
              },
              {
                "name": "name",
                "type": "sys::Int name"
              },
              {
                "name": "typeRef",
                "type": "sys::Int typeRef"
              }
            ]
          },
          {
            "name": "format",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "compiler::FFieldRef",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          }
        ],
        "name": "FFieldRef",
        "doc": "FFieldRef\n",
        "fields": [
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::FFieldRef.parent"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::FFieldRef.name"
          },
          {
            "name": "typeRef",
            "doc": "",
            "type": "compiler::FFieldRef.typeRef"
          },
          {
            "name": "hashcode",
            "doc": "",
            "type": "compiler::FFieldRef.hashcode"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "sys::Int parent"
              },
              {
                "name": "name",
                "type": "sys::Int name"
              },
              {
                "name": "ret",
                "type": "sys::Int ret"
              },
              {
                "name": "params",
                "type": "sys::Int[] params"
              }
            ]
          },
          {
            "name": "format",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "compiler::FMethodRef",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          }
        ],
        "name": "FMethodRef",
        "doc": "FMethodRef\n",
        "fields": [
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::FMethodRef.parent"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::FMethodRef.name"
          },
          {
            "name": "ret",
            "doc": "",
            "type": "compiler::FMethodRef.ret"
          },
          {
            "name": "params",
            "doc": "",
            "type": "compiler::FMethodRef.params"
          },
          {
            "name": "hashcode",
            "doc": "",
            "type": "compiler::FMethodRef.hashcode"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "fparent",
                "type": "compiler::FType fparent"
              }
            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::FPod",
            "params": [

            ]
          },
          {
            "name": "attr",
            "doc": "",
            "returns": "compiler::FAttr?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "writeCommon",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "readCommon",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          }
        ],
        "name": "FSlot",
        "doc": "FSlot is the read/write fcode representation of sys::Slot.\n",
        "fields": [
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::FSlot.flags"
          },
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fparent",
            "doc": "",
            "type": "compiler::FSlot.fparent"
          },
          {
            "name": "nameIndex",
            "doc": "",
            "type": "compiler::FSlot.nameIndex"
          },
          {
            "name": "fattrs",
            "doc": "",
            "type": "compiler::FSlot.fattrs"
          },
          {
            "name": "ffacets",
            "doc": "",
            "type": "compiler::FSlot.ffacets"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "fieldType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this field covariantly override a method?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Is this field typed with a generic parameter.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this field the parameterization of a generic field,\nwith the generic type replaced with a real type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          null,
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::FPod",
            "params": [

            ]
          },
          {
            "name": "attr",
            "doc": "",
            "returns": "compiler::FAttr?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "writeCommon",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "readCommon",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "fparent",
                "type": "compiler::FType fparent"
              }
            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "sys::This",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          }
        ],
        "name": "FField",
        "doc": "FField is the read/write fcode representation of sys::Field.\n",
        "fields": [
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::FSlot.flags"
          },
          {
            "name": "getter",
            "doc": "",
            "type": "compiler::FField.getter"
          },
          {
            "name": "setter",
            "doc": "",
            "type": "compiler::FField.setter"
          },
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fparent",
            "doc": "",
            "type": "compiler::FSlot.fparent"
          },
          {
            "name": "nameIndex",
            "doc": "",
            "type": "compiler::FSlot.nameIndex"
          },
          {
            "name": "fattrs",
            "doc": "",
            "type": "compiler::FSlot.fattrs"
          },
          {
            "name": "ffacets",
            "doc": "",
            "type": "compiler::FSlot.ffacets"
          },
          {
            "name": "typeRef",
            "doc": "",
            "type": "compiler::FField.typeRef"
          }
        ],
        "facets": [

        ],
        "base": "compiler::FSlot"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              },
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "all",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "tables",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "table",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "title",
                "type": "sys::Str title"
              },
              {
                "name": "table",
                "type": "compiler::FTable table"
              }
            ]
          },
          {
            "name": "ftypes",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "ftype",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::FType t"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "s",
                "type": "compiler::FSlot s"
              }
            ]
          },
          {
            "name": "field",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FField f"
              }
            ]
          },
          {
            "name": "method",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::FMethod m"
              }
            ]
          },
          {
            "name": "code",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "code",
                "type": "sys::Buf code"
              }
            ]
          },
          {
            "name": "attrs",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attrs",
                "type": "compiler::FAttr[]? attrs"
              }
            ]
          },
          {
            "name": "attr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attr",
                "type": "compiler::FAttr attr"
              }
            ]
          },
          {
            "name": "sourceFileAttr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attr",
                "type": "compiler::FAttr attr"
              }
            ]
          },
          {
            "name": "lineNumberAttr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attr",
                "type": "compiler::FAttr attr"
              }
            ]
          },
          {
            "name": "facetsAttr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attr",
                "type": "compiler::FAttr attr"
              }
            ]
          },
          {
            "name": "enumOrdinalAttr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attr",
                "type": "compiler::FAttr attr"
              }
            ]
          },
          {
            "name": "errTableAttr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attr",
                "type": "compiler::FAttr attr"
              }
            ]
          },
          {
            "name": "lineNumbersAttr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "attr",
                "type": "compiler::FAttr attr"
              }
            ]
          },
          {
            "name": "typeRef",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "i",
                "type": "sys::Int i"
              }
            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "i",
                "type": "sys::Int i"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          },
          {
            "name": "index",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "compiler::FPrinter",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "printLine",
            "doc": "",
            "returns": "compiler::FPrinter",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          null
        ],
        "name": "FPrinter",
        "doc": "FPrinter is used to pretty print fcode\n",
        "fields": [
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::FPrinter.pod"
          },
          {
            "name": "out",
            "doc": "",
            "type": "compiler::FPrinter.out"
          },
          {
            "name": "showIndex",
            "doc": "",
            "type": "compiler::FPrinter.showIndex"
          },
          {
            "name": "showCode",
            "doc": "",
            "type": "compiler::FPrinter.showCode"
          },
          {
            "name": "showLines",
            "doc": "",
            "type": "compiler::FPrinter.showLines"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "returnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "params",
            "doc": "",
            "returns": "compiler::CParam[]",
            "params": [

            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this method have a covariant return type (we\ndon't count This returns as covariant)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this method the parameterization of a generic method,\nwith all the generic parameters filled in with real types.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "generic",
            "doc": "If isParameterized is true, then return the generic\nmethod which this method parameterizes, otherwise null\n",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "calcGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "compiler::CMethod m"
              }
            ]
          },
          {
            "name": "nameAndParamTypesToStr",
            "doc": "Return a string with the name and parameters.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasSameParams",
            "doc": "Return if this method has the exact same parameters as\nthe specified method.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::CMethod that"
              }
            ]
          },
          null,
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::FPod",
            "params": [

            ]
          },
          {
            "name": "attr",
            "doc": "",
            "returns": "compiler::FAttr?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "writeCommon",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "readCommon",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "fparent",
                "type": "compiler::FType fparent"
              }
            ]
          },
          {
            "name": "fparams",
            "doc": "",
            "returns": "compiler::FMethodVar[]",
            "params": [

            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "sys::This",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "dump",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          null
        ],
        "name": "FMethod",
        "doc": "FMethod is the read/write fcode representation of sys::Method.\n",
        "fields": [
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::FSlot.flags"
          },
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fparent",
            "doc": "",
            "type": "compiler::FSlot.fparent"
          },
          {
            "name": "nameIndex",
            "doc": "",
            "type": "compiler::FSlot.nameIndex"
          },
          {
            "name": "fattrs",
            "doc": "",
            "type": "compiler::FSlot.fattrs"
          },
          {
            "name": "ffacets",
            "doc": "",
            "type": "compiler::FSlot.ffacets"
          },
          {
            "name": "ret",
            "doc": "",
            "type": "compiler::FMethod.ret"
          },
          {
            "name": "inheritedRet",
            "doc": "",
            "type": "compiler::FMethod.inheritedRet"
          },
          {
            "name": "vars",
            "doc": "",
            "type": "compiler::FMethod.vars"
          },
          {
            "name": "paramCount",
            "doc": "",
            "type": "compiler::FMethod.paramCount"
          },
          {
            "name": "localCount",
            "doc": "",
            "type": "compiler::FMethod.localCount"
          },
          {
            "name": "code",
            "doc": "",
            "type": "compiler::FMethod.code"
          },
          {
            "name": "maxStack",
            "doc": "",
            "type": "compiler::FMethod.maxStack"
          },
          {
            "name": "isGeneric$Store",
            "doc": "",
            "type": "compiler::FMethod.isGeneric$Store"
          }
        ],
        "facets": [

        ],
        "base": "compiler::FSlot"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          null,
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "paramType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "hasDefault",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "fmethod",
                "type": "compiler::FMethod fmethod"
              }
            ]
          },
          {
            "name": "isParam",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "compiler::FMethodVar",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "fpod",
            "doc": "",
            "returns": "compiler::FPod",
            "params": [

            ]
          }
        ],
        "name": "FMethodVar",
        "doc": "FMethodVar models one parameter or local variable in a FMethod\n",
        "fields": [
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fmethod",
            "doc": "",
            "type": "compiler::FMethodVar.fmethod"
          },
          {
            "name": "nameIndex",
            "doc": "",
            "type": "compiler::FMethodVar.nameIndex"
          },
          {
            "name": "typeRef",
            "doc": "",
            "type": "compiler::FMethodVar.typeRef"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::FMethodVar.flags"
          },
          {
            "name": "defNameIndex",
            "doc": "",
            "type": "compiler::FMethodVar.defNameIndex"
          },
          {
            "name": "def",
            "doc": "",
            "type": "compiler::FMethodVar.def"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          null,
          {
            "name": "utf",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "u2",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "compiler::FAttr",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "FAttr",
        "doc": "FAttr is attribute meta-data for a FType or FSlot\n",
        "fields": [
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::FAttr.name"
          },
          {
            "name": "data",
            "doc": "",
            "type": "compiler::FAttr.data"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "get",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "decode",
            "doc": "",
            "returns": "compiler::FFacet[]",
            "params": [
              {
                "name": "fpod",
                "type": "compiler::FPod fpod"
              },
              {
                "name": "attr",
                "type": "compiler::FAttr? attr"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "qn",
                "type": "sys::Str qn"
              },
              {
                "name": "v",
                "type": "sys::Str v"
              }
            ]
          }
        ],
        "name": "FFacet",
        "doc": "FFacet\n",
        "fields": [
          {
            "name": "qname",
            "doc": "",
            "type": "compiler::FFacet.qname"
          },
          {
            "name": "val",
            "doc": "",
            "type": "compiler::FFacet.val"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              },
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "code",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "buf",
                "type": "sys::Buf buf"
              }
            ]
          },
          {
            "name": "op",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "op",
                "type": "compiler::FOp op"
              }
            ]
          },
          {
            "name": "printSwitch",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "index",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "print",
            "doc": "",
            "returns": "compiler::FCodePrinter",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "printLine",
            "doc": "",
            "returns": "compiler::FCodePrinter",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          }
        ],
        "name": "FCodePrinter",
        "doc": "FCodePrinter prints a human readable syntax for fcode\n",
        "fields": [
          {
            "name": "FCodeVersion",
            "doc": "",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "doc": "",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "doc": "",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "doc": "",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "doc": "",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "doc": "",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "doc": "",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "doc": "",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "doc": "",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "doc": "",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "doc": "",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "doc": "",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "doc": "",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "doc": "",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "doc": "",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "doc": "",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "doc": "",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "doc": "",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "doc": "",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "doc": "",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "doc": "",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "doc": "",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "doc": "",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "doc": "",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "doc": "",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "doc": "",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "doc": "",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "doc": "",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "doc": "",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::FCodePrinter.pod"
          },
          {
            "name": "out",
            "doc": "",
            "type": "compiler::FCodePrinter.out"
          },
          {
            "name": "showIndex",
            "doc": "",
            "type": "compiler::FCodePrinter.showIndex"
          },
          {
            "name": "buf",
            "doc": "",
            "type": "compiler::FCodePrinter.buf"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              },
              {
                "name": "arg",
                "type": "compiler::FOpArg arg"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the FOp instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::FOp?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "FOp",
        "doc": "FOp provides all the fcode constants\n",
        "fields": [
          {
            "name": "Nop",
            "doc": "",
            "type": "compiler::FOp.Nop"
          },
          {
            "name": "LoadNull",
            "doc": "",
            "type": "compiler::FOp.LoadNull"
          },
          {
            "name": "LoadFalse",
            "doc": "",
            "type": "compiler::FOp.LoadFalse"
          },
          {
            "name": "LoadTrue",
            "doc": "",
            "type": "compiler::FOp.LoadTrue"
          },
          {
            "name": "LoadInt",
            "doc": "",
            "type": "compiler::FOp.LoadInt"
          },
          {
            "name": "LoadFloat",
            "doc": "",
            "type": "compiler::FOp.LoadFloat"
          },
          {
            "name": "LoadDecimal",
            "doc": "",
            "type": "compiler::FOp.LoadDecimal"
          },
          {
            "name": "LoadStr",
            "doc": "",
            "type": "compiler::FOp.LoadStr"
          },
          {
            "name": "LoadDuration",
            "doc": "",
            "type": "compiler::FOp.LoadDuration"
          },
          {
            "name": "LoadType",
            "doc": "",
            "type": "compiler::FOp.LoadType"
          },
          {
            "name": "LoadUri",
            "doc": "",
            "type": "compiler::FOp.LoadUri"
          },
          {
            "name": "LoadVar",
            "doc": "",
            "type": "compiler::FOp.LoadVar"
          },
          {
            "name": "StoreVar",
            "doc": "",
            "type": "compiler::FOp.StoreVar"
          },
          {
            "name": "LoadInstance",
            "doc": "",
            "type": "compiler::FOp.LoadInstance"
          },
          {
            "name": "StoreInstance",
            "doc": "",
            "type": "compiler::FOp.StoreInstance"
          },
          {
            "name": "LoadStatic",
            "doc": "",
            "type": "compiler::FOp.LoadStatic"
          },
          {
            "name": "StoreStatic",
            "doc": "",
            "type": "compiler::FOp.StoreStatic"
          },
          {
            "name": "LoadMixinStatic",
            "doc": "",
            "type": "compiler::FOp.LoadMixinStatic"
          },
          {
            "name": "StoreMixinStatic",
            "doc": "",
            "type": "compiler::FOp.StoreMixinStatic"
          },
          {
            "name": "CallNew",
            "doc": "",
            "type": "compiler::FOp.CallNew"
          },
          {
            "name": "CallCtor",
            "doc": "",
            "type": "compiler::FOp.CallCtor"
          },
          {
            "name": "CallStatic",
            "doc": "",
            "type": "compiler::FOp.CallStatic"
          },
          {
            "name": "CallVirtual",
            "doc": "",
            "type": "compiler::FOp.CallVirtual"
          },
          {
            "name": "CallNonVirtual",
            "doc": "",
            "type": "compiler::FOp.CallNonVirtual"
          },
          {
            "name": "CallMixinStatic",
            "doc": "",
            "type": "compiler::FOp.CallMixinStatic"
          },
          {
            "name": "CallMixinVirtual",
            "doc": "",
            "type": "compiler::FOp.CallMixinVirtual"
          },
          {
            "name": "CallMixinNonVirtual",
            "doc": "",
            "type": "compiler::FOp.CallMixinNonVirtual"
          },
          {
            "name": "Jump",
            "doc": "",
            "type": "compiler::FOp.Jump"
          },
          {
            "name": "JumpTrue",
            "doc": "",
            "type": "compiler::FOp.JumpTrue"
          },
          {
            "name": "JumpFalse",
            "doc": "",
            "type": "compiler::FOp.JumpFalse"
          },
          {
            "name": "CmpEQ",
            "doc": "",
            "type": "compiler::FOp.CmpEQ"
          },
          {
            "name": "CmpNE",
            "doc": "",
            "type": "compiler::FOp.CmpNE"
          },
          {
            "name": "Cmp",
            "doc": "",
            "type": "compiler::FOp.Cmp"
          },
          {
            "name": "CmpLE",
            "doc": "",
            "type": "compiler::FOp.CmpLE"
          },
          {
            "name": "CmpLT",
            "doc": "",
            "type": "compiler::FOp.CmpLT"
          },
          {
            "name": "CmpGT",
            "doc": "",
            "type": "compiler::FOp.CmpGT"
          },
          {
            "name": "CmpGE",
            "doc": "",
            "type": "compiler::FOp.CmpGE"
          },
          {
            "name": "CmpSame",
            "doc": "",
            "type": "compiler::FOp.CmpSame"
          },
          {
            "name": "CmpNotSame",
            "doc": "",
            "type": "compiler::FOp.CmpNotSame"
          },
          {
            "name": "CmpNull",
            "doc": "",
            "type": "compiler::FOp.CmpNull"
          },
          {
            "name": "CmpNotNull",
            "doc": "",
            "type": "compiler::FOp.CmpNotNull"
          },
          {
            "name": "Return",
            "doc": "",
            "type": "compiler::FOp.Return"
          },
          {
            "name": "Pop",
            "doc": "",
            "type": "compiler::FOp.Pop"
          },
          {
            "name": "Dup",
            "doc": "",
            "type": "compiler::FOp.Dup"
          },
          {
            "name": "Is",
            "doc": "",
            "type": "compiler::FOp.Is"
          },
          {
            "name": "As",
            "doc": "",
            "type": "compiler::FOp.As"
          },
          {
            "name": "Coerce",
            "doc": "",
            "type": "compiler::FOp.Coerce"
          },
          {
            "name": "Switch",
            "doc": "",
            "type": "compiler::FOp.Switch"
          },
          {
            "name": "Throw",
            "doc": "",
            "type": "compiler::FOp.Throw"
          },
          {
            "name": "Leave",
            "doc": "",
            "type": "compiler::FOp.Leave"
          },
          {
            "name": "JumpFinally",
            "doc": "",
            "type": "compiler::FOp.JumpFinally"
          },
          {
            "name": "CatchAllStart",
            "doc": "",
            "type": "compiler::FOp.CatchAllStart"
          },
          {
            "name": "CatchErrStart",
            "doc": "",
            "type": "compiler::FOp.CatchErrStart"
          },
          {
            "name": "CatchEnd",
            "doc": "",
            "type": "compiler::FOp.CatchEnd"
          },
          {
            "name": "FinallyStart",
            "doc": "",
            "type": "compiler::FOp.FinallyStart"
          },
          {
            "name": "FinallyEnd",
            "doc": "",
            "type": "compiler::FOp.FinallyEnd"
          },
          {
            "name": "vals",
            "doc": "List of FOp values indexed by ordinal\n",
            "type": "compiler::FOp.vals"
          },
          {
            "name": "arg",
            "doc": "",
            "type": "compiler::FOp.arg"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Always returns name().\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the FOpArg instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::FOpArg?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "FOpArg",
        "doc": "FOpArg\n",
        "fields": [
          {
            "name": "None",
            "doc": "",
            "type": "compiler::FOpArg.None"
          },
          {
            "name": "Int",
            "doc": "",
            "type": "compiler::FOpArg.Int"
          },
          {
            "name": "Float",
            "doc": "",
            "type": "compiler::FOpArg.Float"
          },
          {
            "name": "Decimal",
            "doc": "",
            "type": "compiler::FOpArg.Decimal"
          },
          {
            "name": "Str",
            "doc": "",
            "type": "compiler::FOpArg.Str"
          },
          {
            "name": "Duration",
            "doc": "",
            "type": "compiler::FOpArg.Duration"
          },
          {
            "name": "Uri",
            "doc": "",
            "type": "compiler::FOpArg.Uri"
          },
          {
            "name": "Register",
            "doc": "",
            "type": "compiler::FOpArg.Register"
          },
          {
            "name": "TypeRef",
            "doc": "",
            "type": "compiler::FOpArg.TypeRef"
          },
          {
            "name": "FieldRef",
            "doc": "",
            "type": "compiler::FOpArg.FieldRef"
          },
          {
            "name": "MethodRef",
            "doc": "",
            "type": "compiler::FOpArg.MethodRef"
          },
          {
            "name": "Jump",
            "doc": "",
            "type": "compiler::FOpArg.Jump"
          },
          {
            "name": "TypePair",
            "doc": "",
            "type": "compiler::FOpArg.TypePair"
          },
          {
            "name": "vals",
            "doc": "List of FOpArg values indexed by ordinal\n",
            "type": "compiler::FOpArg.vals"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "makeStrs",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "makeTypeRefs",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "makeFieldRefs",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "makeMethodRefs",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "makeInts",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "makeFloats",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "makeDecimals",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "makeDurations",
            "doc": "",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              },
              {
                "name": "writer",
                "type": "|sys::OutStream,sys::Obj->sys::Void| writer"
              },
              {
                "name": "reader",
                "type": "|sys::InStream->sys::Obj| reader"
              }
            ]
          },
          {
            "name": "isEmpty",
            "doc": "Return if this table is empty\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "get",
            "doc": "Get the object identified by the specified 16-bit index.\n",
            "returns": "sys::Obj",
            "params": [
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          },
          {
            "name": "add",
            "doc": "Perform a reverse lookup to map a value to it's index (only\navailable at compile time).  If the value isn't in the table\nyet, then add it.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "val",
                "type": "sys::Obj val"
              }
            ]
          },
          {
            "name": "read",
            "doc": "Serialize.\n",
            "returns": "compiler::FTable",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream? in"
              }
            ]
          },
          {
            "name": "write",
            "doc": "Deserialize.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          }
        ],
        "name": "FTable",
        "doc": "FTable is a 16-bit indexed lookup table for pod constants.\n",
        "fields": [
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::FTable.pod"
          },
          {
            "name": "table",
            "doc": "",
            "type": "compiler::FTable.table"
          },
          {
            "name": "reverse",
            "doc": "",
            "type": "compiler::FTable.reverse"
          },
          {
            "name": "writer",
            "doc": "",
            "type": "compiler::FTable.writer"
          },
          {
            "name": "reader",
            "doc": "",
            "type": "compiler::FTable.reader"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "init",
            "doc": "Once the sub class is initialized, it must call this\nmethod to initialize our all predefined values.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "genericParam",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "sysType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "sysMethod",
            "doc": "",
            "returns": "compiler::CMethod",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "cleanup",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "resolveBridge",
            "doc": "",
            "returns": "compiler::CBridge",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "findBridge",
            "doc": "Subclass hook to resolve a FFI name to a CBridge implementation.\nThrow CompilerErr if there is a problem resolving the bridge.\nThe default implementation attempts to resolve the indexed\nproperty \"compiler.bridge.$name\" to a Type qname.\n",
            "returns": "compiler::CBridge",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "resolvePod",
            "doc": "Attempt to import the specified pod name against our\ndependency library.  If not found then throw CompilerErr.\n",
            "returns": "compiler::CPod",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "findPod",
            "doc": "Subclass hook to resolve a pod name to a CPod implementation.\nReturn null if not found.\n",
            "returns": "compiler::CPod?",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              }
            ]
          },
          {
            "name": "resolveType",
            "doc": "Attempt resolve a signature against our dependency\nlibrary.  If not a valid signature or it can't be\nresolved, then throw Err.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "sig",
                "type": "sys::Str sig"
              }
            ]
          },
          {
            "name": "resolveSlot",
            "doc": "Attempt resolve a slot against our dependency\nlibrary.  If can't be resolved, then throw Err.\n",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "genericParameter",
            "doc": "Map one of the generic parameter types such as \"sys::V\" into a CType\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "id",
                "type": "sys::Str id"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "CNamespace",
        "doc": "CNamespace is responsible for providing a unified view pods, types,\nand slots between the entities currently being compiled and the\nentities being imported from pre-compiled pods.\n",
        "fields": [
          {
            "name": "bridgeCache",
            "doc": "",
            "type": "compiler::CNamespace.bridgeCache"
          },
          {
            "name": "podCache",
            "doc": "",
            "type": "compiler::CNamespace.podCache"
          },
          {
            "name": "typeCache",
            "doc": "",
            "type": "compiler::CNamespace.typeCache"
          },
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CNamespace.c"
          },
          {
            "name": "depends",
            "doc": "Map of dependencies keyed by pod name set in ResolveDepends.\n",
            "type": "compiler::CNamespace.depends"
          },
          {
            "name": "sysPod",
            "doc": "",
            "type": "compiler::CNamespace.sysPod"
          },
          {
            "name": "genericParams",
            "doc": "",
            "type": "compiler::CNamespace.genericParams"
          },
          {
            "name": "error",
            "doc": "",
            "type": "compiler::CNamespace.error"
          },
          {
            "name": "nothingType",
            "doc": "",
            "type": "compiler::CNamespace.nothingType"
          },
          {
            "name": "itBlockType",
            "doc": "",
            "type": "compiler::CNamespace.itBlockType"
          },
          {
            "name": "objType",
            "doc": "",
            "type": "compiler::CNamespace.objType"
          },
          {
            "name": "boolType",
            "doc": "",
            "type": "compiler::CNamespace.boolType"
          },
          {
            "name": "enumType",
            "doc": "",
            "type": "compiler::CNamespace.enumType"
          },
          {
            "name": "facetType",
            "doc": "",
            "type": "compiler::CNamespace.facetType"
          },
          {
            "name": "intType",
            "doc": "",
            "type": "compiler::CNamespace.intType"
          },
          {
            "name": "floatType",
            "doc": "",
            "type": "compiler::CNamespace.floatType"
          },
          {
            "name": "decimalType",
            "doc": "",
            "type": "compiler::CNamespace.decimalType"
          },
          {
            "name": "strType",
            "doc": "",
            "type": "compiler::CNamespace.strType"
          },
          {
            "name": "strBufType",
            "doc": "",
            "type": "compiler::CNamespace.strBufType"
          },
          {
            "name": "durationType",
            "doc": "",
            "type": "compiler::CNamespace.durationType"
          },
          {
            "name": "listType",
            "doc": "",
            "type": "compiler::CNamespace.listType"
          },
          {
            "name": "mapType",
            "doc": "",
            "type": "compiler::CNamespace.mapType"
          },
          {
            "name": "funcType",
            "doc": "",
            "type": "compiler::CNamespace.funcType"
          },
          {
            "name": "errType",
            "doc": "",
            "type": "compiler::CNamespace.errType"
          },
          {
            "name": "podType",
            "doc": "",
            "type": "compiler::CNamespace.podType"
          },
          {
            "name": "typeType",
            "doc": "",
            "type": "compiler::CNamespace.typeType"
          },
          {
            "name": "slotType",
            "doc": "",
            "type": "compiler::CNamespace.slotType"
          },
          {
            "name": "fieldType",
            "doc": "",
            "type": "compiler::CNamespace.fieldType"
          },
          {
            "name": "methodType",
            "doc": "",
            "type": "compiler::CNamespace.methodType"
          },
          {
            "name": "rangeType",
            "doc": "",
            "type": "compiler::CNamespace.rangeType"
          },
          {
            "name": "testType",
            "doc": "",
            "type": "compiler::CNamespace.testType"
          },
          {
            "name": "uriType",
            "doc": "",
            "type": "compiler::CNamespace.uriType"
          },
          {
            "name": "voidType",
            "doc": "",
            "type": "compiler::CNamespace.voidType"
          },
          {
            "name": "fieldNotSetErrType",
            "doc": "",
            "type": "compiler::CNamespace.fieldNotSetErrType"
          },
          {
            "name": "notImmutableErrType",
            "doc": "",
            "type": "compiler::CNamespace.notImmutableErrType"
          },
          {
            "name": "objTrap",
            "doc": "",
            "type": "compiler::CNamespace.objTrap"
          },
          {
            "name": "objWith",
            "doc": "",
            "type": "compiler::CNamespace.objWith"
          },
          {
            "name": "objToImmutable",
            "doc": "",
            "type": "compiler::CNamespace.objToImmutable"
          },
          {
            "name": "boolNot",
            "doc": "",
            "type": "compiler::CNamespace.boolNot"
          },
          {
            "name": "intIncrement",
            "doc": "",
            "type": "compiler::CNamespace.intIncrement"
          },
          {
            "name": "intDecrement",
            "doc": "",
            "type": "compiler::CNamespace.intDecrement"
          },
          {
            "name": "intPlus",
            "doc": "",
            "type": "compiler::CNamespace.intPlus"
          },
          {
            "name": "floatPlus",
            "doc": "",
            "type": "compiler::CNamespace.floatPlus"
          },
          {
            "name": "floatMinus",
            "doc": "",
            "type": "compiler::CNamespace.floatMinus"
          },
          {
            "name": "strPlus",
            "doc": "",
            "type": "compiler::CNamespace.strPlus"
          },
          {
            "name": "strBufMake",
            "doc": "",
            "type": "compiler::CNamespace.strBufMake"
          },
          {
            "name": "strBufAdd",
            "doc": "",
            "type": "compiler::CNamespace.strBufAdd"
          },
          {
            "name": "strBufToStr",
            "doc": "",
            "type": "compiler::CNamespace.strBufToStr"
          },
          {
            "name": "listMake",
            "doc": "",
            "type": "compiler::CNamespace.listMake"
          },
          {
            "name": "listMakeObj",
            "doc": "",
            "type": "compiler::CNamespace.listMakeObj"
          },
          {
            "name": "listAdd",
            "doc": "",
            "type": "compiler::CNamespace.listAdd"
          },
          {
            "name": "mapMake",
            "doc": "",
            "type": "compiler::CNamespace.mapMake"
          },
          {
            "name": "mapSet",
            "doc": "",
            "type": "compiler::CNamespace.mapSet"
          },
          {
            "name": "enumOrdinal",
            "doc": "",
            "type": "compiler::CNamespace.enumOrdinal"
          },
          {
            "name": "funcBind",
            "doc": "",
            "type": "compiler::CNamespace.funcBind"
          },
          {
            "name": "rangeMakeInclusive",
            "doc": "",
            "type": "compiler::CNamespace.rangeMakeInclusive"
          },
          {
            "name": "rangeMakeExclusive",
            "doc": "",
            "type": "compiler::CNamespace.rangeMakeExclusive"
          },
          {
            "name": "slotFindMethod",
            "doc": "",
            "type": "compiler::CNamespace.slotFindMethod"
          },
          {
            "name": "slotFindFunc",
            "doc": "",
            "type": "compiler::CNamespace.slotFindFunc"
          },
          {
            "name": "podFind",
            "doc": "",
            "type": "compiler::CNamespace.podFind"
          },
          {
            "name": "podLocale",
            "doc": "",
            "type": "compiler::CNamespace.podLocale"
          },
          {
            "name": "typePod",
            "doc": "",
            "type": "compiler::CNamespace.typePod"
          },
          {
            "name": "typeField",
            "doc": "",
            "type": "compiler::CNamespace.typeField"
          },
          {
            "name": "typeMethod",
            "doc": "",
            "type": "compiler::CNamespace.typeMethod"
          },
          {
            "name": "funcEnterCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcEnterCtor"
          },
          {
            "name": "funcExitCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcExitCtor"
          },
          {
            "name": "funcCheckInCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcCheckInCtor"
          },
          {
            "name": "funcCall",
            "doc": "",
            "type": "compiler::CNamespace.funcCall"
          },
          {
            "name": "fieldNotSetErrMake",
            "doc": "",
            "type": "compiler::CNamespace.fieldNotSetErrMake"
          },
          {
            "name": "notImmutableErrMake",
            "doc": "",
            "type": "compiler::CNamespace.notImmutableErrMake"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "init",
            "doc": "Once the sub class is initialized, it must call this\nmethod to initialize our all predefined values.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "genericParam",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "sysType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "sysMethod",
            "doc": "",
            "returns": "compiler::CMethod",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "cleanup",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "resolveBridge",
            "doc": "",
            "returns": "compiler::CBridge",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "findBridge",
            "doc": "Subclass hook to resolve a FFI name to a CBridge implementation.\nThrow CompilerErr if there is a problem resolving the bridge.\nThe default implementation attempts to resolve the indexed\nproperty \"compiler.bridge.$name\" to a Type qname.\n",
            "returns": "compiler::CBridge",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "resolvePod",
            "doc": "Attempt to import the specified pod name against our\ndependency library.  If not found then throw CompilerErr.\n",
            "returns": "compiler::CPod",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "findPod",
            "doc": "Map to an FPod\n",
            "returns": "compiler::FPod?",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              }
            ]
          },
          {
            "name": "resolveType",
            "doc": "Attempt resolve a signature against our dependency\nlibrary.  If not a valid signature or it can't be\nresolved, then throw Err.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "sig",
                "type": "sys::Str sig"
              }
            ]
          },
          {
            "name": "resolveSlot",
            "doc": "Attempt resolve a slot against our dependency\nlibrary.  If can't be resolved, then throw Err.\n",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "genericParameter",
            "doc": "Map one of the generic parameter types such as \"sys::V\" into a CType\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "id",
                "type": "sys::Str id"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Make a FPod namespace which looks in the specified directory\nto resolve pod files or null to delegate to 'Env.findPodFile'.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "dir",
                "type": "sys::File? dir"
              }
            ]
          }
        ],
        "name": "FPodNamespace",
        "doc": "FPodNamespace implements Namespace by reading the fcode\nfrom pods directly.  Its not as efficient as using reflection,\nbut lets us compile against a different pod set.\n",
        "fields": [
          {
            "name": "bridgeCache",
            "doc": "",
            "type": "compiler::CNamespace.bridgeCache"
          },
          {
            "name": "podCache",
            "doc": "",
            "type": "compiler::CNamespace.podCache"
          },
          {
            "name": "typeCache",
            "doc": "",
            "type": "compiler::CNamespace.typeCache"
          },
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CNamespace.c"
          },
          {
            "name": "depends",
            "doc": "Map of dependencies keyed by pod name set in ResolveDepends.\n",
            "type": "compiler::CNamespace.depends"
          },
          {
            "name": "sysPod",
            "doc": "",
            "type": "compiler::CNamespace.sysPod"
          },
          {
            "name": "genericParams",
            "doc": "",
            "type": "compiler::CNamespace.genericParams"
          },
          {
            "name": "error",
            "doc": "",
            "type": "compiler::CNamespace.error"
          },
          {
            "name": "nothingType",
            "doc": "",
            "type": "compiler::CNamespace.nothingType"
          },
          {
            "name": "itBlockType",
            "doc": "",
            "type": "compiler::CNamespace.itBlockType"
          },
          {
            "name": "objType",
            "doc": "",
            "type": "compiler::CNamespace.objType"
          },
          {
            "name": "boolType",
            "doc": "",
            "type": "compiler::CNamespace.boolType"
          },
          {
            "name": "enumType",
            "doc": "",
            "type": "compiler::CNamespace.enumType"
          },
          {
            "name": "facetType",
            "doc": "",
            "type": "compiler::CNamespace.facetType"
          },
          {
            "name": "intType",
            "doc": "",
            "type": "compiler::CNamespace.intType"
          },
          {
            "name": "floatType",
            "doc": "",
            "type": "compiler::CNamespace.floatType"
          },
          {
            "name": "decimalType",
            "doc": "",
            "type": "compiler::CNamespace.decimalType"
          },
          {
            "name": "strType",
            "doc": "",
            "type": "compiler::CNamespace.strType"
          },
          {
            "name": "strBufType",
            "doc": "",
            "type": "compiler::CNamespace.strBufType"
          },
          {
            "name": "durationType",
            "doc": "",
            "type": "compiler::CNamespace.durationType"
          },
          {
            "name": "listType",
            "doc": "",
            "type": "compiler::CNamespace.listType"
          },
          {
            "name": "mapType",
            "doc": "",
            "type": "compiler::CNamespace.mapType"
          },
          {
            "name": "funcType",
            "doc": "",
            "type": "compiler::CNamespace.funcType"
          },
          {
            "name": "errType",
            "doc": "",
            "type": "compiler::CNamespace.errType"
          },
          {
            "name": "podType",
            "doc": "",
            "type": "compiler::CNamespace.podType"
          },
          {
            "name": "typeType",
            "doc": "",
            "type": "compiler::CNamespace.typeType"
          },
          {
            "name": "slotType",
            "doc": "",
            "type": "compiler::CNamespace.slotType"
          },
          {
            "name": "fieldType",
            "doc": "",
            "type": "compiler::CNamespace.fieldType"
          },
          {
            "name": "methodType",
            "doc": "",
            "type": "compiler::CNamespace.methodType"
          },
          {
            "name": "rangeType",
            "doc": "",
            "type": "compiler::CNamespace.rangeType"
          },
          {
            "name": "testType",
            "doc": "",
            "type": "compiler::CNamespace.testType"
          },
          {
            "name": "uriType",
            "doc": "",
            "type": "compiler::CNamespace.uriType"
          },
          {
            "name": "voidType",
            "doc": "",
            "type": "compiler::CNamespace.voidType"
          },
          {
            "name": "fieldNotSetErrType",
            "doc": "",
            "type": "compiler::CNamespace.fieldNotSetErrType"
          },
          {
            "name": "notImmutableErrType",
            "doc": "",
            "type": "compiler::CNamespace.notImmutableErrType"
          },
          {
            "name": "objTrap",
            "doc": "",
            "type": "compiler::CNamespace.objTrap"
          },
          {
            "name": "objWith",
            "doc": "",
            "type": "compiler::CNamespace.objWith"
          },
          {
            "name": "objToImmutable",
            "doc": "",
            "type": "compiler::CNamespace.objToImmutable"
          },
          {
            "name": "boolNot",
            "doc": "",
            "type": "compiler::CNamespace.boolNot"
          },
          {
            "name": "intIncrement",
            "doc": "",
            "type": "compiler::CNamespace.intIncrement"
          },
          {
            "name": "intDecrement",
            "doc": "",
            "type": "compiler::CNamespace.intDecrement"
          },
          {
            "name": "intPlus",
            "doc": "",
            "type": "compiler::CNamespace.intPlus"
          },
          {
            "name": "floatPlus",
            "doc": "",
            "type": "compiler::CNamespace.floatPlus"
          },
          {
            "name": "floatMinus",
            "doc": "",
            "type": "compiler::CNamespace.floatMinus"
          },
          {
            "name": "strPlus",
            "doc": "",
            "type": "compiler::CNamespace.strPlus"
          },
          {
            "name": "strBufMake",
            "doc": "",
            "type": "compiler::CNamespace.strBufMake"
          },
          {
            "name": "strBufAdd",
            "doc": "",
            "type": "compiler::CNamespace.strBufAdd"
          },
          {
            "name": "strBufToStr",
            "doc": "",
            "type": "compiler::CNamespace.strBufToStr"
          },
          {
            "name": "listMake",
            "doc": "",
            "type": "compiler::CNamespace.listMake"
          },
          {
            "name": "listMakeObj",
            "doc": "",
            "type": "compiler::CNamespace.listMakeObj"
          },
          {
            "name": "listAdd",
            "doc": "",
            "type": "compiler::CNamespace.listAdd"
          },
          {
            "name": "mapMake",
            "doc": "",
            "type": "compiler::CNamespace.mapMake"
          },
          {
            "name": "mapSet",
            "doc": "",
            "type": "compiler::CNamespace.mapSet"
          },
          {
            "name": "enumOrdinal",
            "doc": "",
            "type": "compiler::CNamespace.enumOrdinal"
          },
          {
            "name": "funcBind",
            "doc": "",
            "type": "compiler::CNamespace.funcBind"
          },
          {
            "name": "rangeMakeInclusive",
            "doc": "",
            "type": "compiler::CNamespace.rangeMakeInclusive"
          },
          {
            "name": "rangeMakeExclusive",
            "doc": "",
            "type": "compiler::CNamespace.rangeMakeExclusive"
          },
          {
            "name": "slotFindMethod",
            "doc": "",
            "type": "compiler::CNamespace.slotFindMethod"
          },
          {
            "name": "slotFindFunc",
            "doc": "",
            "type": "compiler::CNamespace.slotFindFunc"
          },
          {
            "name": "podFind",
            "doc": "",
            "type": "compiler::CNamespace.podFind"
          },
          {
            "name": "podLocale",
            "doc": "",
            "type": "compiler::CNamespace.podLocale"
          },
          {
            "name": "typePod",
            "doc": "",
            "type": "compiler::CNamespace.typePod"
          },
          {
            "name": "typeField",
            "doc": "",
            "type": "compiler::CNamespace.typeField"
          },
          {
            "name": "typeMethod",
            "doc": "",
            "type": "compiler::CNamespace.typeMethod"
          },
          {
            "name": "funcEnterCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcEnterCtor"
          },
          {
            "name": "funcExitCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcExitCtor"
          },
          {
            "name": "funcCheckInCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcCheckInCtor"
          },
          {
            "name": "funcCall",
            "doc": "",
            "type": "compiler::CNamespace.funcCall"
          },
          {
            "name": "fieldNotSetErrMake",
            "doc": "",
            "type": "compiler::CNamespace.fieldNotSetErrMake"
          },
          {
            "name": "notImmutableErrMake",
            "doc": "",
            "type": "compiler::CNamespace.notImmutableErrMake"
          },
          {
            "name": "dir",
            "doc": "where to look for pod or null to delegate to Env.findPodFile\n",
            "type": "compiler::FPodNamespace.dir"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CNamespace"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "execute",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "target",
                "type": "sys::Str target"
              }
            ]
          },
          {
            "name": "executeFile",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "target",
                "type": "sys::Str? target"
              }
            ]
          },
          {
            "name": "printPod",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "pod",
                "type": "sys::Pod pod"
              }
            ]
          },
          {
            "name": "printType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              }
            ]
          },
          {
            "name": "printSlot",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "slot",
                "type": "sys::Slot slot"
              }
            ]
          },
          {
            "name": "printer",
            "doc": "",
            "returns": "compiler::FPrinter",
            "params": [
              {
                "name": "pod",
                "type": "sys::Pod pod"
              }
            ]
          },
          {
            "name": "fpod",
            "doc": "",
            "returns": "compiler::FPod",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              }
            ]
          },
          {
            "name": "ftype",
            "doc": "",
            "returns": "compiler::FType",
            "params": [
              {
                "name": "pod",
                "type": "compiler::FPod pod"
              },
              {
                "name": "typeName",
                "type": "sys::Str typeName"
              }
            ]
          },
          {
            "name": "fslot",
            "doc": "",
            "returns": "compiler::FSlot",
            "params": [
              {
                "name": "ftype",
                "type": "compiler::FType ftype"
              },
              {
                "name": "slotName",
                "type": "sys::Str slotName"
              }
            ]
          },
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "args",
                "type": "sys::Str[] args"
              }
            ]
          },
          {
            "name": "help",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "Fanp",
        "doc": "Fantom Disassembler\n",
        "fields": [
          {
            "name": "compiler",
            "doc": "",
            "type": "compiler::Fanp.compiler"
          },
          {
            "name": "showTables",
            "doc": "",
            "type": "compiler::Fanp.showTables"
          },
          {
            "name": "showCode",
            "doc": "",
            "type": "compiler::Fanp.showCode"
          },
          {
            "name": "showLines",
            "doc": "",
            "type": "compiler::Fanp.showLines"
          },
          {
            "name": "showIndex",
            "doc": "",
            "type": "compiler::Fanp.showIndex"
          },
          {
            "name": "file",
            "doc": "",
            "type": "compiler::Fanp.file"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::FPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "Does this type implement the specified type.  If true, then\nthis type is assignable to the specified type (although the\nconverse is not necessarily true).  All types (including\nmixin types) fit sys::Obj.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "Is this a valid type usable anywhere (such as local var)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "fpod",
                "type": "compiler::FPod fpod"
              }
            ]
          },
          {
            "name": "attr",
            "doc": "",
            "returns": "compiler::FAttr?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "reflect",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inherit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "writeMeta",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "readMeta",
            "doc": "",
            "returns": "sys::This",
            "params": [
              {
                "name": "in",
                "type": "sys::InStream in"
              }
            ]
          },
          {
            "name": "uri",
            "doc": "",
            "returns": "sys::Uri",
            "params": [

            ]
          },
          {
            "name": "write",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "read",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null
        ],
        "name": "FType",
        "doc": "FType is the read/write fcode representation of sys::Type.\n",
        "fields": [
          {
            "name": "base",
            "doc": "",
            "type": "compiler::FType.base"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::FType.flags"
          },
          {
            "name": "slotsCached",
            "doc": "",
            "type": "compiler::FType.slotsCached"
          },
          {
            "name": "hollow",
            "doc": "",
            "type": "compiler::FType.hollow"
          },
          {
            "name": "fpod",
            "doc": "",
            "type": "compiler::FType.fpod"
          },
          {
            "name": "self",
            "doc": "",
            "type": "compiler::FType.self"
          },
          {
            "name": "fbase",
            "doc": "",
            "type": "compiler::FType.fbase"
          },
          {
            "name": "fmixins",
            "doc": "",
            "type": "compiler::FType.fmixins"
          },
          {
            "name": "ffields",
            "doc": "",
            "type": "compiler::FType.ffields"
          },
          {
            "name": "fmethods",
            "doc": "",
            "type": "compiler::FType.fmethods"
          },
          {
            "name": "fattrs",
            "doc": "",
            "type": "compiler::FType.fattrs"
          },
          {
            "name": "ffacets",
            "doc": "",
            "type": "compiler::FType.ffacets"
          },
          {
            "name": "name$Store",
            "doc": "",
            "type": "compiler::FType.name$Store"
          },
          {
            "name": "qname$Store",
            "doc": "",
            "type": "compiler::FType.qname$Store"
          },
          {
            "name": "mixins$Store",
            "doc": "",
            "type": "compiler::FType.mixins$Store"
          },
          {
            "name": "isVal$Store",
            "doc": "",
            "type": "compiler::FType.isVal$Store"
          },
          {
            "name": "operators$Store",
            "doc": "",
            "type": "compiler::FType.operators$Store"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::FType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::FType.toListOf$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "Construct for given parent type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "compiler::CType parent"
              }
            ]
          },
          {
            "name": "toPrefix",
            "doc": "Given a method name get the operator prefix:\n  \"plus\"     =>  \"plus\"\n  \"plusInt\"  =>  \"plus\"\n  \"fooBar\"   =>  null\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "methodName",
                "type": "sys::Str methodName"
              }
            ]
          },
          {
            "name": "find",
            "doc": "Get operators defined for prefix.  For example:\n  find(\"plus\") => [plus, plusFloat, plusDecimal]\n",
            "returns": "compiler::CMethod[]",
            "params": [
              {
                "name": "prefix",
                "type": "sys::Str prefix"
              }
            ]
          },
          null,
          null
        ],
        "name": "COperators",
        "doc": "COperators is used to manage methods annoated with the\nOperator facet for efficient operator method resolution.\n",
        "fields": [
          {
            "name": "prefixes",
            "doc": "",
            "type": "compiler::COperators.prefixes"
          },
          {
            "name": "exacts",
            "doc": "",
            "type": "compiler::COperators.exacts"
          },
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::COperators.parent"
          },
          {
            "name": "byPrefix",
            "doc": "",
            "type": "compiler::COperators.byPrefix"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "parent",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "",
            "returns": "sys::Slot",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          null
        ],
        "name": "ReflectSlot",
        "doc": "ReflectSlot is the implementation of CSlot for a slot imported\nfrom a precompiled pod (as opposed to a SlotDef within the\ncompilation units being compiled).\n",
        "fields": [
          {
            "name": "flags$Store",
            "doc": "",
            "type": "compiler::ReflectSlot.flags$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this field covariantly override a method?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Is this field typed with a generic parameter.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this field the parameterization of a generic field,\nwith the generic type replaced with a real type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slot",
            "doc": "",
            "returns": "sys::Slot",
            "params": [

            ]
          },
          null,
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::ReflectNamespace ns"
              },
              {
                "name": "parent",
                "type": "compiler::CType parent"
              },
              {
                "name": "f",
                "type": "sys::Field f"
              }
            ]
          }
        ],
        "name": "ReflectField",
        "doc": "ReflectField\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::ReflectField.ns"
          },
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::ReflectField.parent"
          },
          {
            "name": "fieldType",
            "doc": "",
            "type": "compiler::ReflectField.fieldType"
          },
          {
            "name": "getter",
            "doc": "",
            "type": "compiler::ReflectField.getter"
          },
          {
            "name": "setter",
            "doc": "",
            "type": "compiler::ReflectField.setter"
          },
          {
            "name": "flags$Store",
            "doc": "",
            "type": "compiler::ReflectSlot.flags$Store"
          },
          {
            "name": "f",
            "doc": "",
            "type": "compiler::ReflectField.f"
          }
        ],
        "facets": [

        ],
        "base": "compiler::ReflectSlot"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this method have a covariant return type (we\ndon't count This returns as covariant)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this method the parameterization of a generic method,\nwith all the generic parameters filled in with real types.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "generic",
            "doc": "If isParameterized is true, then return the generic\nmethod which this method parameterizes, otherwise null\n",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "calcGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "compiler::CMethod m"
              }
            ]
          },
          {
            "name": "nameAndParamTypesToStr",
            "doc": "Return a string with the name and parameters.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasSameParams",
            "doc": "Return if this method has the exact same parameters as\nthe specified method.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::CMethod that"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "",
            "returns": "sys::Slot",
            "params": [

            ]
          },
          null,
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::ReflectNamespace ns"
              },
              {
                "name": "parent",
                "type": "compiler::CType parent"
              },
              {
                "name": "m",
                "type": "sys::Method m"
              }
            ]
          }
        ],
        "name": "ReflectMethod",
        "doc": "ReflectMethod\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::ReflectMethod.ns"
          },
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::ReflectMethod.parent"
          },
          {
            "name": "returnType",
            "doc": "",
            "type": "compiler::ReflectMethod.returnType"
          },
          {
            "name": "params",
            "doc": "",
            "type": "compiler::ReflectMethod.params"
          },
          {
            "name": "isGeneric",
            "doc": "",
            "type": "compiler::ReflectMethod.isGeneric"
          },
          {
            "name": "flags$Store",
            "doc": "",
            "type": "compiler::ReflectSlot.flags$Store"
          },
          {
            "name": "m",
            "doc": "",
            "type": "compiler::ReflectMethod.m"
          }
        ],
        "facets": [

        ],
        "base": "compiler::ReflectSlot"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasDefault",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::ReflectNamespace ns"
              },
              {
                "name": "p",
                "type": "sys::Param p"
              }
            ]
          }
        ],
        "name": "ReflectParam",
        "doc": "ReflectParam\n",
        "fields": [
          {
            "name": "paramType",
            "doc": "",
            "type": "compiler::ReflectParam.paramType"
          },
          {
            "name": "p",
            "doc": "",
            "type": "compiler::ReflectParam.p"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "get",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "map",
            "doc": "",
            "returns": "compiler::ReflectFacet?",
            "params": [
              {
                "name": "ns",
                "type": "compiler::ReflectNamespace ns"
              },
              {
                "name": "f",
                "type": "sys::Facet? f"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "sys::Facet f"
              }
            ]
          }
        ],
        "name": "ReflectFacet",
        "doc": "ReflectFacet\n",
        "fields": [
          {
            "name": "f",
            "doc": "",
            "type": "compiler::ReflectFacet.f"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on pod name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on name.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return name\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "version",
            "doc": "",
            "returns": "sys::Version",
            "params": [

            ]
          },
          {
            "name": "depends",
            "doc": "",
            "returns": "compiler::CDepend[]",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "file",
            "doc": "",
            "returns": "sys::File",
            "params": [

            ]
          },
          {
            "name": "meta",
            "doc": "",
            "returns": "[sys::Str:sys::Str]",
            "params": [

            ]
          },
          {
            "name": "hasJs",
            "doc": "Return if this pod has client side JavaScript\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "resolveType",
            "doc": "",
            "returns": "compiler::ReflectType?",
            "params": [
              {
                "name": "typeName",
                "type": "sys::Str typeName"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface pod.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function interface return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::ReflectNamespace ns"
              },
              {
                "name": "pod",
                "type": "sys::Pod pod"
              }
            ]
          },
          null,
          null,
          null
        ],
        "name": "ReflectPod",
        "doc": "ReflectPod is the CPod wrapper for a dependent Pod loaded via reflection.\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::ReflectPod.ns"
          },
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::ReflectPod.pod"
          },
          {
            "name": "typeMap",
            "doc": "",
            "type": "compiler::ReflectPod.typeMap"
          },
          {
            "name": "loadedAllTypes",
            "doc": "",
            "type": "compiler::ReflectPod.loadedAllTypes"
          },
          {
            "name": "depends$Store",
            "doc": "",
            "type": "compiler::ReflectPod.depends$Store"
          },
          {
            "name": "file$Store",
            "doc": "",
            "type": "compiler::ReflectPod.file$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::ReflectNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "fits",
            "doc": "Does this type implement the specified type.  If true, then\nthis type is assignable to the specified type (although the\nconverse is not necessarily true).  All types (including\nmixin types) fit sys::Obj.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "Is this a valid type usable anywhere (such as local var)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Construct with loaded Type.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::ReflectNamespace ns"
              },
              {
                "name": "t",
                "type": "sys::Type t"
              }
            ]
          },
          null,
          null,
          null,
          null
        ],
        "name": "ReflectType",
        "doc": "ReflectType is the implementation of CType for a type imported\nfrom a precompiled pod (as opposed to a TypeDef within the compilation\nunits being compiled).\n",
        "fields": [
          {
            "name": "pod",
            "doc": "",
            "type": "compiler::ReflectType.pod"
          },
          {
            "name": "isVal",
            "doc": "",
            "type": "compiler::ReflectType.isVal"
          },
          {
            "name": "base",
            "doc": "",
            "type": "compiler::ReflectType.base"
          },
          {
            "name": "mixins",
            "doc": "",
            "type": "compiler::ReflectType.mixins"
          },
          {
            "name": "t",
            "doc": "",
            "type": "compiler::ReflectType.t"
          },
          {
            "name": "slotMap",
            "doc": "",
            "type": "compiler::ReflectType.slotMap"
          },
          {
            "name": "slotsLoaded",
            "doc": "",
            "type": "compiler::ReflectType.slotsLoaded"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::ReflectType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::ReflectType.toListOf$Store"
          },
          {
            "name": "operators$Store",
            "doc": "",
            "type": "compiler::ReflectType.operators$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "get",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          }
        ],
        "name": "MarkerFacet",
        "doc": "Simple implementation for a marker facet\n",
        "fields": [
          {
            "name": "qname",
            "doc": "",
            "type": "compiler::MarkerFacet.qname"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "init",
            "doc": "Once the sub class is initialized, it must call this\nmethod to initialize our all predefined values.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "genericParam",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "sysType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "sysMethod",
            "doc": "",
            "returns": "compiler::CMethod",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "cleanup",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "resolveBridge",
            "doc": "",
            "returns": "compiler::CBridge",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "findBridge",
            "doc": "Subclass hook to resolve a FFI name to a CBridge implementation.\nThrow CompilerErr if there is a problem resolving the bridge.\nThe default implementation attempts to resolve the indexed\nproperty \"compiler.bridge.$name\" to a Type qname.\n",
            "returns": "compiler::CBridge",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "resolvePod",
            "doc": "Attempt to import the specified pod name against our\ndependency library.  If not found then throw CompilerErr.\n",
            "returns": "compiler::CPod",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "findPod",
            "doc": "Map an imported Pod into a CPod\n",
            "returns": "compiler::ReflectPod?",
            "params": [
              {
                "name": "podName",
                "type": "sys::Str podName"
              }
            ]
          },
          {
            "name": "resolveType",
            "doc": "Attempt resolve a signature against our dependency\nlibrary.  If not a valid signature or it can't be\nresolved, then throw Err.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "sig",
                "type": "sys::Str sig"
              }
            ]
          },
          {
            "name": "resolveSlot",
            "doc": "Attempt resolve a slot against our dependency\nlibrary.  If can't be resolved, then throw Err.\n",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "genericParameter",
            "doc": "Map one of the generic parameter types such as \"sys::V\" into a CType\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "id",
                "type": "sys::Str id"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Construct a ReflectNamespace\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "importPod",
            "doc": "Map an imported Pod into a CPod\n",
            "returns": "compiler::ReflectPod",
            "params": [
              {
                "name": "pod",
                "type": "sys::Pod pod"
              }
            ]
          },
          {
            "name": "importType",
            "doc": "Map an imported Type into a CType\n",
            "returns": "compiler::CType?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type? t"
              }
            ]
          },
          {
            "name": "importTypes",
            "doc": "Map a list of imported Types into a CTypes\n",
            "returns": "compiler::CType[]",
            "params": [
              {
                "name": "t",
                "type": "sys::Type[] t"
              }
            ]
          },
          {
            "name": "importSlot",
            "doc": "Map an imported Slot into a CSlot\n",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "slot",
                "type": "sys::Slot slot"
              }
            ]
          },
          {
            "name": "importField",
            "doc": "Map an imported Field into a CField\n",
            "returns": "compiler::CField",
            "params": [
              {
                "name": "f",
                "type": "sys::Field f"
              }
            ]
          },
          {
            "name": "importMethod",
            "doc": "Map an imported Method into a CMethod\n",
            "returns": "compiler::CMethod",
            "params": [
              {
                "name": "m",
                "type": "sys::Method m"
              }
            ]
          }
        ],
        "name": "ReflectNamespace",
        "doc": "ReflectNamespace implements Namespace using reflection to\ncompile against the VM's current pod repository.\n",
        "fields": [
          {
            "name": "bridgeCache",
            "doc": "",
            "type": "compiler::CNamespace.bridgeCache"
          },
          {
            "name": "podCache",
            "doc": "",
            "type": "compiler::CNamespace.podCache"
          },
          {
            "name": "typeCache",
            "doc": "",
            "type": "compiler::CNamespace.typeCache"
          },
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CNamespace.c"
          },
          {
            "name": "depends",
            "doc": "Map of dependencies keyed by pod name set in ResolveDepends.\n",
            "type": "compiler::CNamespace.depends"
          },
          {
            "name": "sysPod",
            "doc": "",
            "type": "compiler::CNamespace.sysPod"
          },
          {
            "name": "genericParams",
            "doc": "",
            "type": "compiler::CNamespace.genericParams"
          },
          {
            "name": "error",
            "doc": "",
            "type": "compiler::CNamespace.error"
          },
          {
            "name": "nothingType",
            "doc": "",
            "type": "compiler::CNamespace.nothingType"
          },
          {
            "name": "itBlockType",
            "doc": "",
            "type": "compiler::CNamespace.itBlockType"
          },
          {
            "name": "objType",
            "doc": "",
            "type": "compiler::CNamespace.objType"
          },
          {
            "name": "boolType",
            "doc": "",
            "type": "compiler::CNamespace.boolType"
          },
          {
            "name": "enumType",
            "doc": "",
            "type": "compiler::CNamespace.enumType"
          },
          {
            "name": "facetType",
            "doc": "",
            "type": "compiler::CNamespace.facetType"
          },
          {
            "name": "intType",
            "doc": "",
            "type": "compiler::CNamespace.intType"
          },
          {
            "name": "floatType",
            "doc": "",
            "type": "compiler::CNamespace.floatType"
          },
          {
            "name": "decimalType",
            "doc": "",
            "type": "compiler::CNamespace.decimalType"
          },
          {
            "name": "strType",
            "doc": "",
            "type": "compiler::CNamespace.strType"
          },
          {
            "name": "strBufType",
            "doc": "",
            "type": "compiler::CNamespace.strBufType"
          },
          {
            "name": "durationType",
            "doc": "",
            "type": "compiler::CNamespace.durationType"
          },
          {
            "name": "listType",
            "doc": "",
            "type": "compiler::CNamespace.listType"
          },
          {
            "name": "mapType",
            "doc": "",
            "type": "compiler::CNamespace.mapType"
          },
          {
            "name": "funcType",
            "doc": "",
            "type": "compiler::CNamespace.funcType"
          },
          {
            "name": "errType",
            "doc": "",
            "type": "compiler::CNamespace.errType"
          },
          {
            "name": "podType",
            "doc": "",
            "type": "compiler::CNamespace.podType"
          },
          {
            "name": "typeType",
            "doc": "",
            "type": "compiler::CNamespace.typeType"
          },
          {
            "name": "slotType",
            "doc": "",
            "type": "compiler::CNamespace.slotType"
          },
          {
            "name": "fieldType",
            "doc": "",
            "type": "compiler::CNamespace.fieldType"
          },
          {
            "name": "methodType",
            "doc": "",
            "type": "compiler::CNamespace.methodType"
          },
          {
            "name": "rangeType",
            "doc": "",
            "type": "compiler::CNamespace.rangeType"
          },
          {
            "name": "testType",
            "doc": "",
            "type": "compiler::CNamespace.testType"
          },
          {
            "name": "uriType",
            "doc": "",
            "type": "compiler::CNamespace.uriType"
          },
          {
            "name": "voidType",
            "doc": "",
            "type": "compiler::CNamespace.voidType"
          },
          {
            "name": "fieldNotSetErrType",
            "doc": "",
            "type": "compiler::CNamespace.fieldNotSetErrType"
          },
          {
            "name": "notImmutableErrType",
            "doc": "",
            "type": "compiler::CNamespace.notImmutableErrType"
          },
          {
            "name": "objTrap",
            "doc": "",
            "type": "compiler::CNamespace.objTrap"
          },
          {
            "name": "objWith",
            "doc": "",
            "type": "compiler::CNamespace.objWith"
          },
          {
            "name": "objToImmutable",
            "doc": "",
            "type": "compiler::CNamespace.objToImmutable"
          },
          {
            "name": "boolNot",
            "doc": "",
            "type": "compiler::CNamespace.boolNot"
          },
          {
            "name": "intIncrement",
            "doc": "",
            "type": "compiler::CNamespace.intIncrement"
          },
          {
            "name": "intDecrement",
            "doc": "",
            "type": "compiler::CNamespace.intDecrement"
          },
          {
            "name": "intPlus",
            "doc": "",
            "type": "compiler::CNamespace.intPlus"
          },
          {
            "name": "floatPlus",
            "doc": "",
            "type": "compiler::CNamespace.floatPlus"
          },
          {
            "name": "floatMinus",
            "doc": "",
            "type": "compiler::CNamespace.floatMinus"
          },
          {
            "name": "strPlus",
            "doc": "",
            "type": "compiler::CNamespace.strPlus"
          },
          {
            "name": "strBufMake",
            "doc": "",
            "type": "compiler::CNamespace.strBufMake"
          },
          {
            "name": "strBufAdd",
            "doc": "",
            "type": "compiler::CNamespace.strBufAdd"
          },
          {
            "name": "strBufToStr",
            "doc": "",
            "type": "compiler::CNamespace.strBufToStr"
          },
          {
            "name": "listMake",
            "doc": "",
            "type": "compiler::CNamespace.listMake"
          },
          {
            "name": "listMakeObj",
            "doc": "",
            "type": "compiler::CNamespace.listMakeObj"
          },
          {
            "name": "listAdd",
            "doc": "",
            "type": "compiler::CNamespace.listAdd"
          },
          {
            "name": "mapMake",
            "doc": "",
            "type": "compiler::CNamespace.mapMake"
          },
          {
            "name": "mapSet",
            "doc": "",
            "type": "compiler::CNamespace.mapSet"
          },
          {
            "name": "enumOrdinal",
            "doc": "",
            "type": "compiler::CNamespace.enumOrdinal"
          },
          {
            "name": "funcBind",
            "doc": "",
            "type": "compiler::CNamespace.funcBind"
          },
          {
            "name": "rangeMakeInclusive",
            "doc": "",
            "type": "compiler::CNamespace.rangeMakeInclusive"
          },
          {
            "name": "rangeMakeExclusive",
            "doc": "",
            "type": "compiler::CNamespace.rangeMakeExclusive"
          },
          {
            "name": "slotFindMethod",
            "doc": "",
            "type": "compiler::CNamespace.slotFindMethod"
          },
          {
            "name": "slotFindFunc",
            "doc": "",
            "type": "compiler::CNamespace.slotFindFunc"
          },
          {
            "name": "podFind",
            "doc": "",
            "type": "compiler::CNamespace.podFind"
          },
          {
            "name": "podLocale",
            "doc": "",
            "type": "compiler::CNamespace.podLocale"
          },
          {
            "name": "typePod",
            "doc": "",
            "type": "compiler::CNamespace.typePod"
          },
          {
            "name": "typeField",
            "doc": "",
            "type": "compiler::CNamespace.typeField"
          },
          {
            "name": "typeMethod",
            "doc": "",
            "type": "compiler::CNamespace.typeMethod"
          },
          {
            "name": "funcEnterCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcEnterCtor"
          },
          {
            "name": "funcExitCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcExitCtor"
          },
          {
            "name": "funcCheckInCtor",
            "doc": "",
            "type": "compiler::CNamespace.funcCheckInCtor"
          },
          {
            "name": "funcCall",
            "doc": "",
            "type": "compiler::CNamespace.funcCall"
          },
          {
            "name": "fieldNotSetErrMake",
            "doc": "",
            "type": "compiler::CNamespace.fieldNotSetErrMake"
          },
          {
            "name": "notImmutableErrMake",
            "doc": "",
            "type": "compiler::CNamespace.notImmutableErrMake"
          },
          {
            "name": "pods",
            "doc": "",
            "type": "compiler::ReflectNamespace.pods"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CNamespace"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Constructor with associated compiler.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              }
            ]
          },
          {
            "name": "resolvePod",
            "doc": "Resolve the specified foreign namespace to a CPod.\nThrow a CompilerErr with appropriate message if name\ncannot be resolved.\n",
            "returns": "compiler::CPod",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "coerce",
            "doc": "Coerce the target expression to the specified type.  If\nthe expression is not type compatible run the onErr function.\nDefault implementation provides standard Fantom coercion.\n\nIf the bridge is going to coerce 'expr' into a new expression,\nthen it should mark the resulting expression as synthetic.\nA synthetic expression must be \"undoable\":\n  - TypeCheckExpr where target is uncoerced expr\n  - CallExpr where last argument is uncoerced expr\nSee ResolveExpr.resolveAssign for more details.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              },
              {
                "name": "expected",
                "type": "compiler::CType expected"
              },
              {
                "name": "onErr",
                "type": "|->sys::Void| onErr"
              }
            ]
          },
          {
            "name": "resolveConstruction",
            "doc": "Resolve a construction call.  Type check the arguments\nand insert any conversions needed.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "resolveConstructorChain",
            "doc": "Resolve a construction chain call where a Fantom constructor\ncalls the super-class constructor.  Type check the arguments\nand insert any conversions needed.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "resolveSlotAccess",
            "doc": "Given a dot operator slot access on the given foreign\nbase type, determine the appopriate slot to use based on\nwhether parens were used\n  base.name    =>  noParens = true\n  base.name()  =>  noParens = false\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "base",
                "type": "compiler::CType base"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "noParens",
                "type": "sys::Bool noParens"
              }
            ]
          },
          {
            "name": "resolveCall",
            "doc": "Resolve a method call.  Type check the arguments\nand insert any conversions needed.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "checkOverride",
            "doc": "Called during Inherit step when a Fantom slot overrides a FFI slot.\nLog and throw compiler error if there is a problem.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "base",
                "type": "compiler::CSlot base"
              },
              {
                "name": "def",
                "type": "compiler::SlotDef def"
              }
            ]
          },
          {
            "name": "checkType",
            "doc": "Called during CheckErrors step for a type which extends\na FFI class or implements any FFI mixins.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "cleanup",
            "doc": "Guaranteed cleanup hook\n",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "CBridge",
        "doc": "CBridge is the base class for compiler FFI plugins to expose\nexternal type systems to the Fantom compiler as CPods, CTypes, and\nCSlots.  Subclasses are registered for a FFI name with the\n\"compilerBridge\" facet and must declare a constructor with a\nCompiler arg.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "base",
            "doc": "",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "root",
                "type": "compiler::CType root"
              }
            ]
          },
          null,
          null
        ],
        "name": "NullableType",
        "doc": "NullableType wraps another CType as nullable with trailing \"?\".\n",
        "fields": [
          {
            "name": "signature",
            "doc": "",
            "type": "compiler::NullableType.signature"
          },
          {
            "name": "root",
            "doc": "",
            "type": "compiler::NullableType.root"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::NullableType.toListOf$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": false,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "text",
                "type": "sys::Str text"
              }
            ]
          }
        ],
        "name": "MDoc",
        "doc": "",
        "fields": [
          {
            "name": "text",
            "doc": "",
            "type": "compiler::MDoc.text"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "This is the full signature of the type.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "Return if this type is a generic parameter (such as V or K) in a\ngeneric type (List, Map, or Method).  Generic parameters serve\nas place holders for the parameterization of the generic type.\nFantom has a predefined set of generic parameters which are always\ndefined in the sys pod with a one character name.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "Does this type implement the specified type.  If true, then\nthis type is assignable to the specified type (although the\nconverse is not necessarily true).  All types (including\nmixin types) fit sys::Obj.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "Get the flags bitmask.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "Is this a valid type usable anywhere (such as local var)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "base",
                "type": "compiler::CType base"
              }
            ]
          },
          {
            "name": "parameterizeSlots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "parameterizeSlot",
            "doc": "",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              }
            ]
          },
          {
            "name": "parameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "parameterizeListType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::ListType t"
              }
            ]
          },
          {
            "name": "parameterizeMapType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::MapType t"
              }
            ]
          },
          {
            "name": "parameterizeFuncType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::FuncType t"
              }
            ]
          },
          {
            "name": "doParameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ch",
                "type": "sys::Int ch"
              }
            ]
          },
          null,
          null,
          null,
          null,
          null
        ],
        "name": "GenericType",
        "doc": "GenericType models a parameterized generic type: List, Map, or Func\n",
        "fields": [
          {
            "name": "base",
            "doc": "",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "doc": "",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "doc": "",
            "type": "compiler::GenericType.operators$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "parameterizeSlots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "parameterizeSlot",
            "doc": "",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              }
            ]
          },
          {
            "name": "parameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "parameterizeListType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::ListType t"
              }
            ]
          },
          {
            "name": "parameterizeMapType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::MapType t"
              }
            ]
          },
          {
            "name": "parameterizeFuncType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::FuncType t"
              }
            ]
          },
          {
            "name": "doParameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ch",
                "type": "sys::Int ch"
              }
            ]
          },
          null,
          null,
          null,
          null,
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "v",
                "type": "compiler::CType v"
              }
            ]
          }
        ],
        "name": "ListType",
        "doc": "ListType models a parameterized List type.\n",
        "fields": [
          {
            "name": "signature",
            "doc": "",
            "type": "compiler::ListType.signature"
          },
          {
            "name": "base",
            "doc": "",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "doc": "",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "doc": "",
            "type": "compiler::GenericType.operators$Store"
          },
          {
            "name": "v",
            "doc": "",
            "type": "compiler::ListType.v"
          }
        ],
        "facets": [

        ],
        "base": "compiler::GenericType"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "parameterizeSlots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "parameterizeSlot",
            "doc": "",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              }
            ]
          },
          {
            "name": "parameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "parameterizeListType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::ListType t"
              }
            ]
          },
          {
            "name": "parameterizeMapType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::MapType t"
              }
            ]
          },
          {
            "name": "parameterizeFuncType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::FuncType t"
              }
            ]
          },
          {
            "name": "doParameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ch",
                "type": "sys::Int ch"
              }
            ]
          },
          null,
          null,
          null,
          null,
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "k",
                "type": "compiler::CType k"
              },
              {
                "name": "v",
                "type": "compiler::CType v"
              }
            ]
          }
        ],
        "name": "MapType",
        "doc": "MapType models a parameterized Map type.\n",
        "fields": [
          {
            "name": "signature",
            "doc": "",
            "type": "compiler::MapType.signature"
          },
          {
            "name": "base",
            "doc": "",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "doc": "",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "doc": "",
            "type": "compiler::GenericType.operators$Store"
          },
          {
            "name": "k",
            "doc": "",
            "type": "compiler::MapType.k"
          },
          {
            "name": "v",
            "doc": "",
            "type": "compiler::MapType.v"
          }
        ],
        "facets": [

        ],
        "base": "compiler::GenericType"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "Replace any occurance of \"sys::This\" with thisType.\n",
            "returns": "compiler::FuncType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "parameterizeSlots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "parameterizeSlot",
            "doc": "",
            "returns": "compiler::CSlot",
            "params": [
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              }
            ]
          },
          {
            "name": "parameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "parameterizeListType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::ListType t"
              }
            ]
          },
          {
            "name": "parameterizeMapType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::MapType t"
              }
            ]
          },
          {
            "name": "parameterizeFuncType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "t",
                "type": "compiler::FuncType t"
              }
            ]
          },
          {
            "name": "doParameterize",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ch",
                "type": "sys::Int ch"
              }
            ]
          },
          null,
          null,
          null,
          null,
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "params",
                "type": "compiler::CType[] params"
              },
              {
                "name": "names",
                "type": "sys::Str[] names"
              },
              {
                "name": "ret",
                "type": "compiler::CType ret"
              }
            ]
          },
          {
            "name": "makeItBlock",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "itType",
                "type": "compiler::CType itType"
              }
            ]
          },
          {
            "name": "arity",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toArity",
            "doc": "",
            "returns": "compiler::FuncType",
            "params": [
              {
                "name": "num",
                "type": "sys::Int num"
              }
            ]
          },
          {
            "name": "mostSpecific",
            "doc": "",
            "returns": "compiler::FuncType",
            "params": [
              {
                "name": "b",
                "type": "compiler::FuncType b"
              }
            ]
          },
          {
            "name": "toMostSpecific",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "a",
                "type": "compiler::CType a"
              },
              {
                "name": "b",
                "type": "compiler::CType b"
              }
            ]
          },
          {
            "name": "toParamDefs",
            "doc": "",
            "returns": "compiler::ParamDef[]",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "usesThis",
            "doc": "Return if this function type has 'This' type in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "FuncType",
        "doc": "FuncType models a parameterized Func type.\n",
        "fields": [
          {
            "name": "signature",
            "doc": "",
            "type": "compiler::FuncType.signature"
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "type": "compiler::FuncType.isGenericParameter"
          },
          {
            "name": "base",
            "doc": "",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "doc": "",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "doc": "",
            "type": "compiler::GenericType.operators$Store"
          },
          {
            "name": "params",
            "doc": "",
            "type": "compiler::FuncType.params"
          },
          {
            "name": "names",
            "doc": "",
            "type": "compiler::FuncType.names"
          },
          {
            "name": "ret",
            "doc": "",
            "type": "compiler::FuncType.ret"
          },
          {
            "name": "unnamed",
            "doc": "",
            "type": "compiler::FuncType.unnamed"
          },
          {
            "name": "inferredSignature",
            "doc": "",
            "type": "compiler::FuncType.inferredSignature"
          }
        ],
        "facets": [

        ],
        "base": "compiler::GenericType"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Equality based on signature.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "sys::Obj? t"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Hash on signature.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return signature\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "",
            "returns": "compiler::CPod",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "deref",
            "doc": "If this is a TypeRef, return what it references\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isVal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValType",
            "doc": "Static utility for value type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNullable",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toNullable",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "toNonNullable",
            "doc": "Get this type as a non-nullable (if nullable)\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "foreignInheritance",
            "doc": "If this TypeDef extends from a FFI class or implements any\nFFI mixins, then return the FFI type otherwise return null.\n",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this is a foreign function return the bridge.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "inferredAs",
            "doc": "If this type is being used for type inference then get the\ntype as it should be inferred.  Typically we just return this.\nHowever some FFI types such as '[java]::int' are never used\non the stack directly and are inferred to be 'sys::Int'.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isSupported",
            "doc": "Return if type is supported by the Fantom type system.  For example\nthe Java FFI will correctly model a Java multi-dimensional array\nduring compilation, however there is no Fantom representation.  We\ncheck for supported types during CheckErrors when accessing\nfields and methods.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGenericParameter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toListOf",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "raw",
            "doc": "If this type is a generic parameter (V, L, etc), then return\nthe actual type for the native implementation.  For example V\nis Obj, and L is List.  This is the type we actually use when\nconstructing a signature for the invoke opcode.\n",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "parameterizeThis",
            "doc": "If this is a parameterized type which uses 'This',\nthen replace 'This' with the specified type.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "thisType",
                "type": "compiler::CType thisType"
              }
            ]
          },
          {
            "name": "base",
            "doc": "",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "mixins",
            "doc": "",
            "returns": "compiler::CType[]",
            "params": [

            ]
          },
          {
            "name": "fits",
            "doc": "Does this type implement the specified type.  If true, then\nthis type is assignable to the specified type (although the\nconverse is not necessarily true).  All types (including\nmixin types) fit sys::Obj.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "fitsAny",
            "doc": "Return if this type fits any of the types in the specified list.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "common",
            "doc": "Given a list of types, compute the most specific type which they\nall share, or at worst return sys::Obj.  This method does not take\ninto account mixins, only extends class inheritance.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonClass",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonMixin",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonParameterized",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              }
            ]
          },
          {
            "name": "commonList",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::ListType[] types"
              }
            ]
          },
          {
            "name": "commonExact",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "types",
                "type": "compiler::CType[] types"
              },
              {
                "name": "fallback",
                "type": "compiler::CType fallback"
              }
            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isClass",
            "doc": "Return if this Type is a class (as opposed to enum or mixin)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMixin",
            "doc": "Return if this Type is a mixin type and cannot be instantiated.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "Return if this Type is an sys::Enum\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFacet",
            "doc": "Return if this Type is an sys::Facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "Return if this Type is abstract and cannot be instantiated.  This\nmethod will always return true if the type is a mixin.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "Return if this Type is const and immutable.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFinal",
            "doc": "Return if this Type is final and cannot be subclassed.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "Is this a public scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "Is this an internally scoped class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "Is this a compiler generated synthetic class\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "Is the entire class implemented in native code?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isObj",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBool",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFloat",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isDecimal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isRange",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isThis",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isType",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVoid",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isBuf",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isList",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isMap",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isFunc",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNothing",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isValid",
            "doc": "Is this a valid type usable anywhere (such as local var)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConstFieldType",
            "doc": "Is this type ok to use as a const field?  Any const\ntype fine, plus we allow Obj, List, Map, Buf, and Func since\nthey will implicitly have toImmutable called on them.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "slots",
            "doc": "",
            "returns": "[sys::Str:compiler::CSlot]",
            "params": [

            ]
          },
          {
            "name": "hasSlot",
            "doc": "Return if this type contains a slot by the specified name.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "slot",
            "doc": "Lookup a slot by name.  If the slot doesn't exist then return null.\n",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "field",
            "doc": "Lookup a field by name (null if method).\n",
            "returns": "compiler::CField?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "method",
            "doc": "Lookup a method by name (null if field).\n",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "fields",
            "doc": "List of the all defined fields (including inherited fields).\n",
            "returns": "compiler::CField[]",
            "params": [

            ]
          },
          {
            "name": "methods",
            "doc": "List of the all defined methods (including inherited methods).\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "ctors",
            "doc": "List of the all constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "instanceCtors",
            "doc": "List of the all instance constructors.\n",
            "returns": "compiler::CMethod[]",
            "params": [

            ]
          },
          {
            "name": "operators",
            "doc": "",
            "returns": "compiler::COperators",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          null,
          null,
          null
        ],
        "name": "GenericParameterType",
        "doc": "GenericParameterType models the generic parameter types\nsys::V, sys::K, etc.\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::GenericParameterType.ns"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::GenericParameterType.name"
          },
          {
            "name": "qname",
            "doc": "",
            "type": "compiler::GenericParameterType.qname"
          },
          {
            "name": "toNullable$Store",
            "doc": "",
            "type": "compiler::GenericParameterType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "doc": "",
            "type": "compiler::GenericParameterType.toListOf$Store"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this field covariantly override a method?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Is this field typed with a generic parameter.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "compiler::GenericType parent"
              },
              {
                "name": "generic",
                "type": "compiler::CField generic"
              }
            ]
          }
        ],
        "name": "ParameterizedField",
        "doc": "ParameterizedField\n",
        "fields": [
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::ParameterizedField.parent"
          },
          {
            "name": "fieldType",
            "doc": "",
            "type": "compiler::ParameterizedField.fieldType"
          },
          {
            "name": "getter",
            "doc": "",
            "type": "compiler::ParameterizedField.getter"
          },
          {
            "name": "setter",
            "doc": "",
            "type": "compiler::ParameterizedField.setter"
          },
          {
            "name": "generic",
            "doc": "",
            "type": "compiler::ParameterizedField.generic"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this method have a covariant return type (we\ndon't count This returns as covariant)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Does this method contains generic parameters in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "calcGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "compiler::CMethod m"
              }
            ]
          },
          {
            "name": "nameAndParamTypesToStr",
            "doc": "Return a string with the name and parameters.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasSameParams",
            "doc": "Return if this method has the exact same parameters as\nthe specified method.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::CMethod that"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "compiler::GenericType parent"
              },
              {
                "name": "generic",
                "type": "compiler::CMethod generic"
              }
            ]
          }
        ],
        "name": "ParameterizedMethod",
        "doc": "ParameterizedMethod models a parameterized CMethod\n",
        "fields": [
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::ParameterizedMethod.parent"
          },
          {
            "name": "signature",
            "doc": "",
            "type": "compiler::ParameterizedMethod.signature"
          },
          {
            "name": "returnType",
            "doc": "",
            "type": "compiler::ParameterizedMethod.returnType"
          },
          {
            "name": "params",
            "doc": "",
            "type": "compiler::ParameterizedMethod.params"
          },
          {
            "name": "generic",
            "doc": "",
            "type": "compiler::ParameterizedMethod.generic"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "name",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasDefault",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "compiler::GenericType parent"
              },
              {
                "name": "generic",
                "type": "compiler::CParam generic"
              }
            ]
          }
        ],
        "name": "ParameterizedMethodParam",
        "doc": "ParameterizedMethodParam\n",
        "fields": [
          {
            "name": "paramType",
            "doc": "",
            "type": "compiler::ParameterizedMethodParam.paramType"
          },
          {
            "name": "generic",
            "doc": "",
            "type": "compiler::ParameterizedMethodParam.generic"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "compiler::CType parent"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          }
        ],
        "name": "MockSlot",
        "doc": "MockSlot are special slots used between the compiler\nand runtime but not publically exposed by reflection.\n",
        "fields": [
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::MockSlot.parent"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::MockSlot.name"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::MockSlot.flags"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "getter",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "setter",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this field covariantly override a method?\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Is this field typed with a generic parameter.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this field the parameterization of a generic field,\nwith the generic type replaced with a real type.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "compiler::CType parent"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              },
              {
                "name": "of",
                "type": "compiler::CType of"
              }
            ]
          }
        ],
        "name": "MockField",
        "doc": "MockField\n",
        "fields": [
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::MockSlot.parent"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::MockSlot.name"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::MockSlot.flags"
          },
          {
            "name": "fieldType",
            "doc": "",
            "type": "compiler::MockField.fieldType"
          }
        ],
        "facets": [

        ],
        "base": "compiler::MockSlot"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "ns",
            "doc": "",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::CDoc?",
            "params": [

            ]
          },
          {
            "name": "facet",
            "doc": "",
            "returns": "compiler::CFacet?",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "hasFacet",
            "doc": "Return if the given facet is defined.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "isNoDoc",
            "doc": "Return if type has NoDoc facet\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "qname",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "signature",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isAbstract",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isConst",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isEnum",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInternal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isNative",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOverride",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPrivate",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isProtected",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isPublic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSetter",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStorage",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isSynthetic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isVirtual",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isOnce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isInstanceCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isStaticCtor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isForeign",
            "doc": "If this a foreign function interface slot.  A FFI slot is one\ndeclared in another language.  See `usesForeign` to check if the\nslot uses any FFI types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "usesForeign",
            "doc": "Return if this slot is foreign or uses any foreign types in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "bridge",
            "doc": "If this a foreign function return the bridge.  See `usesForeign` to\ncheck if the slot uses any FFI types in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "usesBridge",
            "doc": "Return the bridge if this slot is foreign or uses any foreign\ntypes in its signature.\n",
            "returns": "compiler::CBridge?",
            "params": [

            ]
          },
          {
            "name": "isVisibleTo",
            "doc": "Return if this slot is visible to the given type\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::CType curType"
              }
            ]
          },
          {
            "name": "inheritedReturnType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "isCovariant",
            "doc": "Does this method have a covariant return type (we\ndon't count This returns as covariant)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isGeneric",
            "doc": "Does this method contains generic parameters in its signature.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isParameterized",
            "doc": "Is this method the parameterization of a generic method,\nwith all the generic parameters filled in with real types.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "generic",
            "doc": "If isParameterized is true, then return the generic\nmethod which this method parameterizes, otherwise null\n",
            "returns": "compiler::CMethod?",
            "params": [

            ]
          },
          {
            "name": "calcGeneric",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "compiler::CMethod m"
              }
            ]
          },
          {
            "name": "nameAndParamTypesToStr",
            "doc": "Return a string with the name and parameters.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "hasSameParams",
            "doc": "Return if this method has the exact same parameters as\nthe specified method.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "compiler::CMethod that"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "parent",
                "type": "compiler::CType parent"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              },
              {
                "name": "ret",
                "type": "compiler::CType ret"
              },
              {
                "name": "params",
                "type": "compiler::CType[] params"
              }
            ]
          }
        ],
        "name": "MockMethod",
        "doc": "MockMethod\n",
        "fields": [
          {
            "name": "parent",
            "doc": "",
            "type": "compiler::MockSlot.parent"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::MockSlot.name"
          },
          {
            "name": "flags",
            "doc": "",
            "type": "compiler::MockSlot.flags"
          },
          {
            "name": "returnType",
            "doc": "",
            "type": "compiler::MockMethod.returnType"
          },
          {
            "name": "params",
            "doc": "",
            "type": "compiler::MockMethod.params"
          }
        ],
        "facets": [

        ],
        "base": "compiler::MockSlot"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "hasDefault",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "of",
                "type": "compiler::CType of"
              }
            ]
          }
        ],
        "name": "MockParam",
        "doc": "MockParam\n",
        "fields": [
          {
            "name": "name",
            "doc": "",
            "type": "compiler::MockParam.name"
          },
          {
            "name": "paramType",
            "doc": "",
            "type": "compiler::MockParam.paramType"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "resolve",
            "doc": "Parse the signature into a resolved CType.  We *don't*\nuse the CNamespace's cache - it is using me when a signature\nisn't found in the cache.  But we do use the CPod's type cache\nvia CPod.resolveType.\n",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "sig",
                "type": "sys::Str sig"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ns",
                "type": "compiler::CNamespace ns"
              },
              {
                "name": "sig",
                "type": "sys::Str sig"
              }
            ]
          },
          {
            "name": "loadTop",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "loadAny",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "loadMap",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "loadFunc",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "loadFFI",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "loadBasic",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "consume",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expected",
                "type": "sys::Int? expected"
              }
            ]
          },
          {
            "name": "isIdChar",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "ch",
                "type": "sys::Int ch"
              }
            ]
          },
          {
            "name": "err",
            "doc": "",
            "returns": "sys::ArgErr",
            "params": [

            ]
          }
        ],
        "name": "TypeParser",
        "doc": "TypeParser is used to parser formal type signatures into CTypes.\n\n  x::N\n  x::V[]\n  x::V[x::K]\n  |x::A, ... -> x::R|\n",
        "fields": [
          {
            "name": "ns",
            "doc": "",
            "type": "compiler::TypeParser.ns"
          },
          {
            "name": "sig",
            "doc": "",
            "type": "compiler::TypeParser.sig"
          },
          {
            "name": "len",
            "doc": "",
            "type": "compiler::TypeParser.len"
          },
          {
            "name": "pos",
            "doc": "",
            "type": "compiler::TypeParser.pos"
          },
          {
            "name": "cur",
            "doc": "",
            "type": "compiler::TypeParser.cur"
          },
          {
            "name": "peek",
            "doc": "",
            "type": "compiler::TypeParser.peek"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return depend.toStr\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "",
            "returns": "compiler::CDepend",
            "params": [
              {
                "name": "s",
                "type": "sys::Str s"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "d",
                "type": "sys::Depend d"
              },
              {
                "name": "p",
                "type": "compiler::CPod? p"
              }
            ]
          },
          {
            "name": "makeList",
            "doc": "",
            "returns": "compiler::CDepend[]",
            "params": [
              {
                "name": "d",
                "type": "sys::Depend[] d"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Pod name of the dependency\n",
            "returns": "sys::Str",
            "params": [

            ]
          }
        ],
        "name": "CDepend",
        "doc": "CDepend is a compiler dependency which wraps `sys::Depend`\n",
        "fields": [
          {
            "name": "depend",
            "doc": "Depend specification\n",
            "type": "compiler::CDepend.depend"
          },
          {
            "name": "pod",
            "doc": "Resolved pod for the dependency or null if unresolved\n",
            "type": "compiler::CDepend.pod"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Return a CompilerException for current location in source.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Construct with characters of source file.  The buffer\npassed must be normalized in that all newlines must be\nrepresented strictly as \\n and not \\r or \\r\\n (see\nFile.readAllStr).  If isDoc is false, we skip all star-star\nFandoc comments.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "buf",
                "type": "sys::Str buf"
              },
              {
                "name": "isDoc",
                "type": "sys::Bool isDoc"
              }
            ]
          },
          {
            "name": "tokenize",
            "doc": "Tokenize the entire input into a list of tokens.\n",
            "returns": "compiler::TokenVal[]",
            "params": [

            ]
          },
          {
            "name": "next",
            "doc": "Return the next token in the buffer.\n",
            "returns": "compiler::TokenVal?",
            "params": [

            ]
          },
          {
            "name": "find",
            "doc": "",
            "returns": "compiler::TokenVal?",
            "params": [

            ]
          },
          {
            "name": "word",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [

            ]
          },
          {
            "name": "isIdentifierStart",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "c",
                "type": "sys::Int c"
              }
            ]
          },
          {
            "name": "number",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [

            ]
          },
          {
            "name": "hexInt",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [

            ]
          },
          {
            "name": "binaryInt",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [

            ]
          },
          {
            "name": "quoted",
            "doc": "",
            "returns": "compiler::TokenVal?",
            "params": [
              {
                "name": "q",
                "type": "compiler::Quoted q"
              }
            ]
          },
          {
            "name": "skipStrWs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "openLine",
                "type": "sys::Int openLine"
              },
              {
                "name": "openPos",
                "type": "sys::Int openPos"
              }
            ]
          },
          {
            "name": "interpolation",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "line",
                "type": "sys::Int line"
              },
              {
                "name": "col",
                "type": "sys::Int col"
              },
              {
                "name": "s",
                "type": "sys::Str s"
              },
              {
                "name": "q",
                "type": "compiler::Quoted q"
              }
            ]
          },
          {
            "name": "endOfQuoted",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "q",
                "type": "compiler::Quoted q"
              }
            ]
          },
          {
            "name": "makeVirtualToken",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [
              {
                "name": "line",
                "type": "sys::Int line"
              },
              {
                "name": "col",
                "type": "sys::Int col"
              },
              {
                "name": "kind",
                "type": "compiler::Token kind"
              },
              {
                "name": "value",
                "type": "sys::Obj? value"
              }
            ]
          },
          {
            "name": "ch",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [

            ]
          },
          {
            "name": "escape",
            "doc": "Parse an escapse sequence which starts with a \\\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "dsl",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [

            ]
          },
          {
            "name": "skipCommentSL",
            "doc": "",
            "returns": "compiler::TokenVal?",
            "params": [

            ]
          },
          {
            "name": "skipCommentML",
            "doc": "",
            "returns": "compiler::TokenVal?",
            "params": [

            ]
          },
          {
            "name": "docComment",
            "doc": "",
            "returns": "compiler::TokenVal?",
            "params": [

            ]
          },
          {
            "name": "symbol",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [

            ]
          },
          {
            "name": "peekPeek",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "consume",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null
        ],
        "name": "Tokenizer",
        "doc": "Tokenizer inputs a Str and output a list of Tokens\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "buf",
            "doc": "",
            "type": "compiler::Tokenizer.buf"
          },
          {
            "name": "pos",
            "doc": "",
            "type": "compiler::Tokenizer.pos"
          },
          {
            "name": "isDoc",
            "doc": "",
            "type": "compiler::Tokenizer.isDoc"
          },
          {
            "name": "filename",
            "doc": "",
            "type": "compiler::Tokenizer.filename"
          },
          {
            "name": "line",
            "doc": "",
            "type": "compiler::Tokenizer.line"
          },
          {
            "name": "col",
            "doc": "",
            "type": "compiler::Tokenizer.col"
          },
          {
            "name": "curLine",
            "doc": "",
            "type": "compiler::Tokenizer.curLine"
          },
          {
            "name": "cur",
            "doc": "",
            "type": "compiler::Tokenizer.cur"
          },
          {
            "name": "peek",
            "doc": "",
            "type": "compiler::Tokenizer.peek"
          },
          {
            "name": "lastLine",
            "doc": "",
            "type": "compiler::Tokenizer.lastLine"
          },
          {
            "name": "posOfLine",
            "doc": "",
            "type": "compiler::Tokenizer.posOfLine"
          },
          {
            "name": "tokens",
            "doc": "",
            "type": "compiler::Tokenizer.tokens"
          },
          {
            "name": "inStrLiteral",
            "doc": "",
            "type": "compiler::Tokenizer.inStrLiteral"
          },
          {
            "name": "whitespace",
            "doc": "",
            "type": "compiler::Tokenizer.whitespace"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": false,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "isUri",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isTriple",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              },
              {
                "name": "s",
                "type": "sys::Str s"
              },
              {
                "name": "ml",
                "type": "sys::Bool ml"
              }
            ]
          },
          {
            "name": "fromStr",
            "doc": "",
            "returns": "compiler::Quoted?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "Quoted",
        "doc": "",
        "fields": [
          {
            "name": "toStr",
            "doc": "",
            "type": "compiler::Quoted.toStr"
          },
          {
            "name": "normal",
            "doc": "",
            "type": "compiler::Quoted.normal"
          },
          {
            "name": "triple",
            "doc": "",
            "type": "compiler::Quoted.triple"
          },
          {
            "name": "uri",
            "doc": "",
            "type": "compiler::Quoted.uri"
          },
          {
            "name": "vals",
            "doc": "",
            "type": "compiler::Quoted.vals"
          },
          {
            "name": "multiLine",
            "doc": "",
            "type": "compiler::Quoted.multiLine"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "filename",
            "doc": "",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "fileUri",
            "doc": "",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "toLocStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "kind",
                "type": "compiler::Token kind"
              },
              {
                "name": "val",
                "type": "sys::Obj? val"
              }
            ]
          },
          {
            "name": "toCode",
            "doc": "Get this token as Fantom source code.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isCallOpenParen",
            "doc": "Return if this token is a left opening paren,\nbut only if on the same line:\n\nOk:\n  call(...)\n\nNot ok:\n  call\n    (...)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isIndexOpenBracket",
            "doc": "Return if this token is a left opening bracket,\nbut only if on the same line:\n\nOk:\n  expr[...]\n\nNot ok:\n  expr\n    [...]\n",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "TokenVal",
        "doc": "TokenVal stores an instance of a Token at a specific location.\n",
        "fields": [
          {
            "name": "file",
            "doc": "",
            "type": "compiler::Loc.file"
          },
          {
            "name": "line",
            "doc": "",
            "type": "compiler::Loc.line"
          },
          {
            "name": "col",
            "doc": "",
            "type": "compiler::Loc.col"
          },
          {
            "name": "kind",
            "doc": "",
            "type": "compiler::TokenVal.kind"
          },
          {
            "name": "val",
            "doc": "",
            "type": "compiler::TokenVal.val"
          },
          {
            "name": "newline",
            "doc": "",
            "type": "compiler::TokenVal.newline"
          },
          {
            "name": "whitespace",
            "doc": "",
            "type": "compiler::TokenVal.whitespace"
          }
        ],
        "facets": [

        ],
        "base": "compiler::Loc"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "filename",
            "doc": "",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "fileUri",
            "doc": "",
            "returns": "sys::Str?",
            "params": [

            ]
          },
          {
            "name": "toLocStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          null,
          {
            "name": "toCode",
            "doc": "Get this token as Fantom source code.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "isCallOpenParen",
            "doc": "Return if this token is a left opening paren,\nbut only if on the same line:\n\nOk:\n  call(...)\n\nNot ok:\n  call\n    (...)\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isIndexOpenBracket",
            "doc": "Return if this token is a left opening bracket,\nbut only if on the same line:\n\nOk:\n  expr[...]\n\nNot ok:\n  expr\n    [...]\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "kind",
                "type": "compiler::Token kind"
              },
              {
                "name": "src",
                "type": "sys::Str src"
              },
              {
                "name": "tabs",
                "type": "sys::Int tabs"
              },
              {
                "name": "spaces",
                "type": "sys::Int spaces"
              }
            ]
          }
        ],
        "name": "TokenValDsl",
        "doc": "Extra information for DSL tokens.\n",
        "fields": [
          {
            "name": "file",
            "doc": "",
            "type": "compiler::Loc.file"
          },
          {
            "name": "line",
            "doc": "",
            "type": "compiler::Loc.line"
          },
          {
            "name": "col",
            "doc": "",
            "type": "compiler::Loc.col"
          },
          {
            "name": "kind",
            "doc": "",
            "type": "compiler::TokenVal.kind"
          },
          {
            "name": "val",
            "doc": "",
            "type": "compiler::TokenVal.val"
          },
          {
            "name": "newline",
            "doc": "",
            "type": "compiler::TokenVal.newline"
          },
          {
            "name": "whitespace",
            "doc": "",
            "type": "compiler::TokenVal.whitespace"
          },
          {
            "name": "leadingTabs",
            "doc": "",
            "type": "compiler::TokenValDsl.leadingTabs"
          },
          {
            "name": "leadingSpaces",
            "doc": "",
            "type": "compiler::TokenValDsl.leadingSpaces"
          }
        ],
        "facets": [

        ],
        "base": "compiler::TokenVal"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Construct the parser for the specified compilation unit.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              },
              {
                "name": "closures",
                "type": "compiler::ClosureExpr[] closures"
              }
            ]
          },
          {
            "name": "parse",
            "doc": "Top level parse a compilation unit:\n\n  <compilationUnit> :=  [<usings>] <typeDef>*\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "usings",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "skipUsing",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "typeDef",
            "doc": "TypeDef:\n  <typeDef>      :=  <classDef> | <mixinDef> | <enumDef> | <facetDef>\n\n  <classDef>     :=  <classHeader> <classBody>\n  <classHeader>  :=  [<doc>] <facets> <typeFlags> \"class\" [<inheritance>]\n  <classFlags>   :=  [<protection>] [\"abstract\"] [\"final\"]\n  <classBody>    :=  \"{\" <slotDefs> \"}\"\n\n  <enumDef>      :=  <enumHeader> <enumBody>\n  <enumHeader>   :=  [<doc>] <facets> <protection> \"enum\" [<inheritance>]\n  <enumBody>     :=  \"{\" <enumDefs> <slotDefs> \"}\"\n\n  <facetDef      :=  <facetHeader> <enumBody>\n  <facetHeader>  :=  [<doc>] <facets> [<protection>] \"facet\" \"class\" <id> [<inheritance>]\n  <facetBody>    :=  \"{\" <slotDefs> \"}\"\n\n  <mixinDef>     :=  <enumHeader> <enumBody>\n  <mixinHeader>  :=  [<doc>] <facets> <protection> \"mixin\" [<inheritance>]\n  <mixinBody>    :=  \"{\" <slotDefs> \"}\"\n\n  <protection>   :=  \"public\" | \"protected\" | \"private\" | \"internal\"\n  <inheritance>  :=  \":\" <typeList>\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inheritType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "flags",
            "doc": "",
            "returns": "sys::Int",
            "params": [
              {
                "name": "normalize",
                "type": "sys::Bool normalize"
              }
            ]
          },
          {
            "name": "enumDefs",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enumDef",
            "doc": "",
            "returns": "compiler::EnumDef",
            "params": [
              {
                "name": "ordinal",
                "type": "sys::Int ordinal"
              }
            ]
          },
          {
            "name": "slotDef",
            "doc": "",
            "returns": "compiler::SlotDef",
            "params": [
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "doc",
                "type": "compiler::DocDef? doc"
              }
            ]
          },
          {
            "name": "fieldDef",
            "doc": "",
            "returns": "compiler::FieldDef",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "doc",
                "type": "compiler::DocDef? doc"
              },
              {
                "name": "facets",
                "type": "compiler::FacetDef[]? facets"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              },
              {
                "name": "type",
                "type": "compiler::TypeRef? type"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "defGetAndSet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "defGet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "defSet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "genSyntheticGet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "genSyntheticSet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "getOrSet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "methodDef",
            "doc": "",
            "returns": "compiler::MethodDef",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "doc",
                "type": "compiler::DocDef? doc"
              },
              {
                "name": "facets",
                "type": "compiler::FacetDef[]? facets"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              },
              {
                "name": "ret",
                "type": "compiler::TypeRef ret"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "paramDef",
            "doc": "",
            "returns": "compiler::ParamDef",
            "params": [

            ]
          },
          {
            "name": "ctorChain",
            "doc": "",
            "returns": "compiler::CallExpr",
            "params": [
              {
                "name": "method",
                "type": "compiler::MethodDef method"
              }
            ]
          },
          {
            "name": "facets",
            "doc": "",
            "returns": "compiler::FacetDef[]?",
            "params": [

            ]
          },
          {
            "name": "block",
            "doc": "",
            "returns": "compiler::Block",
            "params": [

            ]
          },
          {
            "name": "stmtOrBlock",
            "doc": "",
            "returns": "compiler::Block",
            "params": [

            ]
          },
          {
            "name": "stmt",
            "doc": "",
            "returns": "compiler::Stmt",
            "params": [

            ]
          },
          {
            "name": "exprOrLocalDefStmt",
            "doc": "",
            "returns": "compiler::Stmt",
            "params": [
              {
                "name": "isEndOfStmt",
                "type": "sys::Bool isEndOfStmt"
              }
            ]
          },
          {
            "name": "itAdd",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "e",
                "type": "compiler::Expr e"
              }
            ]
          },
          {
            "name": "localDefStmt",
            "doc": "",
            "returns": "compiler::LocalDefStmt",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "localType",
                "type": "compiler::CType? localType"
              },
              {
                "name": "isEndOfStmt",
                "type": "sys::Bool isEndOfStmt"
              }
            ]
          },
          {
            "name": "ifStmt",
            "doc": "",
            "returns": "compiler::IfStmt",
            "params": [

            ]
          },
          {
            "name": "returnStmt",
            "doc": "",
            "returns": "compiler::ReturnStmt",
            "params": [

            ]
          },
          {
            "name": "throwStmt",
            "doc": "",
            "returns": "compiler::ThrowStmt",
            "params": [

            ]
          },
          {
            "name": "whileStmt",
            "doc": "",
            "returns": "compiler::WhileStmt",
            "params": [

            ]
          },
          {
            "name": "forStmt",
            "doc": "",
            "returns": "compiler::ForStmt",
            "params": [

            ]
          },
          {
            "name": "breakStmt",
            "doc": "",
            "returns": "compiler::BreakStmt",
            "params": [

            ]
          },
          {
            "name": "continueStmt",
            "doc": "",
            "returns": "compiler::ContinueStmt",
            "params": [

            ]
          },
          {
            "name": "tryStmt",
            "doc": "",
            "returns": "compiler::TryStmt",
            "params": [

            ]
          },
          {
            "name": "tryCatch",
            "doc": "",
            "returns": "compiler::Catch",
            "params": [

            ]
          },
          {
            "name": "switchStmt",
            "doc": "",
            "returns": "compiler::SwitchStmt",
            "params": [

            ]
          },
          {
            "name": "switchBlock",
            "doc": "",
            "returns": "compiler::Block",
            "params": [

            ]
          },
          {
            "name": "expr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "assignExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "ifExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "ifExprBody",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "condOrExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "condAndExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "equalityExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "relationalExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "rangeExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "addExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "multExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "parenExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "unaryExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "termExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr? target"
              }
            ]
          },
          {
            "name": "termBaseExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "typeBaseExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              }
            ]
          },
          {
            "name": "termChainExpr",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr target"
              }
            ]
          },
          {
            "name": "idExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr? target"
              },
              {
                "name": "dynamicCall",
                "type": "sys::Bool dynamicCall"
              },
              {
                "name": "safeCall",
                "type": "sys::Bool safeCall"
              }
            ]
          },
          {
            "name": "callExpr",
            "doc": "",
            "returns": "compiler::CallExpr",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr? target"
              }
            ]
          },
          {
            "name": "callArgs",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              },
              {
                "name": "closureOk",
                "type": "sys::Bool closureOk"
              }
            ]
          },
          {
            "name": "callOp",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr target"
              }
            ]
          },
          {
            "name": "indexExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "target",
                "type": "compiler::Expr target"
              }
            ]
          },
          {
            "name": "collectionLiteralExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "explicitType",
                "type": "compiler::CType? explicitType"
              }
            ]
          },
          {
            "name": "listLiteralExpr",
            "doc": "",
            "returns": "compiler::ListLiteralExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "explicitType",
                "type": "compiler::CType? explicitType"
              },
              {
                "name": "first",
                "type": "compiler::Expr? first"
              }
            ]
          },
          {
            "name": "mapLiteralExpr",
            "doc": "",
            "returns": "compiler::MapLiteralExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "explicitType",
                "type": "compiler::CType? explicitType"
              },
              {
                "name": "first",
                "type": "compiler::Expr? first"
              }
            ]
          },
          {
            "name": "tryClosure",
            "doc": "",
            "returns": "compiler::ClosureExpr?",
            "params": [

            ]
          },
          {
            "name": "tryItBlock",
            "doc": "",
            "returns": "compiler::ClosureExpr?",
            "params": [

            ]
          },
          {
            "name": "closure",
            "doc": "",
            "returns": "compiler::ClosureExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "funcType",
                "type": "compiler::FuncType funcType"
              }
            ]
          },
          {
            "name": "complexLiteral",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              }
            ]
          },
          {
            "name": "typeRef",
            "doc": "",
            "returns": "compiler::TypeRef",
            "params": [

            ]
          },
          {
            "name": "tryType",
            "doc": "",
            "returns": "compiler::CType?",
            "params": [

            ]
          },
          {
            "name": "ctype",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "isTypeRef",
                "type": "sys::Bool isTypeRef"
              }
            ]
          },
          {
            "name": "simpleType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [

            ]
          },
          {
            "name": "funcType",
            "doc": "",
            "returns": "compiler::CType",
            "params": [
              {
                "name": "isTypeRef",
                "type": "sys::Bool isTypeRef"
              }
            ]
          },
          {
            "name": "funcTypeFormal",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "isTypeRef",
                "type": "sys::Bool isTypeRef"
              },
              {
                "name": "params",
                "type": "compiler::CType[] params"
              },
              {
                "name": "names",
                "type": "sys::Str[] names"
              },
              {
                "name": "unnamed",
                "type": "sys::Bool[] unnamed"
              }
            ]
          },
          {
            "name": "doc",
            "doc": "",
            "returns": "compiler::DocDef?",
            "params": [

            ]
          },
          {
            "name": "consumeId",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "verify",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "kind",
                "type": "compiler::Token kind"
              }
            ]
          },
          {
            "name": "consume",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [
              {
                "name": "kind",
                "type": "compiler::Token? kind"
              }
            ]
          },
          {
            "name": "endOfStmt",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "errMsg",
                "type": "sys::Str? errMsg"
              }
            ]
          },
          {
            "name": "reset",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "pos",
                "type": "sys::Int pos"
              }
            ]
          },
          null
        ],
        "name": "Parser",
        "doc": "Parser is responsible for parsing a list of tokens into the\nabstract syntax tree.  At this point the CompilationUnit, Usings,\nand TypeDefs are already populated by the ScanForUsingAndTypes\nstep.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "ProtectionMask",
            "doc": "",
            "type": "compiler::Parser.ProtectionMask"
          },
          {
            "name": "unit",
            "doc": "",
            "type": "compiler::Parser.unit"
          },
          {
            "name": "tokens",
            "doc": "",
            "type": "compiler::Parser.tokens"
          },
          {
            "name": "numTokens",
            "doc": "",
            "type": "compiler::Parser.numTokens"
          },
          {
            "name": "pos",
            "doc": "",
            "type": "compiler::Parser.pos"
          },
          {
            "name": "cur",
            "doc": "",
            "type": "compiler::Parser.cur"
          },
          {
            "name": "curt",
            "doc": "",
            "type": "compiler::Parser.curt"
          },
          {
            "name": "peek",
            "doc": "",
            "type": "compiler::Parser.peek"
          },
          {
            "name": "peekt",
            "doc": "",
            "type": "compiler::Parser.peekt"
          },
          {
            "name": "inFieldInit",
            "doc": "",
            "type": "compiler::Parser.inFieldInit"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::Parser.curType"
          },
          {
            "name": "curSlot",
            "doc": "",
            "type": "compiler::Parser.curSlot"
          },
          {
            "name": "curClosure",
            "doc": "",
            "type": "compiler::Parser.curClosure"
          },
          {
            "name": "closureCount",
            "doc": "",
            "type": "compiler::Parser.closureCount"
          },
          {
            "name": "closures",
            "doc": "",
            "type": "compiler::Parser.closures"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Enums are only equal if same instance using ===.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj? obj"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Compare based on ordinal value.\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "obj",
                "type": "sys::Obj obj"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "doFromStr",
            "doc": "Protected fromStr implementation - for compiler use only.\nA public static fromStr method is always auto-generated\nby the compiler for each enum.\n",
            "returns": "sys::Enum?",
            "params": [
              {
                "name": "t",
                "type": "sys::Type t"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          {
            "name": "name",
            "doc": "Get the programatic name for this enum.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "ordinal",
            "doc": "Return ordinal value which is a zero based index into values.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "$ordinal",
                "type": "sys::Int $ordinal"
              },
              {
                "name": "$name",
                "type": "sys::Str $name"
              },
              {
                "name": "symbol",
                "type": "sys::Str? symbol"
              }
            ]
          },
          {
            "name": "toExprId",
            "doc": "Get this Token as a ExprId or throw Err.\n",
            "returns": "compiler::ExprId",
            "params": [

            ]
          },
          {
            "name": "toShortcutOp",
            "doc": "Map an operator token to it's shortcut operator enum.\nDegree is 1 for unary and 2 for binary.\n",
            "returns": "compiler::ShortcutOp",
            "params": [
              {
                "name": "degree",
                "type": "sys::Int degree"
              }
            ]
          },
          {
            "name": "isProtectionKeyword",
            "doc": "Is one of: public, protected, internal, private\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "isIncrementOrDecrement",
            "doc": "Return if -- or ++\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "main",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "fromStr",
            "doc": "Return the Token instance for the specified name.  If not a\nvalid name and checked is false return null, otherwise throw ParseErr.\n",
            "returns": "compiler::Token?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "checked",
                "type": "sys::Bool checked"
              }
            ]
          },
          null
        ],
        "name": "Token",
        "doc": "Token is the enum for all the token types.\n",
        "fields": [
          {
            "name": "identifier",
            "doc": "",
            "type": "compiler::Token.identifier"
          },
          {
            "name": "strLiteral",
            "doc": "",
            "type": "compiler::Token.strLiteral"
          },
          {
            "name": "intLiteral",
            "doc": "",
            "type": "compiler::Token.intLiteral"
          },
          {
            "name": "floatLiteral",
            "doc": "",
            "type": "compiler::Token.floatLiteral"
          },
          {
            "name": "decimalLiteral",
            "doc": "",
            "type": "compiler::Token.decimalLiteral"
          },
          {
            "name": "durationLiteral",
            "doc": "",
            "type": "compiler::Token.durationLiteral"
          },
          {
            "name": "uriLiteral",
            "doc": "",
            "type": "compiler::Token.uriLiteral"
          },
          {
            "name": "dsl",
            "doc": "",
            "type": "compiler::Token.dsl"
          },
          {
            "name": "localeLiteral",
            "doc": "",
            "type": "compiler::Token.localeLiteral"
          },
          {
            "name": "dot",
            "doc": "",
            "type": "compiler::Token.dot"
          },
          {
            "name": "semicolon",
            "doc": "",
            "type": "compiler::Token.semicolon"
          },
          {
            "name": "comma",
            "doc": "",
            "type": "compiler::Token.comma"
          },
          {
            "name": "colon",
            "doc": "",
            "type": "compiler::Token.colon"
          },
          {
            "name": "doubleColon",
            "doc": "",
            "type": "compiler::Token.doubleColon"
          },
          {
            "name": "plus",
            "doc": "",
            "type": "compiler::Token.plus"
          },
          {
            "name": "minus",
            "doc": "",
            "type": "compiler::Token.minus"
          },
          {
            "name": "star",
            "doc": "",
            "type": "compiler::Token.star"
          },
          {
            "name": "slash",
            "doc": "",
            "type": "compiler::Token.slash"
          },
          {
            "name": "percent",
            "doc": "",
            "type": "compiler::Token.percent"
          },
          {
            "name": "pound",
            "doc": "",
            "type": "compiler::Token.pound"
          },
          {
            "name": "increment",
            "doc": "",
            "type": "compiler::Token.increment"
          },
          {
            "name": "decrement",
            "doc": "",
            "type": "compiler::Token.decrement"
          },
          {
            "name": "bang",
            "doc": "",
            "type": "compiler::Token.bang"
          },
          {
            "name": "question",
            "doc": "",
            "type": "compiler::Token.question"
          },
          {
            "name": "tilde",
            "doc": "",
            "type": "compiler::Token.tilde"
          },
          {
            "name": "pipe",
            "doc": "",
            "type": "compiler::Token.pipe"
          },
          {
            "name": "amp",
            "doc": "",
            "type": "compiler::Token.amp"
          },
          {
            "name": "caret",
            "doc": "",
            "type": "compiler::Token.caret"
          },
          {
            "name": "at",
            "doc": "",
            "type": "compiler::Token.at"
          },
          {
            "name": "doublePipe",
            "doc": "",
            "type": "compiler::Token.doublePipe"
          },
          {
            "name": "doubleAmp",
            "doc": "",
            "type": "compiler::Token.doubleAmp"
          },
          {
            "name": "same",
            "doc": "",
            "type": "compiler::Token.same"
          },
          {
            "name": "notSame",
            "doc": "",
            "type": "compiler::Token.notSame"
          },
          {
            "name": "eq",
            "doc": "",
            "type": "compiler::Token.eq"
          },
          {
            "name": "notEq",
            "doc": "",
            "type": "compiler::Token.notEq"
          },
          {
            "name": "cmp",
            "doc": "",
            "type": "compiler::Token.cmp"
          },
          {
            "name": "lt",
            "doc": "",
            "type": "compiler::Token.lt"
          },
          {
            "name": "ltEq",
            "doc": "",
            "type": "compiler::Token.ltEq"
          },
          {
            "name": "gt",
            "doc": "",
            "type": "compiler::Token.gt"
          },
          {
            "name": "gtEq",
            "doc": "",
            "type": "compiler::Token.gtEq"
          },
          {
            "name": "lbrace",
            "doc": "",
            "type": "compiler::Token.lbrace"
          },
          {
            "name": "rbrace",
            "doc": "",
            "type": "compiler::Token.rbrace"
          },
          {
            "name": "lparen",
            "doc": "",
            "type": "compiler::Token.lparen"
          },
          {
            "name": "rparen",
            "doc": "",
            "type": "compiler::Token.rparen"
          },
          {
            "name": "lbracket",
            "doc": "",
            "type": "compiler::Token.lbracket"
          },
          {
            "name": "rbracket",
            "doc": "",
            "type": "compiler::Token.rbracket"
          },
          {
            "name": "dotDot",
            "doc": "",
            "type": "compiler::Token.dotDot"
          },
          {
            "name": "dotDotLt",
            "doc": "",
            "type": "compiler::Token.dotDotLt"
          },
          {
            "name": "defAssign",
            "doc": "",
            "type": "compiler::Token.defAssign"
          },
          {
            "name": "assign",
            "doc": "",
            "type": "compiler::Token.assign"
          },
          {
            "name": "assignPlus",
            "doc": "",
            "type": "compiler::Token.assignPlus"
          },
          {
            "name": "assignMinus",
            "doc": "",
            "type": "compiler::Token.assignMinus"
          },
          {
            "name": "assignStar",
            "doc": "",
            "type": "compiler::Token.assignStar"
          },
          {
            "name": "assignSlash",
            "doc": "",
            "type": "compiler::Token.assignSlash"
          },
          {
            "name": "assignPercent",
            "doc": "",
            "type": "compiler::Token.assignPercent"
          },
          {
            "name": "arrow",
            "doc": "",
            "type": "compiler::Token.arrow"
          },
          {
            "name": "elvis",
            "doc": "",
            "type": "compiler::Token.elvis"
          },
          {
            "name": "safeDot",
            "doc": "",
            "type": "compiler::Token.safeDot"
          },
          {
            "name": "safeArrow",
            "doc": "",
            "type": "compiler::Token.safeArrow"
          },
          {
            "name": "docComment",
            "doc": "",
            "type": "compiler::Token.docComment"
          },
          {
            "name": "dollar",
            "doc": "",
            "type": "compiler::Token.dollar"
          },
          {
            "name": "lparenSynthetic",
            "doc": "",
            "type": "compiler::Token.lparenSynthetic"
          },
          {
            "name": "abstractKeyword",
            "doc": "",
            "type": "compiler::Token.abstractKeyword"
          },
          {
            "name": "asKeyword",
            "doc": "",
            "type": "compiler::Token.asKeyword"
          },
          {
            "name": "assertKeyword",
            "doc": "",
            "type": "compiler::Token.assertKeyword"
          },
          {
            "name": "breakKeyword",
            "doc": "",
            "type": "compiler::Token.breakKeyword"
          },
          {
            "name": "caseKeyword",
            "doc": "",
            "type": "compiler::Token.caseKeyword"
          },
          {
            "name": "catchKeyword",
            "doc": "",
            "type": "compiler::Token.catchKeyword"
          },
          {
            "name": "classKeyword",
            "doc": "",
            "type": "compiler::Token.classKeyword"
          },
          {
            "name": "constKeyword",
            "doc": "",
            "type": "compiler::Token.constKeyword"
          },
          {
            "name": "continueKeyword",
            "doc": "",
            "type": "compiler::Token.continueKeyword"
          },
          {
            "name": "defaultKeyword",
            "doc": "",
            "type": "compiler::Token.defaultKeyword"
          },
          {
            "name": "doKeyword",
            "doc": "",
            "type": "compiler::Token.doKeyword"
          },
          {
            "name": "elseKeyword",
            "doc": "",
            "type": "compiler::Token.elseKeyword"
          },
          {
            "name": "falseKeyword",
            "doc": "",
            "type": "compiler::Token.falseKeyword"
          },
          {
            "name": "finalKeyword",
            "doc": "",
            "type": "compiler::Token.finalKeyword"
          },
          {
            "name": "finallyKeyword",
            "doc": "",
            "type": "compiler::Token.finallyKeyword"
          },
          {
            "name": "forKeyword",
            "doc": "",
            "type": "compiler::Token.forKeyword"
          },
          {
            "name": "foreachKeyword",
            "doc": "",
            "type": "compiler::Token.foreachKeyword"
          },
          {
            "name": "ifKeyword",
            "doc": "",
            "type": "compiler::Token.ifKeyword"
          },
          {
            "name": "internalKeyword",
            "doc": "",
            "type": "compiler::Token.internalKeyword"
          },
          {
            "name": "isKeyword",
            "doc": "",
            "type": "compiler::Token.isKeyword"
          },
          {
            "name": "isnotKeyword",
            "doc": "",
            "type": "compiler::Token.isnotKeyword"
          },
          {
            "name": "itKeyword",
            "doc": "",
            "type": "compiler::Token.itKeyword"
          },
          {
            "name": "mixinKeyword",
            "doc": "",
            "type": "compiler::Token.mixinKeyword"
          },
          {
            "name": "nativeKeyword",
            "doc": "",
            "type": "compiler::Token.nativeKeyword"
          },
          {
            "name": "newKeyword",
            "doc": "",
            "type": "compiler::Token.newKeyword"
          },
          {
            "name": "nullKeyword",
            "doc": "",
            "type": "compiler::Token.nullKeyword"
          },
          {
            "name": "onceKeyword",
            "doc": "",
            "type": "compiler::Token.onceKeyword"
          },
          {
            "name": "overrideKeyword",
            "doc": "",
            "type": "compiler::Token.overrideKeyword"
          },
          {
            "name": "privateKeyword",
            "doc": "",
            "type": "compiler::Token.privateKeyword"
          },
          {
            "name": "protectedKeyword",
            "doc": "",
            "type": "compiler::Token.protectedKeyword"
          },
          {
            "name": "publicKeyword",
            "doc": "",
            "type": "compiler::Token.publicKeyword"
          },
          {
            "name": "readonlyKeyword",
            "doc": "",
            "type": "compiler::Token.readonlyKeyword"
          },
          {
            "name": "returnKeyword",
            "doc": "",
            "type": "compiler::Token.returnKeyword"
          },
          {
            "name": "staticKeyword",
            "doc": "",
            "type": "compiler::Token.staticKeyword"
          },
          {
            "name": "superKeyword",
            "doc": "",
            "type": "compiler::Token.superKeyword"
          },
          {
            "name": "switchKeyword",
            "doc": "",
            "type": "compiler::Token.switchKeyword"
          },
          {
            "name": "thisKeyword",
            "doc": "",
            "type": "compiler::Token.thisKeyword"
          },
          {
            "name": "throwKeyword",
            "doc": "",
            "type": "compiler::Token.throwKeyword"
          },
          {
            "name": "trueKeyword",
            "doc": "",
            "type": "compiler::Token.trueKeyword"
          },
          {
            "name": "tryKeyword",
            "doc": "",
            "type": "compiler::Token.tryKeyword"
          },
          {
            "name": "usingKeyword",
            "doc": "",
            "type": "compiler::Token.usingKeyword"
          },
          {
            "name": "virtualKeyword",
            "doc": "",
            "type": "compiler::Token.virtualKeyword"
          },
          {
            "name": "volatileKeyword",
            "doc": "",
            "type": "compiler::Token.volatileKeyword"
          },
          {
            "name": "voidKeyword",
            "doc": "",
            "type": "compiler::Token.voidKeyword"
          },
          {
            "name": "whileKeyword",
            "doc": "",
            "type": "compiler::Token.whileKeyword"
          },
          {
            "name": "eof",
            "doc": "",
            "type": "compiler::Token.eof"
          },
          {
            "name": "vals",
            "doc": "List of Token values indexed by ordinal\n",
            "type": "compiler::Token.vals"
          },
          {
            "name": "keywords",
            "doc": "Get a map of the keywords\n",
            "type": "compiler::Token.keywords"
          },
          {
            "name": "symbol",
            "doc": "Get string used to display token to user in error messages\n",
            "type": "compiler::Token.symbol"
          },
          {
            "name": "keyword",
            "doc": "Is this a keyword token such as \"null\"\n",
            "type": "compiler::Token.keyword"
          },
          {
            "name": "isAssign",
            "doc": "Is this an assignment token such as \"=\", etc \"+=\", etc\n",
            "type": "compiler::Token.isAssign"
          }
        ],
        "facets": [
          "sys::Serializable\n{\nsimple=true\ncollection=false\n}"
        ],
        "base": "sys::Enum"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "compile",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "qname",
                "type": "sys::Str qname"
              }
            ]
          },
          {
            "name": "genTsDecl",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "needCompileEs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "needCompileJs",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          }
        ],
        "name": "CompileJs",
        "doc": "CompileJs is used to call the compilerJs plugin to generate\njavascript for the pod if the @js facet is configured.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "hasJs",
            "doc": "",
            "type": "compiler::CompileJs.hasJs"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "validateInput",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "validatePodName",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "isValidPodName",
            "doc": "Return 'null' if pod name is valid, or return a\ndescriptive error message if name is not valid.\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "initNamespace",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "initPod",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "initDepends",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "initFiles",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "findFiles",
            "doc": "",
            "returns": "sys::File[]",
            "params": [
              {
                "name": "uris",
                "type": "sys::Uri[]? uris"
              },
              {
                "name": "ext",
                "type": "sys::Str? ext"
              }
            ]
          }
        ],
        "name": "InitInput",
        "doc": "InitInput is responsible:\n  - verifies the CompilerInput instance\n  - checks the depends dir\n  - constructs the appropiate CNamespace\n  - initializes Comiler.pod with a PodDef\n  - tokenizes the source code from file or string input\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::InitInput.loc"
          },
          {
            "name": "input",
            "doc": "",
            "type": "compiler::InitInput.input"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "addDefaultCtor",
            "doc": "",
            "returns": "compiler::MethodDef",
            "params": [
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          }
        ],
        "name": "DefaultCtor",
        "doc": "DefaultCtor adds a default public constructor called make()\nif no constructor was explicitly specified.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "resolveImports",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "resolveImportedTypes",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "addAll",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "types",
                "type": "[sys::Str:compiler::CType[]] types"
              },
              {
                "name": "toAdd",
                "type": "compiler::CType[] toAdd"
              }
            ]
          },
          {
            "name": "remove",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "types",
                "type": "[sys::Str:compiler::CType[]] types"
              },
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "resolveQualified",
            "doc": "Resolve a fully qualified type name into its CType representation.\nThis may be a TypeDef within the compilation units or could be\nan imported type.  If the type name cannot be resolved then we\nlog an error and return null.\n",
            "returns": "compiler::CType?",
            "params": [
              {
                "name": "cs",
                "type": "compiler::CompilerSupport cs"
              },
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "typeName",
                "type": "sys::Str typeName"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "resolvePod",
            "doc": "Resolve a pod name into its CPod representation.  If pod\ncannot be resolved then log an error and return null.\n",
            "returns": "compiler::CPod?",
            "params": [
              {
                "name": "cs",
                "type": "compiler::CompilerSupport cs"
              },
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "checkUsingPod",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "cs",
                "type": "compiler::CompilerSupport cs"
              },
              {
                "name": "podName",
                "type": "sys::Str podName"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          null
        ],
        "name": "ResolveImports",
        "doc": "ResolveImports maps every Using node in each CompilationUnit to a pod\nand ensures that it exists and that no imports are duplicated.  Then we\ncreate a map for all the types which are imported into the CompilationUnit\nso that the Parser can quickly distinguish between a type identifier and\nother identifiers.  The results of this step populate Using.resolvedXXX and\nCompilationUnit.importedTypes.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "resolved",
            "doc": "",
            "type": "compiler::ResolveImports.resolved"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "appendStaticInit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "sInit",
                "type": "compiler::Block sInit"
              },
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "normalizeMethod",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              },
              {
                "name": "iInit",
                "type": "compiler::Block iInit"
              }
            ]
          },
          {
            "name": "addImplicitReturn",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "insertSuperCtor",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "normalizeOnce",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              },
              {
                "name": "iInit",
                "type": "compiler::Block iInit"
              }
            ]
          },
          {
            "name": "callInstanceInit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "ii",
                "type": "compiler::MethodDef ii"
              }
            ]
          },
          {
            "name": "normalizeField",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "inferFieldListType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "inferFieldMapType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "genSyntheticOverrideGet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "genSyntheticOverrideSet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "fieldInitStmt",
            "doc": "",
            "returns": "compiler::ExprStmt",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          }
        ],
        "name": "Normalize",
        "doc": "Normalize the abstract syntax tree:\n  - Collapse multiple static new blocks\n  - Init static fields in static new block\n  - Init instance fields in instance new block\n  - Add implicit return in methods\n  - Add implicit super constructor call\n  - Rewrite synthetic getter/setter for override of concrete field\n  - Infer collection fields from LHS of field definition\n  - Generate once method boiler plate\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "addCtor",
            "doc": "Add constructor or enhance existing constructor.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "addFromStr",
            "doc": "Add fromStr method.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "makeField",
            "doc": "Make enum value field:  public static final Foo name = make(ord, name)\n",
            "returns": "compiler::FieldDef",
            "params": [
              {
                "name": "def",
                "type": "compiler::EnumDef def"
              }
            ]
          },
          {
            "name": "makeValsField",
            "doc": "Make vals field: List of Enum values\n",
            "returns": "compiler::FieldDef",
            "params": [

            ]
          }
        ],
        "name": "InitEnum",
        "doc": "InitEnum is used to auto-generate EnumDefs into abstract\nsyntax tree representation of the fields and method.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "checkPodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "pod",
                "type": "compiler::PodDef pod"
              }
            ]
          },
          {
            "name": "isRestrictedName",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "checkResConflicts",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "checkTypeFlags",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "checkAbstractSlots",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "checkConstType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "checkBase",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "base",
                "type": "compiler::CType base"
              }
            ]
          },
          {
            "name": "checkMixin",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "m",
                "type": "compiler::CType m"
              }
            ]
          },
          {
            "name": "checkFieldFlags",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "checkMethodFlags",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "checkParams",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "checkParam",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "p",
                "type": "compiler::ParamDef p"
              }
            ]
          },
          {
            "name": "checkParamFuncType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "param",
                "type": "compiler::ParamDef param"
              },
              {
                "name": "t",
                "type": "compiler::FuncType t"
              }
            ]
          },
          {
            "name": "checkMethodReturn",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "checkInstanceCtor",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "checkDefiniteAssign",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef? m"
              }
            ]
          },
          {
            "name": "checkOperatorMethod",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "checkFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "facets",
                "type": "compiler::FacetDef[]? facets"
              }
            ]
          },
          {
            "name": "checkFacet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FacetDef f"
              }
            ]
          },
          {
            "name": "checkExprStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ExprStmt stmt"
              }
            ]
          },
          {
            "name": "checkLocalDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::LocalDefStmt stmt"
              }
            ]
          },
          {
            "name": "checkIf",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::IfStmt stmt"
              }
            ]
          },
          {
            "name": "checkThrow",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ThrowStmt stmt"
              }
            ]
          },
          {
            "name": "checkThrowExpr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ThrowExpr expr"
              }
            ]
          },
          {
            "name": "checkFor",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ForStmt stmt"
              }
            ]
          },
          {
            "name": "checkWhile",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::WhileStmt stmt"
              }
            ]
          },
          {
            "name": "checkBreak",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::BreakStmt stmt"
              }
            ]
          },
          {
            "name": "checkContinue",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ContinueStmt stmt"
              }
            ]
          },
          {
            "name": "checkReturn",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ReturnStmt stmt"
              }
            ]
          },
          {
            "name": "checkTry",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "checkSwitch",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::SwitchStmt stmt"
              }
            ]
          },
          {
            "name": "checkTypeLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LiteralExpr expr"
              }
            ]
          },
          {
            "name": "checkSlotLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::SlotLiteralExpr expr"
              }
            ]
          },
          {
            "name": "checkListLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ListLiteralExpr expr"
              }
            ]
          },
          {
            "name": "checkMapLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::MapLiteralExpr expr"
              }
            ]
          },
          {
            "name": "checkRangeLiteral",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "range",
                "type": "compiler::RangeLiteralExpr range"
              }
            ]
          },
          {
            "name": "checkBool",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::UnaryExpr expr"
              }
            ]
          },
          {
            "name": "checkCompareNull",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::UnaryExpr expr"
              }
            ]
          },
          {
            "name": "checkBools",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::CondExpr expr"
              }
            ]
          },
          {
            "name": "checkSame",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::BinaryExpr expr"
              }
            ]
          },
          {
            "name": "checkCompare",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "lhs",
                "type": "compiler::Expr lhs"
              },
              {
                "name": "rhs",
                "type": "compiler::Expr rhs"
              }
            ]
          },
          {
            "name": "checkAssign",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::BinaryExpr expr"
              }
            ]
          },
          {
            "name": "checkElvis",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::BinaryExpr expr"
              }
            ]
          },
          {
            "name": "checkNoNullSafes",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "compiler::Expr? x"
              }
            ]
          },
          {
            "name": "checkShortcut",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "shortcut",
                "type": "compiler::ShortcutExpr shortcut"
              }
            ]
          },
          {
            "name": "checkAssignField",
            "doc": "",
            "returns": "compiler::Expr?",
            "params": [
              {
                "name": "lhs",
                "type": "compiler::FieldExpr lhs"
              },
              {
                "name": "rhs",
                "type": "compiler::Expr? rhs"
              }
            ]
          },
          {
            "name": "implicitToImmutable",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "fieldType",
                "type": "compiler::CType fieldType"
              },
              {
                "name": "rhs",
                "type": "compiler::Expr rhs"
              }
            ]
          },
          {
            "name": "checkConstruction",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "checkCall",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "checkField",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldExpr f"
              }
            ]
          },
          {
            "name": "useFieldAccessor",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "f",
                "type": "compiler::CField f"
              }
            ]
          },
          {
            "name": "checkThis",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ThisExpr expr"
              }
            ]
          },
          {
            "name": "checkSuper",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::SuperExpr expr"
              }
            ]
          },
          {
            "name": "checkTypeCheck",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::TypeCheckExpr expr"
              }
            ]
          },
          {
            "name": "checkTernary",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::TernaryExpr expr"
              }
            ]
          },
          {
            "name": "checkArgs",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "paramTypeStr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "base",
                "type": "compiler::CType base"
              },
              {
                "name": "param",
                "type": "compiler::CParam param"
              }
            ]
          },
          {
            "name": "checkValidType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          },
          {
            "name": "checkProtectionFlags",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "flags",
                "type": "sys::Int flags"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "checkTypeProtection",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "checkSlotProtection",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "setter",
                "type": "sys::Bool setter"
              }
            ]
          },
          {
            "name": "isSlotVisible",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "curType",
                "type": "compiler::TypeDef curType"
              },
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              }
            ]
          },
          {
            "name": "slotProtectionErr",
            "doc": "",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "curType",
                "type": "compiler::TypeDef curType"
              },
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              },
              {
                "name": "setter",
                "type": "sys::Bool setter"
              }
            ]
          },
          {
            "name": "checkDeprecated",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "target",
                "type": "sys::Obj target"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "box",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "coerceBoxed",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              },
              {
                "name": "expected",
                "type": "compiler::CType expected"
              },
              {
                "name": "onErr",
                "type": "|->sys::Void| onErr"
              }
            ]
          },
          {
            "name": "canCoerce",
            "doc": "Return if `coerce` would not report a compiler error.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              },
              {
                "name": "expected",
                "type": "compiler::CType expected"
              }
            ]
          },
          {
            "name": "coerce",
            "doc": "Coerce the target expression to the specified type.  If\nthe expression is not type compatible run the onErr function.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              },
              {
                "name": "expected",
                "type": "compiler::CType expected"
              },
              {
                "name": "onErr",
                "type": "|->sys::Void| onErr"
              }
            ]
          },
          {
            "name": "doCoerce",
            "doc": "Coerce the target expression to the specified type.  If\nthe expression is not type compatible run the onErr function.\nDefault Fantom behavior.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              },
              {
                "name": "expected",
                "type": "compiler::CType expected"
              },
              {
                "name": "onErr",
                "type": "|->sys::Void| onErr"
              }
            ]
          },
          {
            "name": "isFuncAutoCoerce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "actualType",
                "type": "compiler::CType actualType"
              },
              {
                "name": "expectedType",
                "type": "compiler::CType expectedType"
              }
            ]
          },
          {
            "name": "isFuncAutoCoerceMatch",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "actual",
                "type": "compiler::CType actual"
              },
              {
                "name": "expected",
                "type": "compiler::CType expected"
              }
            ]
          },
          {
            "name": "needCoerce",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "from",
                "type": "compiler::CType from"
              },
              {
                "name": "to",
                "type": "compiler::CType to"
              }
            ]
          },
          null
        ],
        "name": "CheckErrors",
        "doc": "CheckErrors walks the tree of statements and expressions looking\nfor errors the compiler can detect such as invalid type usage.  We\nattempt to leave all the error reporting to this step, so that we\ncan batch report as many errors as possible.\n\nSince CheckErrors already performs a full tree walk down to each leaf\nexpression, we also do a couple of other AST decorations in this step:\n  1) add temp local for field assignments like return ++x\n  2) add temp local for returns inside protected region\n  3) check for field accessor optimization\n  4) check for field storage requirements\n  5) add implicit coersions: auto-casts, boxing, to non-nullable\n  6) implicit call to toImmutable when assigning to const field\n  7) mark ClosureExpr.setsConst\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "protectedRegionDepth",
            "doc": "",
            "type": "compiler::CheckErrors.protectedRegionDepth"
          },
          {
            "name": "finallyDepth",
            "doc": "",
            "type": "compiler::CheckErrors.finallyDepth"
          },
          {
            "name": "isSys",
            "doc": "",
            "type": "compiler::CheckErrors.isSys"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "resolveDepend",
            "doc": "",
            "returns": "compiler::CPod?",
            "params": [
              {
                "name": "depend",
                "type": "sys::Depend depend"
              }
            ]
          }
        ],
        "name": "ResolveDepends",
        "doc": "ResolveDepends resolves each dependency to a CPod and\nchecks the version.  We also set CNamespace.depends in\nthis step.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::ResolveDepends.loc"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "resolveExprStmt",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ExprStmt stmt"
              }
            ]
          },
          {
            "name": "resolveLocalVarDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::LocalDefStmt def"
              }
            ]
          },
          {
            "name": "resolveFor",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ForStmt stmt"
              }
            ]
          },
          {
            "name": "resolveBreak",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::BreakStmt stmt"
              }
            ]
          },
          {
            "name": "resolveContinue",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::ContinueStmt stmt"
              }
            ]
          },
          {
            "name": "resolveExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "resolveLocaleLiteral",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::LocaleLiteralExpr expr"
              }
            ]
          },
          {
            "name": "resolveSlotLiteral",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::SlotLiteralExpr expr"
              }
            ]
          },
          {
            "name": "resolveList",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ListLiteralExpr expr"
              }
            ]
          },
          {
            "name": "resolveMap",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::MapLiteralExpr expr"
              }
            ]
          },
          {
            "name": "resolveThis",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ThisExpr expr"
              }
            ]
          },
          {
            "name": "resolveSuper",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::SuperExpr expr"
              }
            ]
          },
          {
            "name": "resolveIt",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ItExpr expr"
              }
            ]
          },
          {
            "name": "resolveAssign",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::BinaryExpr expr"
              }
            ]
          },
          {
            "name": "resolveVar",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "var",
                "type": "compiler::UnknownVarExpr var"
              }
            ]
          },
          {
            "name": "resolveStorage",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "var",
                "type": "compiler::UnknownVarExpr var"
              }
            ]
          },
          {
            "name": "resolveElvis",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::BinaryExpr expr"
              }
            ]
          },
          {
            "name": "resolveTernary",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::TernaryExpr expr"
              }
            ]
          },
          {
            "name": "resolveCall",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "resolveTrapCall",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "resolveCallOnLocalVar",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              },
              {
                "name": "binding",
                "type": "compiler::LocalVarExpr binding"
              }
            ]
          },
          {
            "name": "resolveConstruction",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "findCtorMatches",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "matches",
                "type": "[sys::Str:compiler::CMethod] matches"
              },
              {
                "name": "base",
                "type": "compiler::CType base"
              },
              {
                "name": "args",
                "type": "compiler::Expr[] args"
              }
            ]
          },
          {
            "name": "isCtorMethod",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "slot",
                "type": "compiler::CSlot slot"
              }
            ]
          },
          {
            "name": "resolveShortcut",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ShortcutExpr expr"
              }
            ]
          },
          {
            "name": "resolveBinaryOperator",
            "doc": "",
            "returns": "compiler::CMethod?",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ShortcutExpr expr"
              }
            ]
          },
          {
            "name": "resolveIndexedAssign",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "orig",
                "type": "compiler::ShortcutExpr orig"
              }
            ]
          },
          {
            "name": "resolveClosure",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expr",
                "type": "compiler::ClosureExpr expr"
              }
            ]
          },
          {
            "name": "resolveDsl",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::DslExpr expr"
              }
            ]
          },
          {
            "name": "initMethodVars",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "bindToMethodVar",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::LocalDefStmt def"
              }
            ]
          },
          {
            "name": "resolveLocal",
            "doc": "",
            "returns": "compiler::MethodVar?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              }
            ]
          },
          {
            "name": "localsInScope",
            "doc": "",
            "returns": "[sys::Str:compiler::MethodVar]",
            "params": [

            ]
          },
          {
            "name": "currentBlock",
            "doc": "",
            "returns": "compiler::Block",
            "params": [

            ]
          },
          {
            "name": "isBlockInScope",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block? block"
              }
            ]
          },
          {
            "name": "findLoop",
            "doc": "",
            "returns": "compiler::Stmt?",
            "params": [

            ]
          },
          null
        ],
        "name": "ResolveExpr",
        "doc": "Walk the AST to resolve:\n  - Manage local variable scope\n  - Resolve loop for breaks and continues\n  - Resolve LocalDefStmt.init into full assignment expression\n  - Resolve Expr.ctype\n  - Resolve UknownVarExpr -> LocalVarExpr, FieldExpr, or CallExpr\n  - Resolve CallExpr to their CMethod\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "stmtStack",
            "doc": "",
            "type": "compiler::ResolveExpr.stmtStack"
          },
          {
            "name": "blockStack",
            "doc": "",
            "type": "compiler::ResolveExpr.blockStack"
          },
          {
            "name": "inClosure",
            "doc": "",
            "type": "compiler::ResolveExpr.inClosure"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "scanType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "processMethod",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "method",
                "type": "compiler::MethodDef method"
              }
            ]
          },
          {
            "name": "wrapNonFinalVars",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "walkMethod",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "method",
                "type": "compiler::MethodDef method"
              }
            ]
          },
          {
            "name": "fixLocalDef",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::LocalDefStmt stmt"
              }
            ]
          },
          {
            "name": "initWrapper",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "var",
                "type": "compiler::MethodVar var"
              },
              {
                "name": "init",
                "type": "compiler::Expr init"
              }
            ]
          },
          {
            "name": "fixWrappedVar",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "local",
                "type": "compiler::LocalVarExpr local"
              }
            ]
          },
          {
            "name": "fixWrappedParams",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "method",
                "type": "compiler::MethodDef method"
              }
            ]
          },
          {
            "name": "processClosure",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "closure",
                "type": "compiler::ClosureExpr closure"
              }
            ]
          },
          {
            "name": "addVarToClosure",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "closure",
                "type": "compiler::ClosureExpr closure"
              },
              {
                "name": "var",
                "type": "compiler::MethodVar var"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              }
            ]
          },
          {
            "name": "makeOuterThisField",
            "doc": "This method is called by ClosureExpr to auto-generate the\nimplicit outer \"this\" field in the Closure's implementation\nclass:\n  1. Add $this field to closure's anonymous class\n  2. Add $this param to closure's make constructor\n  3. Pass this to closure constructor at substitute site\n  4. Set field from param in constructor\n",
            "returns": "compiler::CField",
            "params": [
              {
                "name": "closure",
                "type": "compiler::ClosureExpr closure"
              }
            ]
          },
          {
            "name": "addToClosure",
            "doc": "",
            "returns": "compiler::FieldDef",
            "params": [
              {
                "name": "closure",
                "type": "compiler::ClosureExpr closure"
              },
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "subtituteArg",
                "type": "compiler::Expr subtituteArg"
              },
              {
                "name": "info",
                "type": "sys::Str info"
              }
            ]
          },
          {
            "name": "genWrapper",
            "doc": "Given a variable type, generate a wrapper class of the format:\n\n  class Wrap$ctype[$n] { CType val }\n\nWrappers are used to manage variables on the heap so that they\ncan be shared between methods and closures.  We generate one\nwrapper class per variable type per pod with potentially a\nnon-nullable and nullable variant ($n suffix).\n\nEventually we'd probably like to share wrappers for common types\nlike Int, Str, Obj, etc.\n\nReturn the val field of the wrapper.\n",
            "returns": "compiler::CField",
            "params": [
              {
                "name": "cs",
                "type": "compiler::CompilerSupport cs"
              },
              {
                "name": "ctype",
                "type": "compiler::CType ctype"
              }
            ]
          },
          {
            "name": "toSafe",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "n",
                "type": "sys::Str n"
              }
            ]
          },
          {
            "name": "fieldExpr",
            "doc": "",
            "returns": "compiler::FieldExpr",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "target",
                "type": "compiler::Expr target"
              },
              {
                "name": "field",
                "type": "compiler::CField field"
              }
            ]
          },
          null
        ],
        "name": "ClosureVars",
        "doc": "ClosureVars is used to process closure variables which have\nbeen enclosed from their parent scope:\n\n ResolveExpr\n -----------\n ResolveExpr we detected variables used from parent scope\n and created shadow variables in the closure's scope with\n a reference via 'MethodVar.shadows'.  Also during this step\n we note any variables which are reassigned making them\n non-final (according to Java final variable semantics).\n\n Process Method\n --------------\n First we walk all types looking for methods which use\n closure variables:\n\n  1. For each one walk thru its variables to see if any variables\n     enclosed are non-final (reassigned at some point).  These\n     variables as hoisted onto the heap with wrappers:\n        class Wrapper$T { new make(T v) { val=v }  T val }\n\n  2. If no wrapped variables, then we can leave a cvars method\n     alone - everything stays the same.  If however we do have\n     wrapped variables, then we need to walk the expr tree of\n     the method replacing all access of the variable with its\n     wrapper access:\n        x := 3     =>   x := Wrapper$Int(3)\n        x = x + 1  =>   x.val = x.val + 1\n\n  3. If any params were wrapped, we generated a new local variable\n     in 'wrapNonFinalVars'.  During the expr tree walk we replaced all\n     references to the param to its new wrapped local.   To finish\n     processing the method we insert a bit of code in the beginning\n     of the method to initialize the local.\n\n Process Closure\n ---------------\n After we have walked all methods using closure variables (which\n might include closure doCall methods themselves), then we walk\n all the closures.\n\n  1. For each shadowed variables we need:\n       a. Define field on the closure to store variable\n       b. Pass variable to closure constructor at substitution site\n       c. Add variable to as closure constructor param\n       d. Assign param to field in constructor\n     If the variable has been wrapped we are doing this for the\n     wrapped variable (we don't unwrap it).\n\n  2. If any of the closures shadowed variables are wrapped, then\n     we do a expr tree walk of doCall - the exact same thing as\n     step 2 of the processMethod stage.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "syntheticFieldFlags",
            "doc": "",
            "type": "compiler::ClosureVars.syntheticFieldFlags"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          }
        ],
        "name": "Parse",
        "doc": "Parse is responsible for parsing all the compilation units which\nhave already been tokenized into their full abstract syntax tree\nrepresentation in memory.  Once complete this step populates the\nCompiler.types list with the list of declared types.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "checkOutOfOrder",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "checkExtends",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "base",
                "type": "compiler::CType? base"
              }
            ]
          },
          {
            "name": "checkMixin",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "m",
                "type": "compiler::CType m"
              }
            ]
          }
        ],
        "name": "CheckInheritance",
        "doc": "CheckInheritance is used to check invalid extends or mixins.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "runStrMode",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "runFileMode",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "tokenize",
            "doc": "",
            "returns": "compiler::CompilationUnit",
            "params": [
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "src",
                "type": "sys::Str src"
              }
            ]
          }
        ],
        "name": "Tokenize",
        "doc": "Tokenize is responsible for parsing all the source files into a\na list of tokens.  Each source file is mapped to a CompilationUnit\nand stored in the PodDef.units field:\n  Compiler.srcFiles -> Compiler.pod.units\n\nDuring the standard pipeline this step is called by the InitInput step.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "input",
            "doc": "",
            "type": "compiler::Tokenize.input"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Not used, use load instead\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "load",
            "doc": "Run the step and return loaded Pod instance\n",
            "returns": "sys::Pod",
            "params": [

            ]
          }
        ],
        "name": "LoadPod",
        "doc": "LoadPod is used to immediately load the pod which has\njust been successfully compiled into Compiler.fpod.  This\nstep is only used with script compiles.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "inheritType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "parent",
                "type": "compiler::CType? parent"
              }
            ]
          },
          {
            "name": "inheritSlot",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "newSlot",
                "type": "compiler::CSlot newSlot"
              }
            ]
          },
          {
            "name": "matchingSignatures",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "a",
                "type": "compiler::CSlot a"
              },
              {
                "name": "b",
                "type": "compiler::CSlot b"
              }
            ]
          },
          {
            "name": "keep",
            "doc": "",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "a",
                "type": "compiler::CSlot a"
              },
              {
                "name": "b",
                "type": "compiler::CSlot b"
              }
            ]
          },
          {
            "name": "checkOverride",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "base",
                "type": "compiler::CSlot base"
              },
              {
                "name": "def",
                "type": "compiler::SlotDef def"
              }
            ]
          },
          {
            "name": "isOverrideProtectionErr",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "base",
                "type": "compiler::CSlot base"
              },
              {
                "name": "def",
                "type": "compiler::SlotDef def"
              }
            ]
          },
          {
            "name": "checkMethodMethodOverride",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "base",
                "type": "compiler::CMethod base"
              },
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "checkMethodFieldOverride",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "base",
                "type": "compiler::CMethod base"
              },
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "checkFieldFieldOverride",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              },
              {
                "name": "base",
                "type": "compiler::CField base"
              },
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          }
        ],
        "name": "Inherit",
        "doc": "Inherit processes each TypeDef to resolve the inherited slots.\nThis step is used to check invalid inheritances due to conflicting\nslots and invalid overrides.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "initCurType",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "errorChecks",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "initSingleton",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "initStruct",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "InitFacet",
        "doc": "InitFacet is used to auto-generate AST modifications to facet classes.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "ctors",
            "doc": "",
            "type": "compiler::InitFacet.ctors"
          },
          {
            "name": "fields",
            "doc": "",
            "type": "compiler::InitFacet.fields"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          }
        ],
        "name": "LocaleProps",
        "doc": "LocaleProps is used to generate or merge locale/en.props\nif any locale literals specified defaults such as '$<foo=Foo>'\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          }
        ],
        "name": "GenerateOutput",
        "doc": "GenerateOutput creates the appropriate CompilerOutput instance\nfor Compiler.output based on the configured CompilerInput.output.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "usedInSuccDef",
            "doc": "",
            "returns": "compiler::ParamDef?",
            "params": [
              {
                "name": "params",
                "type": "compiler::ParamDef[] params"
              },
              {
                "name": "index",
                "type": "sys::Int index"
              }
            ]
          }
        ],
        "name": "CheckParamDefs",
        "doc": "CheckParamDefs is used to process all the parameter default\nexpressions for all the methods.  What we are looking for is\ndefault expressions which use default expressions before it\nwhich require us to insert a store instruction.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::CheckParamDefs.name"
          },
          {
            "name": "used",
            "doc": "",
            "type": "compiler::CheckParamDefs.used"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          }
        ],
        "name": "Assemble",
        "doc": "Assemble is responsible for assembling the resolved, analyzed,\nnormalized abstract syntax tree into it's fcode representation\nin memory as a FPod stored on compiler.fpod.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "process",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::ClosureExpr c"
              }
            ]
          },
          {
            "name": "setup",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::ClosureExpr c"
              }
            ]
          },
          {
            "name": "genClass",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "genCtor",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "genDoCall",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "genCall",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "genMethodCall",
            "doc": "This method overrides either call(List) or callx(A...) to push the\nargs onto the stack, then redirect to the specified CallExpr c.\nWe share this code for both closures and curries.\n",
            "returns": "compiler::MethodDef",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "loc",
                "type": "compiler::Loc loc"
              },
              {
                "name": "parent",
                "type": "compiler::TypeDef parent"
              },
              {
                "name": "signature",
                "type": "compiler::FuncType signature"
              },
              {
                "name": "c",
                "type": "compiler::CallExpr c"
              },
              {
                "name": "firstAsTarget",
                "type": "sys::Bool firstAsTarget"
              }
            ]
          },
          {
            "name": "substitute",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "InitClosures",
        "doc": "During the Parse step we created a list of all the closures.\nIn InitClosures we map each ClosureExpr into a TypeDef as\nan anonymous class, then we map ClosureExpr.substitute to\ncall the constructor anonymous class.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "closure",
            "doc": "",
            "type": "compiler::InitClosures.closure"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::InitClosures.loc"
          },
          {
            "name": "signature",
            "doc": "",
            "type": "compiler::InitClosures.signature"
          },
          {
            "name": "enclosingType",
            "doc": "",
            "type": "compiler::InitClosures.enclosingType"
          },
          {
            "name": "cls",
            "doc": "",
            "type": "compiler::InitClosures.cls"
          },
          {
            "name": "ctor",
            "doc": "",
            "type": "compiler::InitClosures.ctor"
          },
          {
            "name": "doCall",
            "doc": "",
            "type": "compiler::InitClosures.doCall"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Run the step\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "Constructor takes the associated Compiler\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          }
        ],
        "name": "ScanForUsingsAndTypes",
        "doc": "ScanForUsingsAndTypes is the first phase in a two pass parser.  Here\nwe scan thru the tokens to parse using declarations and type definitions\nso that we can fully define the namespace of types.  The result of this\nstep is to populate each CompilationUnit's using and types, and the\nPodDef.typeDefs map.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              },
              {
                "name": "allTypes",
                "type": "[sys::Str:compiler::TypeDef] allTypes"
              }
            ]
          },
          {
            "name": "parse",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "parseUsing",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "tok",
                "type": "compiler::TokenVal tok"
              }
            ]
          },
          {
            "name": "parseType",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "tok",
                "type": "compiler::TokenVal tok"
              }
            ]
          },
          {
            "name": "consumeId",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "verify",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "expected",
                "type": "compiler::Token expected"
              }
            ]
          },
          {
            "name": "consume",
            "doc": "",
            "returns": "compiler::TokenVal",
            "params": [
              {
                "name": "expected",
                "type": "compiler::Token? expected"
              }
            ]
          },
          {
            "name": "curt",
            "doc": "",
            "returns": "compiler::Token",
            "params": [

            ]
          },
          null
        ],
        "name": "UsingAndTypeScanner",
        "doc": "UsingAndTypeScanner\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "unit",
            "doc": "",
            "type": "compiler::UsingAndTypeScanner.unit"
          },
          {
            "name": "tokens",
            "doc": "",
            "type": "compiler::UsingAndTypeScanner.tokens"
          },
          {
            "name": "pos",
            "doc": "",
            "type": "compiler::UsingAndTypeScanner.pos"
          },
          {
            "name": "isSys",
            "doc": "",
            "type": "compiler::UsingAndTypeScanner.isSys"
          },
          {
            "name": "allTypes",
            "doc": "",
            "type": "compiler::UsingAndTypeScanner.allTypes"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "process",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "closure",
                "type": "compiler::ClosureExpr closure"
              }
            ]
          },
          {
            "name": "isAlwaysImmutable",
            "doc": "Are all the fields known to be const types?\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "cls",
                "type": "compiler::TypeDef cls"
              }
            ]
          },
          {
            "name": "isNeverImmutable",
            "doc": "Are any of the fields known to never be immutable?\nIf any field is not immutable, then return meaningful error message.\n",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "cls",
                "type": "compiler::TypeDef cls"
              }
            ]
          },
          {
            "name": "setAllFieldsConst",
            "doc": "Set const flag on every field def.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "cls",
                "type": "compiler::TypeDef cls"
              }
            ]
          },
          {
            "name": "genIsImmutable",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "cls",
                "type": "compiler::TypeDef cls"
              },
              {
                "name": "result",
                "type": "compiler::Expr result"
              }
            ]
          },
          {
            "name": "genToImmutableErr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "cls",
                "type": "compiler::TypeDef cls"
              },
              {
                "name": "msg",
                "type": "sys::Str msg"
              }
            ]
          },
          {
            "name": "genToImmutable",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "cls",
                "type": "compiler::TypeDef cls"
              }
            ]
          },
          {
            "name": "stubToImmutable",
            "doc": "",
            "returns": "compiler::MethodDef",
            "params": [
              {
                "name": "cls",
                "type": "compiler::TypeDef cls"
              }
            ]
          }
        ],
        "name": "ClosureToImmutable",
        "doc": "ClosureToImmutable processes each closure to determine\nits immutability.  At this point, all the enclosed variables\nhave been mapped to fields by ClosureVars.  So we have\nthree cases:\n\n 1. If every field is known const, then the function is\n    always immutable, and we can just override isImmutable\n    to return true.\n\n 2. If any field is known to never be const, then the function\n    can never be immutable, and we just use Func defaults for\n    isImmutable and toImmutable.\n\n 3. In the last case we have fields like Obj or List which require\n    us calling toImmutable.  In this case we generate a toImmutable\n    method which constructs a new closure instance by calling\n    toImmutable on each field.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "processClosure",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::ClosureExpr c"
              }
            ]
          },
          {
            "name": "processCtor",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "ctor",
                "type": "compiler::MethodDef ctor"
              }
            ]
          },
          {
            "name": "itBlockVar",
            "doc": "",
            "returns": "compiler::MethodVar",
            "params": [

            ]
          },
          {
            "name": "genFieldCheck",
            "doc": "",
            "returns": "compiler::MethodDef?",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          }
        ],
        "name": "ConstChecks",
        "doc": "ConstChecks adds hooks into constructors and it-blocks\nto ensure that an attempt to set a const field will throw\nConstErr if not in the objects constructor.  We also use\nthis step to insert the runtime checks for non-nullable fields.\n\nFor each it-block which sets const fields:\n\n  doCall(Foo it)\n  {\n    this.checkInCtor(it)\n    ...\n  }\n\nFor each constructor which takes an it-block:\n\n  new make(..., |This| f)\n  {\n    f?.enterCtor(this)\n    ...\n    checksField$Foo()  // if non-nullable fields need runtime checks\n    f?.exitCtor()      // for every return\n    return\n  }\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "curCtor",
            "doc": "",
            "type": "compiler::ConstChecks.curCtor"
          },
          {
            "name": "fieldCheck",
            "doc": "",
            "type": "compiler::ConstChecks.fieldCheck"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "Not used, use write instead\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "write",
            "doc": "Run the step and return pod file written\n",
            "returns": "sys::File",
            "params": [

            ]
          },
          {
            "name": "writeStr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              },
              {
                "name": "path",
                "type": "sys::Uri path"
              },
              {
                "name": "content",
                "type": "sys::Str content"
              }
            ]
          },
          {
            "name": "writeRes",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              },
              {
                "name": "file",
                "type": "sys::File file"
              },
              {
                "name": "path",
                "type": "sys::Uri? path"
              }
            ]
          },
          {
            "name": "writeResZip",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              },
              {
                "name": "resFile",
                "type": "sys::File resFile"
              }
            ]
          },
          {
            "name": "writeSrc",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              },
              {
                "name": "file",
                "type": "sys::File file"
              }
            ]
          },
          {
            "name": "writeDocs",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              }
            ]
          },
          {
            "name": "writePodDocs",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              }
            ]
          },
          {
            "name": "writeApiDoc",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "zip",
                "type": "sys::Zip zip"
              },
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          null
        ],
        "name": "WritePod",
        "doc": "WritePod writes the FPod to a zip file.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::WritePod.loc"
          },
          {
            "name": "noFacets",
            "doc": "",
            "type": "compiler::WritePod.noFacets"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "walk",
            "doc": "Peform a walk of the abstract syntax tree down\nto the specified depth.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "c",
                "type": "compiler::Compiler c"
              },
              {
                "name": "depth",
                "type": "compiler::VisitDepth depth"
              }
            ]
          },
          {
            "name": "enterUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "exitUnit",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "unit",
                "type": "compiler::CompilationUnit unit"
              }
            ]
          },
          {
            "name": "enterTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "exitTypeDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "visitTypeDef",
            "doc": "Callback when visiting a type definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::TypeDef def"
              }
            ]
          },
          {
            "name": "enterFieldDef",
            "doc": "Callback when entering a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "exitFieldDef",
            "doc": "Callback when exiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "visitFieldDef",
            "doc": "Callback when visiting a field definition.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::FieldDef def"
              }
            ]
          },
          {
            "name": "enterMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "exitMethodDef",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "visitMethodDef",
            "doc": "Callback when visiting a method.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "def",
                "type": "compiler::MethodDef def"
              }
            ]
          },
          {
            "name": "enterBlock",
            "doc": "Callback when entering a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "exitBlock",
            "doc": "Callback when exiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "visitBlock",
            "doc": "Callback when visiting a block.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "block",
                "type": "compiler::Block block"
              }
            ]
          },
          {
            "name": "enterStmt",
            "doc": "Callback when entering a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "exitStmt",
            "doc": "Callback when exiting a stmt.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "visitStmt",
            "doc": "Callback when visiting a stmt.  Return a list to replace\nthe statement with new statements, or return null to\nkeep existing statement.\n",
            "returns": "compiler::Stmt[]?",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::Stmt stmt"
              }
            ]
          },
          {
            "name": "enterFinally",
            "doc": "Callback when entering a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "exitFinally",
            "doc": "Callback when exiting a finally block\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "stmt",
                "type": "compiler::TryStmt stmt"
              }
            ]
          },
          {
            "name": "visitExpr",
            "doc": "Call to visit an expression.  Return expr or a new\nexpression if doing a replacement for the expression in\nthe abstract syntax tree.\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "run",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inStatic",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "process",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::CType t"
              }
            ]
          }
        ],
        "name": "OrderByInheritance",
        "doc": "OrderByInheritance orders the list of TypeDefs from top to bottom\nsuch that any inherited types are guaranteed to be positioned first\nin the types list.  During this process we check for duplicate type\nnames and cyclic inheritance.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "doc": "",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "processing",
            "doc": "",
            "type": "compiler::OrderByInheritance.processing"
          },
          {
            "name": "todo",
            "doc": "",
            "type": "compiler::OrderByInheritance.todo"
          },
          {
            "name": "ordered",
            "doc": "",
            "type": "compiler::OrderByInheritance.ordered"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerStep"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Constructor\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              }
            ]
          },
          {
            "name": "fold",
            "doc": "Check shortcut expression for constant folding\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              }
            ]
          },
          {
            "name": "exprToConst",
            "doc": "",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr? expr"
              }
            ]
          },
          {
            "name": "constToExpr",
            "doc": "",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "orig",
                "type": "compiler::Expr orig"
              },
              {
                "name": "val",
                "type": "sys::Obj? val"
              }
            ]
          },
          null
        ],
        "name": "ConstantFolder",
        "doc": "ConstantFolder is used to implement constant folding optimizations\nwhere known literals and operations can be performed ahead of time\nby the compiler.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "never",
            "doc": "",
            "type": "compiler::ConstantFolder.never"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "make",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "out",
                "type": "sys::OutStream out"
              }
            ]
          },
          {
            "name": "close",
            "doc": "",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "writeType",
            "doc": "",
            "returns": "sys::This",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "writeSlot",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "s",
                "type": "compiler::SlotDef s"
              }
            ]
          },
          {
            "name": "writeFieldStart",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "f",
                "type": "compiler::FieldDef f"
              }
            ]
          },
          {
            "name": "writeMethodStart",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "m",
                "type": "compiler::MethodDef m"
              }
            ]
          },
          {
            "name": "writeAttr",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "val",
                "type": "sys::Obj? val"
              }
            ]
          },
          {
            "name": "writeFacets",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "facets",
                "type": "compiler::FacetDef[]? facets"
              }
            ]
          },
          {
            "name": "writeFacet",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "facet",
                "type": "compiler::FacetDef facet"
              }
            ]
          },
          {
            "name": "writeDoc",
            "doc": "",
            "returns": "sys::Void",
            "params": [
              {
                "name": "node",
                "type": "compiler::DefNode node"
              }
            ]
          },
          {
            "name": "w",
            "doc": "",
            "returns": "sys::This",
            "params": [
              {
                "name": "x",
                "type": "sys::Str x"
              }
            ]
          },
          {
            "name": "encodeBase",
            "doc": "",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "encodeMixins",
            "doc": "",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "encodeLoc",
            "doc": "",
            "returns": "sys::Str?",
            "params": [
              {
                "name": "n",
                "type": "compiler::DefNode n"
              },
              {
                "name": "includeFile",
                "type": "sys::Bool includeFile"
              }
            ]
          },
          {
            "name": "encodeExpr",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "expr",
                "type": "compiler::Expr expr"
              }
            ]
          },
          {
            "name": "encodeFlags",
            "doc": "",
            "returns": "sys::Str",
            "params": [
              {
                "name": "flags",
                "type": "sys::Int flags"
              }
            ]
          },
          null
        ],
        "name": "ApiDocWriter",
        "doc": "ApiDocWriter is used to write out an AST definition in\nthe Fantom API doc formatted used by compilerDoc.\nSee 'compilerDoc::ApiDocParser' for formal definition.\n",
        "fields": [
          {
            "name": "typePrefix",
            "doc": "",
            "type": "compiler::ApiDocWriter.typePrefix"
          },
          {
            "name": "slotPrefix",
            "doc": "",
            "type": "compiler::ApiDocWriter.slotPrefix"
          },
          {
            "name": "protectionMask",
            "doc": "",
            "type": "compiler::ApiDocWriter.protectionMask"
          },
          {
            "name": "out",
            "doc": "",
            "type": "compiler::ApiDocWriter.out"
          }
        ],
        "facets": [

        ],
        "base": "sys::Obj"
      },
      {
        "public": true,
        "methods": [
          {
            "name": "equals",
            "doc": "Compare this object to the specified for equality.  This method may\nbe accessed via the == and != shortcut operators.  If not overridden\nthe default implementation compares for reference equality using\nthe === operator.  If this method is overridden, then hash() must\nalso be overridden such that any two objects which return true for\nequals() must return the same value for hash().  This method must\naccept 'null' and return false.\n",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj? that"
              }
            ]
          },
          {
            "name": "compare",
            "doc": "Return a negative integer, zero, or a positive integer if this object\nis less than, equal to, or greater than the specified object:\n   this < that   =>  <0\n   this == that  =>  0\n   this > that   =>  >0\n\nThis method may also be accessed via the '<' '<=' '<=>' '>=' and '>'\nshortcut operators.  If not overridden the default implementation\ncompares the `toStr` representations.  Also see\n[docLang]`docLang::Expressions#shortcuts`.\n\nExamples:\n  3.compare(8)  =>  -1\n  8.compare(3)  =>  1\n  8.compare(8)  =>  0\n  3 <=> 8       =>  -1  // shortcut for 3.compare(8)\n",
            "returns": "sys::Int",
            "params": [
              {
                "name": "that",
                "type": "sys::Obj that"
              }
            ]
          },
          {
            "name": "hash",
            "doc": "Return a unique hashcode for this object.  If a class overrides hash()\nthen it must ensure if equals() returns true for any two objects then\nthey have same hash code.\n",
            "returns": "sys::Int",
            "params": [

            ]
          },
          {
            "name": "toStr",
            "doc": "Return a string representation of this object.\n",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "trap",
            "doc": "Trap a dynamic call for handling.  Dynamic calls are invoked\nwith the -> shortcut operator:\n  a->x        a.trap(\"x\", null)\n  a->x()      a.trap(\"x\", null)\n  a->x = b    a.trap(\"x\", [b])\n  a->x(b)     a.trap(\"x\", [b])\n  a->x(b, c)  a.trap(\"x\", [b, c])\nThe default implementation provided by Obj attempts to use\nreflection.  If name maps to a method, it is invoked with the\nspecified arguments.  If name maps to a field and args.size\nis zero, get the field.  If name maps to a field and args.size\nis one, set the field and return args[0].  Otherwise throw\nUnknownSlotErr.\n",
            "returns": "sys::Obj?",
            "params": [
              {
                "name": "name",
                "type": "sys::Str name"
              },
              {
                "name": "args",
                "type": "sys::Obj?[]? args"
              }
            ]
          },
          {
            "name": "with",
            "doc": "This method called whenever an it-block is applied to\nan object.  The default implementation calls the function\nwith 'this', and then returns 'this'.\n",
            "returns": "sys::This",
            "params": [
              {
                "name": "f",
                "type": "|sys::This->sys::Void| f"
              }
            ]
          },
          {
            "name": "isImmutable",
            "doc": "Return if this Obj is [immutable]`docLang::Concurrency#immutability`\nand safe to share between threads:\n  - an instance of a const class\n  - the result of `toImmutable` on `List`, `Map`, or `Buf`\n  - a Func object may or may not be immutable - see `sys::Func`.\n  - other instances are assumed mutable and return false\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "toImmutable",
            "doc": "Get an immutable representation of this instance or throw\nNotImmutableErr if this object cannot be represented as an\nimmutable:\n  - if type is const, return this\n  - if already an immutable List, Map, Buf, or Func return this\n  - if a List, then attempt to perform a deep clone by\n    calling toImmutable on all items\n  - if a Map, then attempt to perform a deep clone by\n    calling toImmutable on all values (keys are already immutable)\n  - some Funcs can be made immutable - see `sys::Func`\n  - if a Buf create immutable copy, see `sys::Buf`\n  - any other object throws NotImmutableErr\n",
            "returns": "sys::This",
            "params": [

            ]
          },
          {
            "name": "typeof",
            "doc": "Get the 'Type' instance which represents this object's class.\nAlso see`Type.of` or `Pod.of`.\n",
            "returns": "sys::Type",
            "params": [

            ]
          },
          {
            "name": "echo",
            "doc": "Write 'x.toStr' to standard output followed by newline.  If 'x' is\nnull then print \"null\".  If no argument is provided then print\nan empty line.\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "x",
                "type": "sys::Obj? x"
              }
            ]
          },
          {
            "name": "compiler",
            "doc": "Get the compiler.\n",
            "returns": "compiler::Compiler",
            "params": [

            ]
          },
          {
            "name": "ns",
            "doc": "Convenience for compiler.ns\n",
            "returns": "compiler::CNamespace",
            "params": [

            ]
          },
          {
            "name": "pod",
            "doc": "Convenience for compiler.pod\n",
            "returns": "compiler::PodDef",
            "params": [

            ]
          },
          {
            "name": "units",
            "doc": "Convenience for compiler.pod.units\n",
            "returns": "compiler::CompilationUnit[]",
            "params": [

            ]
          },
          {
            "name": "syntheticsUnit",
            "doc": "Get default compilation unit to use for synthetic definitions\nsuch as wrapper types.\n",
            "returns": "compiler::CompilationUnit",
            "params": [

            ]
          },
          {
            "name": "types",
            "doc": "Convenience for compiler.types\n",
            "returns": "compiler::TypeDef[]",
            "params": [

            ]
          },
          {
            "name": "log",
            "doc": "Convenience for compiler.log\n",
            "returns": "compiler::CompilerLog",
            "params": [

            ]
          },
          {
            "name": "addTypeDef",
            "doc": "Add a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "removeTypeDef",
            "doc": "Remove a synthetic type\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "t",
                "type": "compiler::TypeDef t"
              }
            ]
          },
          {
            "name": "err",
            "doc": "Create, log, and return a CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "warn",
            "doc": "Create, log, and return a warning CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "msg",
                "type": "sys::Str msg"
              },
              {
                "name": "loc",
                "type": "compiler::Loc? loc"
              }
            ]
          },
          {
            "name": "errReport",
            "doc": "Log, store, and return the specified CompilerErr.\n",
            "returns": "compiler::CompilerErr",
            "params": [
              {
                "name": "e",
                "type": "compiler::CompilerErr e"
              }
            ]
          },
          {
            "name": "bombIfErr",
            "doc": "If any errors are accumulated, then throw the first one\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          null,
          {
            "name": "make",
            "doc": "Construct with NameExpr (base class of CallExpr and UnknownVarExpr)\n",
            "returns": "sys::Void",
            "params": [
              {
                "name": "compiler",
                "type": "compiler::Compiler compiler"
              },
              {
                "name": "curType",
                "type": "compiler::TypeDef? curType"
              },
              {
                "name": "curMethod",
                "type": "compiler::MethodDef? curMethod"
              },
              {
                "name": "expr",
                "type": "compiler::NameExpr expr"
              }
            ]
          },
          {
            "name": "resolve",
            "doc": "Resolve into a method call or field access\n",
            "returns": "compiler::Expr",
            "params": [

            ]
          },
          {
            "name": "isStaticLiteral",
            "doc": "If this is a standalone name without a base target\nsuch as \"Foo\" and the name maps to a type name, then\nthis is a type literal.\n",
            "returns": "sys::Bool",
            "params": [

            ]
          },
          {
            "name": "resolveBase",
            "doc": "Resolve the base type which defines the slot we are calling.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "find",
            "doc": "Find the method or field with the specified name.\n",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "findOn",
            "doc": "",
            "returns": "compiler::CSlot?",
            "params": [
              {
                "name": "base",
                "type": "compiler::CType base"
              }
            ]
          },
          {
            "name": "isAmbiguous",
            "doc": "",
            "returns": "sys::Bool",
            "params": [
              {
                "name": "onBase",
                "type": "compiler::CSlot? onBase"
              },
              {
                "name": "onIt",
                "type": "compiler::CSlot? onIt"
              }
            ]
          },
          {
            "name": "errSig",
            "doc": "",
            "returns": "sys::Str",
            "params": [

            ]
          },
          {
            "name": "insertImplicitThisOrIt",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "resolveToExpr",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "resolveToCallExpr",
            "doc": "",
            "returns": "compiler::CallExpr",
            "params": [

            ]
          },
          {
            "name": "resolveToFieldExpr",
            "doc": "",
            "returns": "compiler::FieldExpr",
            "params": [

            ]
          },
          {
            "name": "inferClosureType",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "inferClosureTypeFromCall",
            "doc": "If the last argument to the resolved call is a closure,\nthen use the method to infer the function type.  If the\nlast arg is a closure, but the call doesn't take a closure,\nthen translate into an implicit call to Obj.with\n",
            "returns": "compiler::Expr",
            "params": [
              {
                "name": "support",
                "type": "compiler::CompilerSupport support"
              },
              {
                "name": "call",
                "type": "compiler::CallExpr call"
              },
              {
                "name": "base",
                "type": "compiler::CType base"
              }
            ]
          },
          {
            "name": "resolveForeign",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "constantFolding",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "castForThisType",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "safeToNullable",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          },
          {
            "name": "ffiCoercion",
            "doc": "",
            "returns": "sys::Void",
            "params": [

            ]
          }
        ],
        "name": "CallResolver",
        "doc": "CallResolver handles the process of resolving a CallExpr or\nUnknownVarExpr to a method call or a field access.\n",
        "fields": [
          {
            "name": "c",
            "doc": "",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "doc": "",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "doc": "",
            "type": "compiler::CallResolver.curType"
          },
          {
            "name": "curMethod",
            "doc": "",
            "type": "compiler::CallResolver.curMethod"
          },
          {
            "name": "expr",
            "doc": "",
            "type": "compiler::CallResolver.expr"
          },
          {
            "name": "loc",
            "doc": "",
            "type": "compiler::CallResolver.loc"
          },
          {
            "name": "target",
            "doc": "",
            "type": "compiler::CallResolver.target"
          },
          {
            "name": "name",
            "doc": "",
            "type": "compiler::CallResolver.name"
          },
          {
            "name": "isItAdd",
            "doc": "",
            "type": "compiler::CallResolver.isItAdd"
          },
          {
            "name": "isVar",
            "doc": "",
            "type": "compiler::CallResolver.isVar"
          },
          {
            "name": "isFuncFieldCall",
            "doc": "",
            "type": "compiler::CallResolver.isFuncFieldCall"
          },
          {
            "name": "args",
            "doc": "",
            "type": "compiler::CallResolver.args"
          },
          {
            "name": "base",
            "doc": "",
            "type": "compiler::CallResolver.base"
          },
          {
            "name": "baseIt",
            "doc": "",
            "type": "compiler::CallResolver.baseIt"
          },
          {
            "name": "found",
            "doc": "",
            "type": "compiler::CallResolver.found"
          },
          {
            "name": "foundOnIt",
            "doc": "",
            "type": "compiler::CallResolver.foundOnIt"
          },
          {
            "name": "result",
            "doc": "",
            "type": "compiler::CallResolver.result"
          }
        ],
        "facets": [

        ],
        "base": "compiler::CompilerSupport"
      },
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ],
    "name": "compiler",
    "type": "pod"
  }
]