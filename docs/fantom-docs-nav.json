[
  {
    "classes": [
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "target"
          },
          {
            "name": "targets"
          },
          {
            "name": "config"
          },
          {
            "name": "configDir"
          },
          {
            "name": "configs"
          },
          {
            "name": "applyMacros"
          },
          {
            "name": "resolveFiles"
          },
          {
            "name": "resolveDirs"
          },
          {
            "name": "resolveFilesOrDirs"
          },
          {
            "name": "dumpEnv"
          },
          {
            "name": "fatal"
          },
          {
            "name": "parseArgs"
          },
          {
            "name": "usage"
          },
          {
            "name": "main"
          },
          {
            "name": "make"
          }
        ],
        "name": "BuildScript",
        "fields": [
          {
            "name": "log",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "type": "build::BuildScript.configs$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "target"
          },
          {
            "name": "targets"
          },
          {
            "name": "config"
          },
          {
            "name": "configDir"
          },
          {
            "name": "configs"
          },
          {
            "name": "applyMacros"
          },
          {
            "name": "resolveFiles"
          },
          {
            "name": "resolveDirs"
          },
          {
            "name": "resolveFilesOrDirs"
          },
          {
            "name": "dumpEnv"
          },
          {
            "name": "fatal"
          },
          {
            "name": "parseArgs"
          },
          {
            "name": "usage"
          },
          {
            "name": "main"
          },
          {
            "name": "validate"
          },
          {
            "name": "compile"
          },
          {
            "name": "nodeJs"
          },
          {
            "name": "compileFan"
          },
          {
            "name": "stdFanCompilerInput"
          },
          {
            "name": "onCompileFan"
          },
          {
            "name": "compileJava"
          },
          {
            "name": "compileJni"
          },
          {
            "name": "compileNodeJs"
          },
          {
            "name": "compileDotnet"
          },
          {
            "name": "clean"
          },
          {
            "name": "isFantomCore"
          },
          {
            "name": "test"
          },
          {
            "name": "full"
          },
          {
            "name": "make"
          }
        ],
        "name": "BuildPod",
        "fields": [
          {
            "name": "log",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "podName",
            "type": "build::BuildPod.podName"
          },
          {
            "name": "summary",
            "type": "build::BuildPod.summary"
          },
          {
            "name": "version",
            "type": "build::BuildPod.version"
          },
          {
            "name": "depends",
            "type": "build::BuildPod.depends"
          },
          {
            "name": "meta",
            "type": "build::BuildPod.meta"
          },
          {
            "name": "index",
            "type": "build::BuildPod.index"
          },
          {
            "name": "docApi",
            "type": "build::BuildPod.docApi"
          },
          {
            "name": "docSrc",
            "type": "build::BuildPod.docSrc"
          },
          {
            "name": "srcDirs",
            "type": "build::BuildPod.srcDirs"
          },
          {
            "name": "resDirs",
            "type": "build::BuildPod.resDirs"
          },
          {
            "name": "javaDirs",
            "type": "build::BuildPod.javaDirs"
          },
          {
            "name": "jniDirs",
            "type": "build::BuildPod.jniDirs"
          },
          {
            "name": "jniPlatforms",
            "type": "build::BuildPod.jniPlatforms"
          },
          {
            "name": "dotnetDirs",
            "type": "build::BuildPod.dotnetDirs"
          },
          {
            "name": "jsDirs",
            "type": "build::BuildPod.jsDirs"
          },
          {
            "name": "jsProps",
            "type": "build::BuildPod.jsProps"
          },
          {
            "name": "dependsDir",
            "type": "build::BuildPod.dependsDir"
          },
          {
            "name": "outPodDir",
            "type": "build::BuildPod.outPodDir"
          },
          {
            "name": "outDocDir",
            "type": "build::BuildPod.outDocDir"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "target"
          },
          {
            "name": "targets"
          },
          {
            "name": "config"
          },
          {
            "name": "configDir"
          },
          {
            "name": "configs"
          },
          {
            "name": "applyMacros"
          },
          {
            "name": "resolveFiles"
          },
          {
            "name": "resolveDirs"
          },
          {
            "name": "resolveFilesOrDirs"
          },
          {
            "name": "dumpEnv"
          },
          {
            "name": "fatal"
          },
          {
            "name": "parseArgs"
          },
          {
            "name": "usage"
          },
          {
            "name": "main"
          },
          {
            "name": "validate"
          },
          {
            "name": "compile"
          },
          {
            "name": "findOutOfDateDirs"
          },
          {
            "name": "anyOutOfDate"
          },
          {
            "name": "clean"
          },
          {
            "name": "full"
          },
          {
            "name": "make"
          }
        ],
        "name": "BuildJava",
        "fields": [
          {
            "name": "log",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "jar",
            "type": "build::BuildJava.jar"
          },
          {
            "name": "packages",
            "type": "build::BuildJava.packages"
          },
          {
            "name": "cp",
            "type": "build::BuildJava.cp"
          },
          {
            "name": "mainClass",
            "type": "build::BuildJava.mainClass"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "isDebug"
          },
          {
            "name": "indent"
          },
          {
            "name": "unindent"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "info"
          },
          {
            "name": "debug"
          },
          {
            "name": "log"
          },
          {
            "name": "compilerErr"
          },
          {
            "name": "print"
          },
          {
            "name": "printLine"
          },
          {
            "name": "make"
          }
        ],
        "name": "BuildLog",
        "fields": [
          {
            "name": "level",
            "type": "compiler::CompilerLog.level"
          },
          {
            "name": "indentation",
            "type": "compiler::CompilerLog.indentation"
          },
          {
            "name": "out",
            "type": "compiler::CompilerLog.out"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "msg"
          },
          {
            "name": "cause"
          },
          {
            "name": "trace"
          },
          {
            "name": "traceToStr"
          },
          {
            "name": "make"
          }
        ],
        "name": "FatalBuildErr",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "main"
          },
          {
            "name": "make"
          }
        ],
        "name": "Main",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "run"
          },
          {
            "name": "parsePath"
          },
          {
            "name": "createEnv"
          },
          {
            "name": "createPod"
          }
        ],
        "name": "InitCmd",
        "fields": [
          {
            "name": "buildGroup",
            "type": "build::InitCmd.buildGroup"
          },
          {
            "name": "buildPod",
            "type": "build::InitCmd.buildPod"
          },
          {
            "name": "envDir",
            "type": "build::InitCmd.envDir"
          },
          {
            "name": "srcDir",
            "type": "build::InitCmd.srcDir"
          },
          {
            "name": "curDir",
            "type": "build::InitCmd.curDir"
          },
          {
            "name": "hasEnv",
            "type": "build::InitCmd.hasEnv"
          },
          {
            "name": "podName",
            "type": "build::InitCmd.podName"
          },
          {
            "name": "podPath",
            "type": "build::InitCmd.podPath"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "name"
          },
          {
            "name": "help"
          },
          {
            "name": "run"
          }
        ],
        "name": "TargetMethod",
        "fields": [
          {
            "name": "script",
            "type": "build::TargetMethod.script"
          },
          {
            "name": "method",
            "type": "build::TargetMethod.method"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "target"
          },
          {
            "name": "targets"
          },
          {
            "name": "config"
          },
          {
            "name": "configDir"
          },
          {
            "name": "configs"
          },
          {
            "name": "applyMacros"
          },
          {
            "name": "resolveFiles"
          },
          {
            "name": "resolveDirs"
          },
          {
            "name": "resolveFilesOrDirs"
          },
          {
            "name": "dumpEnv"
          },
          {
            "name": "fatal"
          },
          {
            "name": "parseArgs"
          },
          {
            "name": "usage"
          },
          {
            "name": "main"
          },
          {
            "name": "validate"
          },
          {
            "name": "compile"
          },
          {
            "name": "clean"
          },
          {
            "name": "full"
          },
          {
            "name": "make"
          }
        ],
        "name": "BuildCs",
        "fields": [
          {
            "name": "log",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "type": "build::BuildScript.targets$Store"
          },
          {
            "name": "configs$Store",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "output",
            "type": "build::BuildCs.output"
          },
          {
            "name": "targetType",
            "type": "build::BuildCs.targetType"
          },
          {
            "name": "srcDirs",
            "type": "build::BuildCs.srcDirs"
          },
          {
            "name": "libs",
            "type": "build::BuildCs.libs"
          },
          {
            "name": "skip",
            "type": "build::BuildCs.skip"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "target"
          },
          {
            "name": "targets"
          },
          {
            "name": "config"
          },
          {
            "name": "configDir"
          },
          {
            "name": "configs"
          },
          {
            "name": "applyMacros"
          },
          {
            "name": "resolveFiles"
          },
          {
            "name": "resolveDirs"
          },
          {
            "name": "resolveFilesOrDirs"
          },
          {
            "name": "dumpEnv"
          },
          {
            "name": "fatal"
          },
          {
            "name": "parseArgs"
          },
          {
            "name": "usage"
          },
          {
            "name": "main"
          },
          {
            "name": "children"
          },
          {
            "name": "runOnChildren"
          },
          {
            "name": "spawnOnChildren"
          },
          {
            "name": "make"
          }
        ],
        "name": "BuildGroup",
        "fields": [
          {
            "name": "log",
            "type": "build::BuildScript.log"
          },
          {
            "name": "scriptFile",
            "type": "build::BuildScript.scriptFile"
          },
          {
            "name": "scriptDir",
            "type": "build::BuildScript.scriptDir"
          },
          {
            "name": "devHomeDir",
            "type": "build::BuildScript.devHomeDir"
          },
          {
            "name": "targets$Store",
            "type": "build::BuildGroup.targets$Store"
          },
          {
            "name": "configs$Store",
            "type": "build::BuildScript.configs$Store"
          },
          {
            "name": "childrenScripts",
            "type": "build::BuildGroup.childrenScripts"
          },
          {
            "name": "children$Store",
            "type": "build::BuildGroup.children$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "help"
          },
          {
            "name": "run"
          },
          {
            "name": "make"
          }
        ],
        "name": "GroupTarget",
        "fields": [
          {
            "name": "script",
            "type": "build::TargetMethod.script"
          },
          {
            "name": "method",
            "type": "build::TargetMethod.method"
          },
          {
            "name": "name",
            "type": "build::GroupTarget.name"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          }
        ],
        "name": "Task",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          }
        ],
        "name": "Target",
        "fields": [
          {
            "name": "help",
            "type": "build::Target.help"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          }
        ],
        "name": "Delete",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "file",
            "type": "build::Delete.file"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          },
          {
            "name": "platLib"
          },
          {
            "name": "addFiles"
          }
        ],
        "name": "CompileJni",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "src",
            "type": "build::CompileJni.src"
          },
          {
            "name": "lib",
            "type": "build::CompileJni.lib"
          },
          {
            "name": "out",
            "type": "build::CompileJni.out"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          },
          {
            "name": "exePath"
          }
        ],
        "name": "Exec",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "process",
            "type": "build::Exec.process"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          },
          {
            "name": "rewrite"
          },
          {
            "name": "strip"
          }
        ],
        "name": "PodRewrite",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "outDir",
            "type": "build::PodRewrite.outDir"
          },
          {
            "name": "pods",
            "type": "build::PodRewrite.pods"
          },
          {
            "name": "stripJs",
            "type": "build::PodRewrite.stripJs"
          },
          {
            "name": "stripSrc",
            "type": "build::PodRewrite.stripSrc"
          },
          {
            "name": "stripDocs",
            "type": "build::PodRewrite.stripDocs"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          }
        ],
        "name": "JdkTask",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "jdkHomeDir",
            "type": "build::JdkTask.jdkHomeDir"
          },
          {
            "name": "jdkBinDir",
            "type": "build::JdkTask.jdkBinDir"
          },
          {
            "name": "javaExe",
            "type": "build::JdkTask.javaExe"
          },
          {
            "name": "javacExe",
            "type": "build::JdkTask.javacExe"
          },
          {
            "name": "jarExe",
            "type": "build::JdkTask.jarExe"
          },
          {
            "name": "rtJar",
            "type": "build::JdkTask.rtJar"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          },
          {
            "name": "cpAddExtJars"
          },
          {
            "name": "cpAddJars"
          },
          {
            "name": "listFiles"
          }
        ],
        "name": "CompileJava",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "jdkHomeDir",
            "type": "build::JdkTask.jdkHomeDir"
          },
          {
            "name": "jdkBinDir",
            "type": "build::JdkTask.jdkBinDir"
          },
          {
            "name": "javaExe",
            "type": "build::JdkTask.javaExe"
          },
          {
            "name": "javacExe",
            "type": "build::JdkTask.javacExe"
          },
          {
            "name": "jarExe",
            "type": "build::JdkTask.jarExe"
          },
          {
            "name": "rtJar",
            "type": "build::JdkTask.rtJar"
          },
          {
            "name": "params",
            "type": "build::CompileJava.params"
          },
          {
            "name": "cp",
            "type": "build::CompileJava.cp"
          },
          {
            "name": "src",
            "type": "build::CompileJava.src"
          },
          {
            "name": "outDir",
            "type": "build::CompileJava.outDir"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          }
        ],
        "name": "CreateDir",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "dir",
            "type": "build::CreateDir.dir"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          },
          {
            "name": "compile"
          }
        ],
        "name": "FanScript",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "file",
            "type": "build::FanScript.file"
          },
          {
            "name": "args",
            "type": "build::FanScript.args"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          },
          {
            "name": "verifyConfig"
          },
          {
            "name": "isMainParamsOk"
          },
          {
            "name": "initTempDir"
          },
          {
            "name": "cleanupTempDir"
          },
          {
            "name": "sysClasses"
          },
          {
            "name": "podClasses"
          },
          {
            "name": "extractClassfilesToTemp"
          },
          {
            "name": "reflect"
          },
          {
            "name": "etcFiles"
          },
          {
            "name": "copyEtcFile"
          },
          {
            "name": "manifest"
          },
          {
            "name": "main"
          },
          {
            "name": "jar"
          }
        ],
        "name": "JarDist",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "jdkHomeDir",
            "type": "build::JdkTask.jdkHomeDir"
          },
          {
            "name": "jdkBinDir",
            "type": "build::JdkTask.jdkBinDir"
          },
          {
            "name": "javaExe",
            "type": "build::JdkTask.javaExe"
          },
          {
            "name": "javacExe",
            "type": "build::JdkTask.javacExe"
          },
          {
            "name": "jarExe",
            "type": "build::JdkTask.jarExe"
          },
          {
            "name": "rtJar",
            "type": "build::JdkTask.rtJar"
          },
          {
            "name": "outFile",
            "type": "build::JarDist.outFile"
          },
          {
            "name": "mainMethod",
            "type": "build::JarDist.mainMethod"
          },
          {
            "name": "mainMethodArg",
            "type": "build::JarDist.mainMethodArg"
          },
          {
            "name": "podNames",
            "type": "build::JarDist.podNames"
          },
          {
            "name": "tempDir",
            "type": "build::JarDist.tempDir"
          },
          {
            "name": "manifestFile",
            "type": "build::JarDist.manifestFile"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          }
        ],
        "name": "CompileCs",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "dotnetHomeDir",
            "type": "build::CompileCs.dotnetHomeDir"
          },
          {
            "name": "cscExe",
            "type": "build::CompileCs.cscExe"
          },
          {
            "name": "output",
            "type": "build::CompileCs.output"
          },
          {
            "name": "targetType",
            "type": "build::CompileCs.targetType"
          },
          {
            "name": "libs",
            "type": "build::CompileCs.libs"
          },
          {
            "name": "src",
            "type": "build::CompileCs.src"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "run"
          },
          {
            "name": "log"
          },
          {
            "name": "fatal"
          },
          {
            "name": "make"
          },
          {
            "name": "zip"
          }
        ],
        "name": "CreateZip",
        "fields": [
          {
            "name": "script",
            "type": "build::Task.script"
          },
          {
            "name": "outFile",
            "type": "build::CreateZip.outFile"
          },
          {
            "name": "inDirs",
            "type": "build::CreateZip.inDirs"
          },
          {
            "name": "filter",
            "type": "build::CreateZip.filter"
          },
          {
            "name": "pathPrefix",
            "type": "build::CreateZip.pathPrefix"
          }
        ]
      }
    ],
    "name": "build",
    "type": "pod"
  },
  {
    "classes": [
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "msg"
          },
          {
            "name": "cause"
          },
          {
            "name": "trace"
          },
          {
            "name": "traceToStr"
          },
          {
            "name": "make"
          },
          {
            "name": "loc"
          },
          {
            "name": "isErr"
          },
          {
            "name": "isWarn"
          }
        ],
        "name": "CompilerErr",
        "fields": [
          {
            "name": "level",
            "type": "compiler::CompilerErr.level"
          },
          {
            "name": "file",
            "type": "compiler::CompilerErr.file"
          },
          {
            "name": "line",
            "type": "compiler::CompilerErr.line"
          },
          {
            "name": "col",
            "type": "compiler::CompilerErr.col"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "isDebug"
          },
          {
            "name": "indent"
          },
          {
            "name": "unindent"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "info"
          },
          {
            "name": "debug"
          },
          {
            "name": "log"
          },
          {
            "name": "compilerErr"
          },
          {
            "name": "print"
          },
          {
            "name": "printLine"
          }
        ],
        "name": "CompilerLog",
        "fields": [
          {
            "name": "level",
            "type": "compiler::CompilerLog.level"
          },
          {
            "name": "indentation",
            "type": "compiler::CompilerLog.indentation"
          },
          {
            "name": "out",
            "type": "compiler::CompilerLog.out"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "makeFile"
          },
          {
            "name": "makeUninit"
          },
          {
            "name": "filename"
          },
          {
            "name": "fileUri"
          },
          {
            "name": "toLocStr"
          }
        ],
        "name": "Loc",
        "fields": [
          {
            "name": "file",
            "type": "compiler::Loc.file"
          },
          {
            "name": "line",
            "type": "compiler::Loc.line"
          },
          {
            "name": "col",
            "type": "compiler::Loc.col"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "compile"
          },
          {
            "name": "frontend"
          },
          {
            "name": "backend"
          },
          {
            "name": "cleanup"
          }
        ],
        "name": "Compiler",
        "fields": [
          {
            "name": "input",
            "type": "compiler::Compiler.input"
          },
          {
            "name": "log",
            "type": "compiler::Compiler.log"
          },
          {
            "name": "errs",
            "type": "compiler::Compiler.errs"
          },
          {
            "name": "warns",
            "type": "compiler::Compiler.warns"
          },
          {
            "name": "depends",
            "type": "compiler::Compiler.depends"
          },
          {
            "name": "ns",
            "type": "compiler::Compiler.ns"
          },
          {
            "name": "pod",
            "type": "compiler::Compiler.pod"
          },
          {
            "name": "isSys",
            "type": "compiler::Compiler.isSys"
          },
          {
            "name": "srcFiles",
            "type": "compiler::Compiler.srcFiles"
          },
          {
            "name": "resFiles",
            "type": "compiler::Compiler.resFiles"
          },
          {
            "name": "jsFiles",
            "type": "compiler::Compiler.jsFiles"
          },
          {
            "name": "jsPropsFiles",
            "type": "compiler::Compiler.jsPropsFiles"
          },
          {
            "name": "types",
            "type": "compiler::Compiler.types"
          },
          {
            "name": "closures",
            "type": "compiler::Compiler.closures"
          },
          {
            "name": "wrappers",
            "type": "compiler::Compiler.wrappers"
          },
          {
            "name": "jsPod",
            "type": "compiler::Compiler.jsPod"
          },
          {
            "name": "js",
            "type": "compiler::Compiler.js"
          },
          {
            "name": "jsSourceMap",
            "type": "compiler::Compiler.jsSourceMap"
          },
          {
            "name": "cjs",
            "type": "compiler::Compiler.cjs"
          },
          {
            "name": "cjsSourceMap",
            "type": "compiler::Compiler.cjsSourceMap"
          },
          {
            "name": "esm",
            "type": "compiler::Compiler.esm"
          },
          {
            "name": "tsDecl",
            "type": "compiler::Compiler.tsDecl"
          },
          {
            "name": "localeDefs",
            "type": "compiler::Compiler.localeDefs"
          },
          {
            "name": "localeProps",
            "type": "compiler::Compiler.localeProps"
          },
          {
            "name": "fpod",
            "type": "compiler::Compiler.fpod"
          },
          {
            "name": "output",
            "type": "compiler::Compiler.output"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          }
        ],
        "name": "CompilerSupport",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          }
        ],
        "name": "Visitor",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          }
        ],
        "name": "CompilerStep",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "validate"
          },
          {
            "name": "validateReqField"
          },
          {
            "name": "make"
          }
        ],
        "name": "CompilerInput",
        "fields": [
          {
            "name": "inputLoc",
            "type": "compiler::CompilerInput.inputLoc"
          },
          {
            "name": "podName",
            "type": "compiler::CompilerInput.podName"
          },
          {
            "name": "isScript",
            "type": "compiler::CompilerInput.isScript"
          },
          {
            "name": "forceJs",
            "type": "compiler::CompilerInput.forceJs"
          },
          {
            "name": "jsReflectClosures",
            "type": "compiler::CompilerInput.jsReflectClosures"
          },
          {
            "name": "version",
            "type": "compiler::CompilerInput.version"
          },
          {
            "name": "summary",
            "type": "compiler::CompilerInput.summary"
          },
          {
            "name": "depends",
            "type": "compiler::CompilerInput.depends"
          },
          {
            "name": "ns",
            "type": "compiler::CompilerInput.ns"
          },
          {
            "name": "meta",
            "type": "compiler::CompilerInput.meta"
          },
          {
            "name": "index",
            "type": "compiler::CompilerInput.index"
          },
          {
            "name": "output",
            "type": "compiler::CompilerInput.output"
          },
          {
            "name": "log",
            "type": "compiler::CompilerInput.log"
          },
          {
            "name": "outDir",
            "type": "compiler::CompilerInput.outDir"
          },
          {
            "name": "includeDoc",
            "type": "compiler::CompilerInput.includeDoc"
          },
          {
            "name": "includeSrc",
            "type": "compiler::CompilerInput.includeSrc"
          },
          {
            "name": "isTest",
            "type": "compiler::CompilerInput.isTest"
          },
          {
            "name": "fcodeDump",
            "type": "compiler::CompilerInput.fcodeDump"
          },
          {
            "name": "mode",
            "type": "compiler::CompilerInput.mode"
          },
          {
            "name": "docTests",
            "type": "compiler::CompilerInput.docTests"
          },
          {
            "name": "baseDir",
            "type": "compiler::CompilerInput.baseDir"
          },
          {
            "name": "srcFiles",
            "type": "compiler::CompilerInput.srcFiles"
          },
          {
            "name": "resFiles",
            "type": "compiler::CompilerInput.resFiles"
          },
          {
            "name": "jsFiles",
            "type": "compiler::CompilerInput.jsFiles"
          },
          {
            "name": "jsPropsFiles",
            "type": "compiler::CompilerInput.jsPropsFiles"
          },
          {
            "name": "srcStr",
            "type": "compiler::CompilerInput.srcStr"
          },
          {
            "name": "srcStrLoc",
            "type": "compiler::CompilerInput.srcStrLoc"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "CompilerInputMode",
        "fields": [
          {
            "name": "file",
            "type": "compiler::CompilerInputMode.file"
          },
          {
            "name": "str",
            "type": "compiler::CompilerInputMode.str"
          },
          {
            "name": "vals",
            "type": "compiler::CompilerInputMode.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "msg"
          },
          {
            "name": "cause"
          },
          {
            "name": "trace"
          },
          {
            "name": "traceToStr"
          },
          {
            "name": "make"
          }
        ],
        "name": "SuppressedErr",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          }
        ],
        "name": "CompilerOutput",
        "fields": [
          {
            "name": "mode",
            "type": "compiler::CompilerOutput.mode"
          },
          {
            "name": "transientPod",
            "type": "compiler::CompilerOutput.transientPod"
          },
          {
            "name": "podFile",
            "type": "compiler::CompilerOutput.podFile"
          },
          {
            "name": "js",
            "type": "compiler::CompilerOutput.js"
          },
          {
            "name": "cjs",
            "type": "compiler::CompilerOutput.cjs"
          },
          {
            "name": "esm",
            "type": "compiler::CompilerOutput.esm"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "CompilerOutputMode",
        "fields": [
          {
            "name": "transientPod",
            "type": "compiler::CompilerOutputMode.transientPod"
          },
          {
            "name": "podFile",
            "type": "compiler::CompilerOutputMode.podFile"
          },
          {
            "name": "js",
            "type": "compiler::CompilerOutputMode.js"
          },
          {
            "name": "vals",
            "type": "compiler::CompilerOutputMode.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compileScript"
          },
          {
            "name": "compileScriptToJs"
          },
          {
            "name": "make"
          }
        ],
        "name": "Main",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "sourceFile"
          },
          {
            "name": "lineNumber"
          },
          {
            "name": "facets"
          },
          {
            "name": "enumOrdinal"
          },
          {
            "name": "utf"
          },
          {
            "name": "u2"
          },
          {
            "name": "add"
          }
        ],
        "name": "AttrAsm",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "fpod",
            "type": "compiler::AttrAsm.fpod"
          },
          {
            "name": "attrs",
            "type": "compiler::AttrAsm.attrs"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          }
        ],
        "name": "FConst",
        "fields": [
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "assemblePod"
          },
          {
            "name": "assembleMeta"
          },
          {
            "name": "assembleType"
          },
          {
            "name": "assembleField"
          },
          {
            "name": "assembleMethod"
          },
          {
            "name": "typeRef"
          },
          {
            "name": "name"
          },
          {
            "name": "assembleCode"
          },
          {
            "name": "assembleExpr"
          }
        ],
        "name": "Assembler",
        "fields": [
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "fpod",
            "type": "compiler::Assembler.fpod"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "block"
          },
          {
            "name": "stmt"
          },
          {
            "name": "ifStmt"
          },
          {
            "name": "returnStmt"
          },
          {
            "name": "throwStmt"
          },
          {
            "name": "throwOp"
          },
          {
            "name": "localVarDefStmt"
          },
          {
            "name": "whileStmt"
          },
          {
            "name": "forStmt"
          },
          {
            "name": "breakOrContinueStmt"
          },
          {
            "name": "switchStmt"
          },
          {
            "name": "computeTableRange"
          },
          {
            "name": "tableSwitchStmt"
          },
          {
            "name": "equalsSwitchStmt"
          },
          {
            "name": "switchBlock"
          },
          {
            "name": "inProtectedRegion"
          },
          {
            "name": "tryStmt"
          },
          {
            "name": "tryCatch"
          },
          {
            "name": "addToErrTable"
          },
          {
            "name": "expr"
          },
          {
            "name": "nullLiteral"
          },
          {
            "name": "boolLiteral"
          },
          {
            "name": "intLiteral"
          },
          {
            "name": "floatLiteral"
          },
          {
            "name": "decimalLiteral"
          },
          {
            "name": "strLiteral"
          },
          {
            "name": "durationLiteral"
          },
          {
            "name": "uriLiteral"
          },
          {
            "name": "typeLiteral"
          },
          {
            "name": "slotLiteral"
          },
          {
            "name": "rangeLiteral"
          },
          {
            "name": "listLiteral"
          },
          {
            "name": "mapLiteral"
          },
          {
            "name": "not"
          },
          {
            "name": "cmpNull"
          },
          {
            "name": "cmpNotNull"
          },
          {
            "name": "same"
          },
          {
            "name": "notSame"
          },
          {
            "name": "cond"
          },
          {
            "name": "or"
          },
          {
            "name": "and"
          },
          {
            "name": "condEnd"
          },
          {
            "name": "isExpr"
          },
          {
            "name": "isnotExpr"
          },
          {
            "name": "asExpr"
          },
          {
            "name": "coerce"
          },
          {
            "name": "coerceOp"
          },
          {
            "name": "elvis"
          },
          {
            "name": "ternary"
          },
          {
            "name": "closure"
          },
          {
            "name": "assign"
          },
          {
            "name": "loadLocalVar"
          },
          {
            "name": "storeLocalVar"
          },
          {
            "name": "assignLocalVar"
          },
          {
            "name": "loadField"
          },
          {
            "name": "assignField"
          },
          {
            "name": "storeField"
          },
          {
            "name": "call"
          },
          {
            "name": "dynamicCall"
          },
          {
            "name": "invokeCall"
          },
          {
            "name": "shortcut"
          },
          {
            "name": "compareOp"
          },
          {
            "name": "shortcutAssign"
          },
          {
            "name": "addStr"
          },
          {
            "name": "isEmptyStrLiteral"
          },
          {
            "name": "opType"
          },
          {
            "name": "op"
          },
          {
            "name": "mark"
          },
          {
            "name": "jump"
          },
          {
            "name": "backpatch"
          },
          {
            "name": "finishCode"
          },
          {
            "name": "finishErrTable"
          },
          {
            "name": "finishLines"
          },
          {
            "name": "line"
          }
        ],
        "name": "CodeAsm",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "loc",
            "type": "compiler::CodeAsm.loc"
          },
          {
            "name": "fpod",
            "type": "compiler::CodeAsm.fpod"
          },
          {
            "name": "curMethod",
            "type": "compiler::CodeAsm.curMethod"
          },
          {
            "name": "code",
            "type": "compiler::CodeAsm.code"
          },
          {
            "name": "errTable",
            "type": "compiler::CodeAsm.errTable"
          },
          {
            "name": "errCount",
            "type": "compiler::CodeAsm.errCount"
          },
          {
            "name": "lines",
            "type": "compiler::CodeAsm.lines"
          },
          {
            "name": "lineCount",
            "type": "compiler::CodeAsm.lineCount"
          },
          {
            "name": "lastLine",
            "type": "compiler::CodeAsm.lastLine"
          },
          {
            "name": "lastOffset",
            "type": "compiler::CodeAsm.lastOffset"
          },
          {
            "name": "loopStack",
            "type": "compiler::CodeAsm.loopStack"
          },
          {
            "name": "protectedRegions",
            "type": "compiler::CodeAsm.protectedRegions"
          },
          {
            "name": "leavesToReturn",
            "type": "compiler::CodeAsm.leavesToReturn"
          },
          {
            "name": "returnLocal",
            "type": "compiler::CodeAsm.returnLocal"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          }
        ],
        "name": "Loop",
        "fields": [
          {
            "name": "stmt",
            "type": "compiler::Loop.stmt"
          },
          {
            "name": "breaks",
            "type": "compiler::Loop.breaks"
          },
          {
            "name": "continues",
            "type": "compiler::Loop.continues"
          },
          {
            "name": "protectedRegions",
            "type": "compiler::Loop.protectedRegions"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          }
        ],
        "name": "ProtectedRegion",
        "fields": [
          {
            "name": "hasFinally",
            "type": "compiler::ProtectedRegion.hasFinally"
          },
          {
            "name": "jumpFinallys",
            "type": "compiler::ProtectedRegion.jumpFinallys"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          }
        ],
        "name": "Cond",
        "fields": [
          {
            "name": "jumpTrues",
            "type": "compiler::Cond.jumpTrues"
          },
          {
            "name": "jumpFalses",
            "type": "compiler::Cond.jumpFalses"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          }
        ],
        "name": "Node",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          }
        ],
        "name": "CNode",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "walkFacets"
          },
          {
            "name": "addFacet"
          },
          {
            "name": "printFacets"
          },
          {
            "name": "isDocumented"
          }
        ],
        "name": "DefNode",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "flags",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "facets",
            "type": "compiler::DefNode.facets"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "fromStr"
          },
          {
            "name": "text"
          }
        ],
        "name": "CDoc",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "text"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          }
        ],
        "name": "DocDef",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "lines",
            "type": "compiler::DocDef.lines"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "isEmpty"
          },
          {
            "name": "size"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "add"
          },
          {
            "name": "addAll"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walk"
          },
          {
            "name": "printOpt"
          }
        ],
        "name": "Block",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "stmts",
            "type": "compiler::Block.stmts"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          }
        ],
        "name": "Expr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "makeNull"
          },
          {
            "name": "makeTrue"
          },
          {
            "name": "makeFalse"
          },
          {
            "name": "makeStr"
          },
          {
            "name": "makeDefaultLiteral"
          }
        ],
        "name": "LiteralExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "val",
            "type": "compiler::LiteralExpr.val"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "LocaleLiteralExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "pattern",
            "type": "compiler::LocaleLiteralExpr.pattern"
          },
          {
            "name": "key",
            "type": "compiler::LocaleLiteralExpr.key"
          },
          {
            "name": "podName",
            "type": "compiler::LocaleLiteralExpr.podName"
          },
          {
            "name": "def",
            "type": "compiler::LocaleLiteralExpr.def"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "SlotLiteralExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "parent",
            "type": "compiler::SlotLiteralExpr.parent"
          },
          {
            "name": "name",
            "type": "compiler::SlotLiteralExpr.name"
          },
          {
            "name": "slot",
            "type": "compiler::SlotLiteralExpr.slot"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "RangeLiteralExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "start",
            "type": "compiler::RangeLiteralExpr.start"
          },
          {
            "name": "end",
            "type": "compiler::RangeLiteralExpr.end"
          },
          {
            "name": "exclusive",
            "type": "compiler::RangeLiteralExpr.exclusive"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "makeFor"
          },
          {
            "name": "format"
          }
        ],
        "name": "ListLiteralExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "explicitType",
            "type": "compiler::ListLiteralExpr.explicitType"
          },
          {
            "name": "vals",
            "type": "compiler::ListLiteralExpr.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "format"
          }
        ],
        "name": "MapLiteralExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "explicitType",
            "type": "compiler::MapLiteralExpr.explicitType"
          },
          {
            "name": "keys",
            "type": "compiler::MapLiteralExpr.keys"
          },
          {
            "name": "vals",
            "type": "compiler::MapLiteralExpr.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "UnaryExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "opToken",
            "type": "compiler::UnaryExpr.opToken"
          },
          {
            "name": "operand",
            "type": "compiler::UnaryExpr.operand"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "makeAssign"
          }
        ],
        "name": "BinaryExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "opToken",
            "type": "compiler::BinaryExpr.opToken"
          },
          {
            "name": "lhs",
            "type": "compiler::BinaryExpr.lhs"
          },
          {
            "name": "rhs",
            "type": "compiler::BinaryExpr.rhs"
          },
          {
            "name": "tempVar",
            "type": "compiler::BinaryExpr.tempVar"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "CondExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "opToken",
            "type": "compiler::CondExpr.opToken"
          },
          {
            "name": "operands",
            "type": "compiler::CondExpr.operands"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "NameExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "target",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "type": "compiler::NameExpr.isSafe"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "UnknownVarExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "target",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "type": "compiler::NameExpr.isSafe"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "makeWithMethod"
          },
          {
            "name": "isCompare"
          },
          {
            "name": "toCallStr"
          }
        ],
        "name": "CallExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "type": "compiler::CallExpr.synthetic"
          },
          {
            "name": "target",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "args",
            "type": "compiler::CallExpr.args"
          },
          {
            "name": "isDynamic",
            "type": "compiler::CallExpr.isDynamic"
          },
          {
            "name": "isCtorChain",
            "type": "compiler::CallExpr.isCtorChain"
          },
          {
            "name": "noParens",
            "type": "compiler::CallExpr.noParens"
          },
          {
            "name": "isCallOp",
            "type": "compiler::CallExpr.isCallOp"
          },
          {
            "name": "isItAdd",
            "type": "compiler::CallExpr.isItAdd"
          },
          {
            "name": "method",
            "type": "compiler::CallExpr.method"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "isCompare"
          },
          {
            "name": "toCallStr"
          },
          {
            "name": "makeUnary"
          },
          {
            "name": "makeBinary"
          },
          {
            "name": "makeGet"
          },
          {
            "name": "makeFrom"
          },
          {
            "name": "isAssign"
          },
          {
            "name": "isStrConcat"
          }
        ],
        "name": "ShortcutExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "type": "compiler::CallExpr.synthetic"
          },
          {
            "name": "target",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "args",
            "type": "compiler::CallExpr.args"
          },
          {
            "name": "isDynamic",
            "type": "compiler::CallExpr.isDynamic"
          },
          {
            "name": "isCtorChain",
            "type": "compiler::CallExpr.isCtorChain"
          },
          {
            "name": "noParens",
            "type": "compiler::CallExpr.noParens"
          },
          {
            "name": "isCallOp",
            "type": "compiler::CallExpr.isCallOp"
          },
          {
            "name": "isItAdd",
            "type": "compiler::CallExpr.isItAdd"
          },
          {
            "name": "method",
            "type": "compiler::CallExpr.method"
          },
          {
            "name": "op",
            "type": "compiler::ShortcutExpr.op"
          },
          {
            "name": "opToken",
            "type": "compiler::ShortcutExpr.opToken"
          },
          {
            "name": "isPostfixLeave",
            "type": "compiler::ShortcutExpr.isPostfixLeave"
          },
          {
            "name": "tempVar",
            "type": "compiler::ShortcutExpr.tempVar"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "isCompare"
          },
          {
            "name": "toCallStr"
          },
          {
            "name": "isAssign"
          },
          {
            "name": "isStrConcat"
          },
          {
            "name": "makeFrom"
          }
        ],
        "name": "IndexedAssignExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "type": "compiler::CallExpr.synthetic"
          },
          {
            "name": "target",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "args",
            "type": "compiler::CallExpr.args"
          },
          {
            "name": "isDynamic",
            "type": "compiler::CallExpr.isDynamic"
          },
          {
            "name": "isCtorChain",
            "type": "compiler::CallExpr.isCtorChain"
          },
          {
            "name": "noParens",
            "type": "compiler::CallExpr.noParens"
          },
          {
            "name": "isCallOp",
            "type": "compiler::CallExpr.isCallOp"
          },
          {
            "name": "isItAdd",
            "type": "compiler::CallExpr.isItAdd"
          },
          {
            "name": "method",
            "type": "compiler::CallExpr.method"
          },
          {
            "name": "op",
            "type": "compiler::ShortcutExpr.op"
          },
          {
            "name": "opToken",
            "type": "compiler::ShortcutExpr.opToken"
          },
          {
            "name": "isPostfixLeave",
            "type": "compiler::ShortcutExpr.isPostfixLeave"
          },
          {
            "name": "tempVar",
            "type": "compiler::ShortcutExpr.tempVar"
          },
          {
            "name": "scratchA",
            "type": "compiler::IndexedAssignExpr.scratchA"
          },
          {
            "name": "scratchB",
            "type": "compiler::IndexedAssignExpr.scratchB"
          },
          {
            "name": "setMethod",
            "type": "compiler::IndexedAssignExpr.setMethod"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "FieldExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "target",
            "type": "compiler::NameExpr.target"
          },
          {
            "name": "name",
            "type": "compiler::NameExpr.name"
          },
          {
            "name": "isSafe",
            "type": "compiler::NameExpr.isSafe"
          },
          {
            "name": "field",
            "type": "compiler::FieldExpr.field"
          },
          {
            "name": "useAccessor",
            "type": "compiler::FieldExpr.useAccessor"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "makeNoUnwrap"
          },
          {
            "name": "register"
          }
        ],
        "name": "LocalVarExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "type": "compiler::LocalVarExpr.unwrap"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "makeNoUnwrap"
          },
          {
            "name": "register"
          },
          {
            "name": "make"
          }
        ],
        "name": "ThisExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "type": "compiler::LocalVarExpr.unwrap"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "makeNoUnwrap"
          },
          {
            "name": "register"
          },
          {
            "name": "make"
          }
        ],
        "name": "SuperExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "type": "compiler::LocalVarExpr.unwrap"
          },
          {
            "name": "explicitType",
            "type": "compiler::SuperExpr.explicitType"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "makeNoUnwrap"
          },
          {
            "name": "register"
          },
          {
            "name": "make"
          }
        ],
        "name": "ItExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "var",
            "type": "compiler::LocalVarExpr.var"
          },
          {
            "name": "unwrap",
            "type": "compiler::LocalVarExpr.unwrap"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "StaticTargetExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "coerce"
          },
          {
            "name": "opStr"
          }
        ],
        "name": "TypeCheckExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "synthetic",
            "type": "compiler::TypeCheckExpr.synthetic"
          },
          {
            "name": "from",
            "type": "compiler::TypeCheckExpr.from"
          },
          {
            "name": "target",
            "type": "compiler::TypeCheckExpr.target"
          },
          {
            "name": "check",
            "type": "compiler::TypeCheckExpr.check"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "TernaryExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "condition",
            "type": "compiler::TernaryExpr.condition"
          },
          {
            "name": "trueExpr",
            "type": "compiler::TernaryExpr.trueExpr"
          },
          {
            "name": "falseExpr",
            "type": "compiler::TernaryExpr.falseExpr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "doToStr"
          }
        ],
        "name": "ComplexLiteral",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "names",
            "type": "compiler::ComplexLiteral.names"
          },
          {
            "name": "vals",
            "type": "compiler::ComplexLiteral.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          },
          {
            "name": "outerThisField"
          },
          {
            "name": "toWith"
          },
          {
            "name": "setInferredSignature"
          },
          {
            "name": "collapseExprAndReturn"
          }
        ],
        "name": "ClosureExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "enclosingType",
            "type": "compiler::ClosureExpr.enclosingType"
          },
          {
            "name": "enclosingSlot",
            "type": "compiler::ClosureExpr.enclosingSlot"
          },
          {
            "name": "enclosingClosure",
            "type": "compiler::ClosureExpr.enclosingClosure"
          },
          {
            "name": "signature",
            "type": "compiler::ClosureExpr.signature"
          },
          {
            "name": "code",
            "type": "compiler::ClosureExpr.code"
          },
          {
            "name": "name",
            "type": "compiler::ClosureExpr.name"
          },
          {
            "name": "isItBlock",
            "type": "compiler::ClosureExpr.isItBlock"
          },
          {
            "name": "substitute",
            "type": "compiler::ClosureExpr.substitute"
          },
          {
            "name": "cls",
            "type": "compiler::ClosureExpr.cls"
          },
          {
            "name": "call",
            "type": "compiler::ClosureExpr.call"
          },
          {
            "name": "doCall",
            "type": "compiler::ClosureExpr.doCall"
          },
          {
            "name": "enclosingVars",
            "type": "compiler::ClosureExpr.enclosingVars"
          },
          {
            "name": "setsConst",
            "type": "compiler::ClosureExpr.setsConst"
          },
          {
            "name": "itType",
            "type": "compiler::ClosureExpr.itType"
          },
          {
            "name": "outerThisField$Store",
            "type": "compiler::ClosureExpr.outerThisField$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "DslExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "anchorType",
            "type": "compiler::DslExpr.anchorType"
          },
          {
            "name": "src",
            "type": "compiler::DslExpr.src"
          },
          {
            "name": "srcLoc",
            "type": "compiler::DslExpr.srcLoc"
          },
          {
            "name": "leadingTabs",
            "type": "compiler::DslExpr.leadingTabs"
          },
          {
            "name": "leadingSpaces",
            "type": "compiler::DslExpr.leadingSpaces"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "asTableSwitchCase"
          },
          {
            "name": "toTypeStr"
          },
          {
            "name": "assignTarget"
          },
          {
            "name": "isAssignable"
          },
          {
            "name": "isCond"
          },
          {
            "name": "isStmt"
          },
          {
            "name": "synthetic"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "isAlwaysNullable"
          },
          {
            "name": "assignRequiresTempVar"
          },
          {
            "name": "sameVarAs"
          },
          {
            "name": "ctypes"
          },
          {
            "name": "commonType"
          },
          {
            "name": "toStmt"
          },
          {
            "name": "serialize"
          },
          {
            "name": "makeForLiteral"
          },
          {
            "name": "noLeave"
          },
          {
            "name": "toDocStr"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "walkExprs"
          },
          {
            "name": "make"
          }
        ],
        "name": "ThrowExpr",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Expr.id"
          },
          {
            "name": "ctype",
            "type": "compiler::Expr.ctype"
          },
          {
            "name": "leave",
            "type": "compiler::Expr.leave"
          },
          {
            "name": "exception",
            "type": "compiler::ThrowExpr.exception"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "ExprId",
        "fields": [
          {
            "name": "nullLiteral",
            "type": "compiler::ExprId.nullLiteral"
          },
          {
            "name": "trueLiteral",
            "type": "compiler::ExprId.trueLiteral"
          },
          {
            "name": "falseLiteral",
            "type": "compiler::ExprId.falseLiteral"
          },
          {
            "name": "intLiteral",
            "type": "compiler::ExprId.intLiteral"
          },
          {
            "name": "floatLiteral",
            "type": "compiler::ExprId.floatLiteral"
          },
          {
            "name": "decimalLiteral",
            "type": "compiler::ExprId.decimalLiteral"
          },
          {
            "name": "strLiteral",
            "type": "compiler::ExprId.strLiteral"
          },
          {
            "name": "durationLiteral",
            "type": "compiler::ExprId.durationLiteral"
          },
          {
            "name": "uriLiteral",
            "type": "compiler::ExprId.uriLiteral"
          },
          {
            "name": "typeLiteral",
            "type": "compiler::ExprId.typeLiteral"
          },
          {
            "name": "localeLiteral",
            "type": "compiler::ExprId.localeLiteral"
          },
          {
            "name": "slotLiteral",
            "type": "compiler::ExprId.slotLiteral"
          },
          {
            "name": "rangeLiteral",
            "type": "compiler::ExprId.rangeLiteral"
          },
          {
            "name": "listLiteral",
            "type": "compiler::ExprId.listLiteral"
          },
          {
            "name": "mapLiteral",
            "type": "compiler::ExprId.mapLiteral"
          },
          {
            "name": "boolNot",
            "type": "compiler::ExprId.boolNot"
          },
          {
            "name": "cmpNull",
            "type": "compiler::ExprId.cmpNull"
          },
          {
            "name": "cmpNotNull",
            "type": "compiler::ExprId.cmpNotNull"
          },
          {
            "name": "elvis",
            "type": "compiler::ExprId.elvis"
          },
          {
            "name": "assign",
            "type": "compiler::ExprId.assign"
          },
          {
            "name": "same",
            "type": "compiler::ExprId.same"
          },
          {
            "name": "notSame",
            "type": "compiler::ExprId.notSame"
          },
          {
            "name": "boolOr",
            "type": "compiler::ExprId.boolOr"
          },
          {
            "name": "boolAnd",
            "type": "compiler::ExprId.boolAnd"
          },
          {
            "name": "isExpr",
            "type": "compiler::ExprId.isExpr"
          },
          {
            "name": "isnotExpr",
            "type": "compiler::ExprId.isnotExpr"
          },
          {
            "name": "asExpr",
            "type": "compiler::ExprId.asExpr"
          },
          {
            "name": "coerce",
            "type": "compiler::ExprId.coerce"
          },
          {
            "name": "call",
            "type": "compiler::ExprId.call"
          },
          {
            "name": "construction",
            "type": "compiler::ExprId.construction"
          },
          {
            "name": "shortcut",
            "type": "compiler::ExprId.shortcut"
          },
          {
            "name": "field",
            "type": "compiler::ExprId.field"
          },
          {
            "name": "localVar",
            "type": "compiler::ExprId.localVar"
          },
          {
            "name": "thisExpr",
            "type": "compiler::ExprId.thisExpr"
          },
          {
            "name": "superExpr",
            "type": "compiler::ExprId.superExpr"
          },
          {
            "name": "itExpr",
            "type": "compiler::ExprId.itExpr"
          },
          {
            "name": "staticTarget",
            "type": "compiler::ExprId.staticTarget"
          },
          {
            "name": "unknownVar",
            "type": "compiler::ExprId.unknownVar"
          },
          {
            "name": "storage",
            "type": "compiler::ExprId.storage"
          },
          {
            "name": "ternary",
            "type": "compiler::ExprId.ternary"
          },
          {
            "name": "complexLiteral",
            "type": "compiler::ExprId.complexLiteral"
          },
          {
            "name": "closure",
            "type": "compiler::ExprId.closure"
          },
          {
            "name": "dsl",
            "type": "compiler::ExprId.dsl"
          },
          {
            "name": "throwExpr",
            "type": "compiler::ExprId.throwExpr"
          },
          {
            "name": "vals",
            "type": "compiler::ExprId.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromPrefix"
          },
          {
            "name": "formatErr"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "ShortcutOp",
        "fields": [
          {
            "name": "plus",
            "type": "compiler::ShortcutOp.plus"
          },
          {
            "name": "minus",
            "type": "compiler::ShortcutOp.minus"
          },
          {
            "name": "mult",
            "type": "compiler::ShortcutOp.mult"
          },
          {
            "name": "div",
            "type": "compiler::ShortcutOp.div"
          },
          {
            "name": "mod",
            "type": "compiler::ShortcutOp.mod"
          },
          {
            "name": "negate",
            "type": "compiler::ShortcutOp.negate"
          },
          {
            "name": "increment",
            "type": "compiler::ShortcutOp.increment"
          },
          {
            "name": "decrement",
            "type": "compiler::ShortcutOp.decrement"
          },
          {
            "name": "eq",
            "type": "compiler::ShortcutOp.eq"
          },
          {
            "name": "cmp",
            "type": "compiler::ShortcutOp.cmp"
          },
          {
            "name": "get",
            "type": "compiler::ShortcutOp.get"
          },
          {
            "name": "set",
            "type": "compiler::ShortcutOp.set"
          },
          {
            "name": "add",
            "type": "compiler::ShortcutOp.add"
          },
          {
            "name": "vals",
            "type": "compiler::ShortcutOp.vals"
          },
          {
            "name": "prefixes",
            "type": "compiler::ShortcutOp.prefixes"
          },
          {
            "name": "degree",
            "type": "compiler::ShortcutOp.degree"
          },
          {
            "name": "methodName",
            "type": "compiler::ShortcutOp.methodName"
          },
          {
            "name": "isOperator",
            "type": "compiler::ShortcutOp.isOperator"
          },
          {
            "name": "symbol",
            "type": "compiler::ShortcutOp.symbol"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          }
        ],
        "name": "CompilationUnit",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "pod",
            "type": "compiler::CompilationUnit.pod"
          },
          {
            "name": "tokens",
            "type": "compiler::CompilationUnit.tokens"
          },
          {
            "name": "usings",
            "type": "compiler::CompilationUnit.usings"
          },
          {
            "name": "types",
            "type": "compiler::CompilationUnit.types"
          },
          {
            "name": "importedTypes",
            "type": "compiler::CompilationUnit.importedTypes"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "qname"
          },
          {
            "name": "get"
          }
        ],
        "name": "CFacet",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "qname"
          },
          {
            "name": "get"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "serialize"
          },
          {
            "name": "walk"
          }
        ],
        "name": "FacetDef",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "type",
            "type": "compiler::FacetDef.type"
          },
          {
            "name": "names",
            "type": "compiler::FacetDef.names"
          },
          {
            "name": "vals",
            "type": "compiler::FacetDef.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          }
        ],
        "name": "Stmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "NopStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          },
          {
            "name": "printOpt"
          }
        ],
        "name": "ExprStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "expr",
            "type": "compiler::ExprStmt.expr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          },
          {
            "name": "makeCatchVar"
          },
          {
            "name": "printOpt"
          }
        ],
        "name": "LocalDefStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "ctype",
            "type": "compiler::LocalDefStmt.ctype"
          },
          {
            "name": "name",
            "type": "compiler::LocalDefStmt.name"
          },
          {
            "name": "init",
            "type": "compiler::LocalDefStmt.init"
          },
          {
            "name": "isCatchVar",
            "type": "compiler::LocalDefStmt.isCatchVar"
          },
          {
            "name": "var",
            "type": "compiler::LocalDefStmt.var"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "IfStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "condition",
            "type": "compiler::IfStmt.condition"
          },
          {
            "name": "trueBlock",
            "type": "compiler::IfStmt.trueBlock"
          },
          {
            "name": "falseBlock",
            "type": "compiler::IfStmt.falseBlock"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          },
          {
            "name": "makeSynthetic"
          }
        ],
        "name": "ReturnStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "expr",
            "type": "compiler::ReturnStmt.expr"
          },
          {
            "name": "leaveVar",
            "type": "compiler::ReturnStmt.leaveVar"
          },
          {
            "name": "isSynthetic",
            "type": "compiler::ReturnStmt.isSynthetic"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "ThrowStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "exception",
            "type": "compiler::ThrowStmt.exception"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "ForStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "init",
            "type": "compiler::ForStmt.init"
          },
          {
            "name": "condition",
            "type": "compiler::ForStmt.condition"
          },
          {
            "name": "update",
            "type": "compiler::ForStmt.update"
          },
          {
            "name": "block",
            "type": "compiler::ForStmt.block"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "WhileStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "condition",
            "type": "compiler::WhileStmt.condition"
          },
          {
            "name": "block",
            "type": "compiler::WhileStmt.block"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "BreakStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "loop",
            "type": "compiler::BreakStmt.loop"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "ContinueStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "loop",
            "type": "compiler::ContinueStmt.loop"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "TryStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "exception",
            "type": "compiler::TryStmt.exception"
          },
          {
            "name": "block",
            "type": "compiler::TryStmt.block"
          },
          {
            "name": "catches",
            "type": "compiler::TryStmt.catches"
          },
          {
            "name": "finallyBlock",
            "type": "compiler::TryStmt.finallyBlock"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "isDefiniteAssign"
          }
        ],
        "name": "Catch",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "errType",
            "type": "compiler::Catch.errType"
          },
          {
            "name": "errVariable",
            "type": "compiler::Catch.errVariable"
          },
          {
            "name": "block",
            "type": "compiler::Catch.block"
          },
          {
            "name": "start",
            "type": "compiler::Catch.start"
          },
          {
            "name": "end",
            "type": "compiler::Catch.end"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "isExit"
          },
          {
            "name": "isDefiniteAssign"
          },
          {
            "name": "walk"
          },
          {
            "name": "walkChildren"
          },
          {
            "name": "walkExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "SwitchStmt",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "id",
            "type": "compiler::Stmt.id"
          },
          {
            "name": "condition",
            "type": "compiler::SwitchStmt.condition"
          },
          {
            "name": "cases",
            "type": "compiler::SwitchStmt.cases"
          },
          {
            "name": "defaultBlock",
            "type": "compiler::SwitchStmt.defaultBlock"
          },
          {
            "name": "isTableswitch",
            "type": "compiler::SwitchStmt.isTableswitch"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "walk"
          }
        ],
        "name": "Case",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "cases",
            "type": "compiler::Case.cases"
          },
          {
            "name": "block",
            "type": "compiler::Case.block"
          },
          {
            "name": "startOffset",
            "type": "compiler::Case.startOffset"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "StmtId",
        "fields": [
          {
            "name": "nop",
            "type": "compiler::StmtId.nop"
          },
          {
            "name": "expr",
            "type": "compiler::StmtId.expr"
          },
          {
            "name": "localDef",
            "type": "compiler::StmtId.localDef"
          },
          {
            "name": "ifStmt",
            "type": "compiler::StmtId.ifStmt"
          },
          {
            "name": "returnStmt",
            "type": "compiler::StmtId.returnStmt"
          },
          {
            "name": "throwStmt",
            "type": "compiler::StmtId.throwStmt"
          },
          {
            "name": "forStmt",
            "type": "compiler::StmtId.forStmt"
          },
          {
            "name": "whileStmt",
            "type": "compiler::StmtId.whileStmt"
          },
          {
            "name": "breakStmt",
            "type": "compiler::StmtId.breakStmt"
          },
          {
            "name": "continueStmt",
            "type": "compiler::StmtId.continueStmt"
          },
          {
            "name": "tryStmt",
            "type": "compiler::StmtId.tryStmt"
          },
          {
            "name": "switchStmt",
            "type": "compiler::StmtId.switchStmt"
          },
          {
            "name": "vals",
            "type": "compiler::StmtId.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "base"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          }
        ],
        "name": "CType",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "signature"
          },
          {
            "name": "deref"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "walkFacets"
          },
          {
            "name": "addFacet"
          },
          {
            "name": "printFacets"
          },
          {
            "name": "isDocumented"
          },
          {
            "name": "make"
          },
          {
            "name": "isClosure"
          },
          {
            "name": "addSlot"
          },
          {
            "name": "replaceSlot"
          },
          {
            "name": "staticInit"
          },
          {
            "name": "normalizeStaticInits"
          },
          {
            "name": "hasSlotDef"
          },
          {
            "name": "slotDef"
          },
          {
            "name": "fieldDef"
          },
          {
            "name": "methodDef"
          },
          {
            "name": "slotDefs"
          },
          {
            "name": "fieldDefs"
          },
          {
            "name": "staticFieldDefs"
          },
          {
            "name": "instanceFieldDefs"
          },
          {
            "name": "methodDefs"
          },
          {
            "name": "ctorDefs"
          },
          {
            "name": "enumDef"
          },
          {
            "name": "walk"
          }
        ],
        "name": "TypeDef",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::TypeDef.ns"
          },
          {
            "name": "pod",
            "type": "compiler::TypeDef.pod"
          },
          {
            "name": "name",
            "type": "compiler::TypeDef.name"
          },
          {
            "name": "qname",
            "type": "compiler::TypeDef.qname"
          },
          {
            "name": "isVal",
            "type": "compiler::TypeDef.isVal"
          },
          {
            "name": "base",
            "type": "compiler::TypeDef.base"
          },
          {
            "name": "mixins",
            "type": "compiler::TypeDef.mixins"
          },
          {
            "name": "flags",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "unit",
            "type": "compiler::TypeDef.unit"
          },
          {
            "name": "baseSpecified",
            "type": "compiler::TypeDef.baseSpecified"
          },
          {
            "name": "enumDefs",
            "type": "compiler::TypeDef.enumDefs"
          },
          {
            "name": "closures",
            "type": "compiler::TypeDef.closures"
          },
          {
            "name": "closure",
            "type": "compiler::TypeDef.closure"
          },
          {
            "name": "slotMap",
            "type": "compiler::TypeDef.slotMap"
          },
          {
            "name": "slotDefMap",
            "type": "compiler::TypeDef.slotDefMap"
          },
          {
            "name": "slotDefList",
            "type": "compiler::TypeDef.slotDefList"
          },
          {
            "name": "indexedFacets",
            "type": "compiler::TypeDef.indexedFacets"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::TypeDef.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::TypeDef.toListOf$Store"
          },
          {
            "name": "operators$Store",
            "type": "compiler::TypeDef.operators$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          },
          {
            "name": "isPod"
          }
        ],
        "name": "Using",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "podName",
            "type": "compiler::Using.podName"
          },
          {
            "name": "typeName",
            "type": "compiler::Using.typeName"
          },
          {
            "name": "asName",
            "type": "compiler::Using.asName"
          },
          {
            "name": "resolvedPod",
            "type": "compiler::Using.resolvedPod"
          },
          {
            "name": "resolvedType",
            "type": "compiler::Using.resolvedType"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          }
        ],
        "name": "CSlot",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "walkFacets"
          },
          {
            "name": "addFacet"
          },
          {
            "name": "printFacets"
          },
          {
            "name": "isDocumented"
          },
          {
            "name": "make"
          },
          {
            "name": "walk"
          }
        ],
        "name": "SlotDef",
        "fields": [
          {
            "name": "name",
            "type": "compiler::SlotDef.name"
          },
          {
            "name": "flags",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "parentDef",
            "type": "compiler::SlotDef.parentDef"
          },
          {
            "name": "overridden",
            "type": "compiler::SlotDef.overridden"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "VisitDepth",
        "fields": [
          {
            "name": "typeDef",
            "type": "compiler::VisitDepth.typeDef"
          },
          {
            "name": "slotDef",
            "type": "compiler::VisitDepth.slotDef"
          },
          {
            "name": "stmt",
            "type": "compiler::VisitDepth.stmt"
          },
          {
            "name": "expr",
            "type": "compiler::VisitDepth.expr"
          },
          {
            "name": "vals",
            "type": "compiler::VisitDepth.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "make"
          }
        ],
        "name": "ExprVisitor",
        "fields": [
          {
            "name": "func",
            "type": "compiler::ExprVisitor.func"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "fieldType"
          },
          {
            "name": "getter"
          },
          {
            "name": "setter"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          }
        ],
        "name": "CField",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "getter"
          },
          {
            "name": "setter"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "walkFacets"
          },
          {
            "name": "addFacet"
          },
          {
            "name": "printFacets"
          },
          {
            "name": "isDocumented"
          },
          {
            "name": "walk"
          },
          {
            "name": "make"
          },
          {
            "name": "hasGet"
          },
          {
            "name": "hasSet"
          },
          {
            "name": "makeAccessorExpr"
          }
        ],
        "name": "FieldDef",
        "fields": [
          {
            "name": "name",
            "type": "compiler::SlotDef.name"
          },
          {
            "name": "flags",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "fieldType",
            "type": "compiler::FieldDef.fieldType"
          },
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "parentDef",
            "type": "compiler::SlotDef.parentDef"
          },
          {
            "name": "overridden",
            "type": "compiler::SlotDef.overridden"
          },
          {
            "name": "field",
            "type": "compiler::FieldDef.field"
          },
          {
            "name": "init",
            "type": "compiler::FieldDef.init"
          },
          {
            "name": "walkInit",
            "type": "compiler::FieldDef.walkInit"
          },
          {
            "name": "get",
            "type": "compiler::FieldDef.get"
          },
          {
            "name": "set",
            "type": "compiler::FieldDef.set"
          },
          {
            "name": "concreteBase",
            "type": "compiler::FieldDef.concreteBase"
          },
          {
            "name": "inheritedRet",
            "type": "compiler::FieldDef.inheritedRet"
          },
          {
            "name": "requiresNullCheck",
            "type": "compiler::FieldDef.requiresNullCheck"
          },
          {
            "name": "enumDef",
            "type": "compiler::FieldDef.enumDef"
          },
          {
            "name": "closureInfo",
            "type": "compiler::FieldDef.closureInfo"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "name"
          },
          {
            "name": "version"
          },
          {
            "name": "depends"
          },
          {
            "name": "types"
          },
          {
            "name": "file"
          },
          {
            "name": "meta"
          },
          {
            "name": "hasJs"
          },
          {
            "name": "resolveType"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "bridge"
          }
        ],
        "name": "CPod",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "version"
          },
          {
            "name": "depends"
          },
          {
            "name": "types"
          },
          {
            "name": "file"
          },
          {
            "name": "hasJs"
          },
          {
            "name": "resolveType"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          }
        ],
        "name": "PodDef",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::PodDef.ns"
          },
          {
            "name": "name",
            "type": "compiler::PodDef.name"
          },
          {
            "name": "meta",
            "type": "compiler::PodDef.meta"
          },
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "index",
            "type": "compiler::PodDef.index"
          },
          {
            "name": "units",
            "type": "compiler::PodDef.units"
          },
          {
            "name": "typeDefs",
            "type": "compiler::PodDef.typeDefs"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "name"
          },
          {
            "name": "paramType"
          },
          {
            "name": "hasDefault"
          }
        ],
        "name": "CParam",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "hasDefault"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          }
        ],
        "name": "ParamDef",
        "fields": [
          {
            "name": "name",
            "type": "compiler::ParamDef.name"
          },
          {
            "name": "paramType",
            "type": "compiler::ParamDef.paramType"
          },
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "def",
            "type": "compiler::ParamDef.def"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "returnType"
          },
          {
            "name": "params"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "generic"
          },
          {
            "name": "calcGeneric"
          },
          {
            "name": "nameAndParamTypesToStr"
          },
          {
            "name": "hasSameParams"
          }
        ],
        "name": "CMethod",
        "fields": [

        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "returnType"
          },
          {
            "name": "params"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "generic"
          },
          {
            "name": "calcGeneric"
          },
          {
            "name": "nameAndParamTypesToStr"
          },
          {
            "name": "hasSameParams"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "walkFacets"
          },
          {
            "name": "addFacet"
          },
          {
            "name": "printFacets"
          },
          {
            "name": "isDocumented"
          },
          {
            "name": "walk"
          },
          {
            "name": "makeStaticInit"
          },
          {
            "name": "makeInstanceInit"
          },
          {
            "name": "make"
          },
          {
            "name": "isStaticInit"
          },
          {
            "name": "isNameStaticInit"
          },
          {
            "name": "isInstanceInit"
          },
          {
            "name": "isNameInstanceInit"
          },
          {
            "name": "isFieldAccessor"
          },
          {
            "name": "isFieldSetter"
          },
          {
            "name": "isItBlockCtor"
          },
          {
            "name": "addLocalVarForDef"
          },
          {
            "name": "addLocalVar"
          },
          {
            "name": "addParamVar"
          }
        ],
        "name": "MethodDef",
        "fields": [
          {
            "name": "name",
            "type": "compiler::SlotDef.name"
          },
          {
            "name": "flags",
            "type": "compiler::DefNode.flags"
          },
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "docDef",
            "type": "compiler::DefNode.docDef"
          },
          {
            "name": "facets",
            "type": "compiler::DefNode.facets"
          },
          {
            "name": "parentDef",
            "type": "compiler::SlotDef.parentDef"
          },
          {
            "name": "overridden",
            "type": "compiler::SlotDef.overridden"
          },
          {
            "name": "ret",
            "type": "compiler::MethodDef.ret"
          },
          {
            "name": "inheritedRet",
            "type": "compiler::MethodDef.inheritedRet"
          },
          {
            "name": "paramDefs",
            "type": "compiler::MethodDef.paramDefs"
          },
          {
            "name": "code",
            "type": "compiler::MethodDef.code"
          },
          {
            "name": "ctorChain",
            "type": "compiler::MethodDef.ctorChain"
          },
          {
            "name": "vars",
            "type": "compiler::MethodDef.vars"
          },
          {
            "name": "accessorFor",
            "type": "compiler::MethodDef.accessorFor"
          },
          {
            "name": "usesCvars",
            "type": "compiler::MethodDef.usesCvars"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "base"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          }
        ],
        "name": "TypeRef",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "t",
            "type": "compiler::TypeRef.t"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "w"
          },
          {
            "name": "nl"
          },
          {
            "name": "indent"
          },
          {
            "name": "unindent"
          },
          {
            "name": "flags"
          },
          {
            "name": "flagsToStr"
          }
        ],
        "name": "AstWriter",
        "fields": [
          {
            "name": "out",
            "type": "compiler::AstWriter.out"
          },
          {
            "name": "indentation",
            "type": "compiler::AstWriter.indentation"
          },
          {
            "name": "needIndent",
            "type": "compiler::AstWriter.needIndent"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "makeForParam"
          },
          {
            "name": "isParam"
          },
          {
            "name": "isWrapped"
          },
          {
            "name": "reassigned"
          }
        ],
        "name": "MethodVar",
        "fields": [
          {
            "name": "method",
            "type": "compiler::MethodVar.method"
          },
          {
            "name": "register",
            "type": "compiler::MethodVar.register"
          },
          {
            "name": "ctype",
            "type": "compiler::MethodVar.ctype"
          },
          {
            "name": "name",
            "type": "compiler::MethodVar.name"
          },
          {
            "name": "flags",
            "type": "compiler::MethodVar.flags"
          },
          {
            "name": "isCatchVar",
            "type": "compiler::MethodVar.isCatchVar"
          },
          {
            "name": "scope",
            "type": "compiler::MethodVar.scope"
          },
          {
            "name": "paramDef",
            "type": "compiler::MethodVar.paramDef"
          },
          {
            "name": "usedInClosure",
            "type": "compiler::MethodVar.usedInClosure"
          },
          {
            "name": "shadows",
            "type": "compiler::MethodVar.shadows"
          },
          {
            "name": "wrapField",
            "type": "compiler::MethodVar.wrapField"
          },
          {
            "name": "isReassigned",
            "type": "compiler::MethodVar.isReassigned"
          },
          {
            "name": "paramWrapper",
            "type": "compiler::MethodVar.paramWrapper"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "dump"
          },
          {
            "name": "print"
          },
          {
            "name": "make"
          }
        ],
        "name": "EnumDef",
        "fields": [
          {
            "name": "loc",
            "type": "compiler::Node.loc"
          },
          {
            "name": "doc",
            "type": "compiler::EnumDef.doc"
          },
          {
            "name": "facets",
            "type": "compiler::EnumDef.facets"
          },
          {
            "name": "ordinal",
            "type": "compiler::EnumDef.ordinal"
          },
          {
            "name": "name",
            "type": "compiler::EnumDef.name"
          },
          {
            "name": "ctorArgs",
            "type": "compiler::EnumDef.ctorArgs"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "find"
          },
          {
            "name": "make"
          },
          {
            "name": "compile"
          },
          {
            "name": "normalizeSrc"
          }
        ],
        "name": "DslPlugin",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "find"
          },
          {
            "name": "compile"
          },
          {
            "name": "normalizeSrc"
          },
          {
            "name": "make"
          }
        ],
        "name": "RegexDslPlugin",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "find"
          },
          {
            "name": "compile"
          },
          {
            "name": "normalizeSrc"
          },
          {
            "name": "make"
          }
        ],
        "name": "StrDslPlugin",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "writeBuf"
          },
          {
            "name": "readBuf"
          },
          {
            "name": "writeAttrs"
          },
          {
            "name": "readAttrs"
          },
          {
            "name": "writeDoc"
          },
          {
            "name": "make"
          }
        ],
        "name": "FUtil",
        "fields": [
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "types"
          },
          {
            "name": "file"
          },
          {
            "name": "hasJs"
          },
          {
            "name": "resolveType"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "make"
          },
          {
            "name": "toType"
          },
          {
            "name": "resolveTypes"
          },
          {
            "name": "n"
          },
          {
            "name": "typeRef"
          },
          {
            "name": "fieldRef"
          },
          {
            "name": "methodRef"
          },
          {
            "name": "integer"
          },
          {
            "name": "float"
          },
          {
            "name": "decimal"
          },
          {
            "name": "str"
          },
          {
            "name": "duration"
          },
          {
            "name": "uri"
          },
          {
            "name": "typeRefStr"
          },
          {
            "name": "fieldRefStr"
          },
          {
            "name": "methodRefStr"
          },
          {
            "name": "addName"
          },
          {
            "name": "addTypeRef"
          },
          {
            "name": "addFieldRef"
          },
          {
            "name": "addMethodRef"
          },
          {
            "name": "dump"
          },
          {
            "name": "read"
          },
          {
            "name": "readFully"
          },
          {
            "name": "write"
          },
          {
            "name": "writeMeta"
          },
          {
            "name": "writeIndex"
          },
          {
            "name": "prop"
          },
          {
            "name": "in"
          },
          {
            "name": "out"
          }
        ],
        "name": "FPod",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::FPod.ns"
          },
          {
            "name": "name",
            "type": "compiler::FPod.name"
          },
          {
            "name": "version",
            "type": "compiler::FPod.version"
          },
          {
            "name": "depends",
            "type": "compiler::FPod.depends"
          },
          {
            "name": "meta",
            "type": "compiler::FPod.meta"
          },
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "index",
            "type": "compiler::FPod.index"
          },
          {
            "name": "zip",
            "type": "compiler::FPod.zip"
          },
          {
            "name": "ftypes",
            "type": "compiler::FPod.ftypes"
          },
          {
            "name": "names",
            "type": "compiler::FPod.names"
          },
          {
            "name": "typeRefs",
            "type": "compiler::FPod.typeRefs"
          },
          {
            "name": "fieldRefs",
            "type": "compiler::FPod.fieldRefs"
          },
          {
            "name": "methodRefs",
            "type": "compiler::FPod.methodRefs"
          },
          {
            "name": "ints",
            "type": "compiler::FPod.ints"
          },
          {
            "name": "floats",
            "type": "compiler::FPod.floats"
          },
          {
            "name": "decimals",
            "type": "compiler::FPod.decimals"
          },
          {
            "name": "strs",
            "type": "compiler::FPod.strs"
          },
          {
            "name": "durations",
            "type": "compiler::FPod.durations"
          },
          {
            "name": "uris",
            "type": "compiler::FPod.uris"
          },
          {
            "name": "ftypesByName",
            "type": "compiler::FPod.ftypesByName"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "isGenericInstance"
          },
          {
            "name": "signature"
          },
          {
            "name": "format"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          }
        ],
        "name": "FTypeRef",
        "fields": [
          {
            "name": "podName",
            "type": "compiler::FTypeRef.podName"
          },
          {
            "name": "typeName",
            "type": "compiler::FTypeRef.typeName"
          },
          {
            "name": "sig",
            "type": "compiler::FTypeRef.sig"
          },
          {
            "name": "hashcode",
            "type": "compiler::FTypeRef.hashcode"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "format"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          }
        ],
        "name": "FFieldRef",
        "fields": [
          {
            "name": "parent",
            "type": "compiler::FFieldRef.parent"
          },
          {
            "name": "name",
            "type": "compiler::FFieldRef.name"
          },
          {
            "name": "typeRef",
            "type": "compiler::FFieldRef.typeRef"
          },
          {
            "name": "hashcode",
            "type": "compiler::FFieldRef.hashcode"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "format"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          }
        ],
        "name": "FMethodRef",
        "fields": [
          {
            "name": "parent",
            "type": "compiler::FMethodRef.parent"
          },
          {
            "name": "name",
            "type": "compiler::FMethodRef.name"
          },
          {
            "name": "ret",
            "type": "compiler::FMethodRef.ret"
          },
          {
            "name": "params",
            "type": "compiler::FMethodRef.params"
          },
          {
            "name": "hashcode",
            "type": "compiler::FMethodRef.hashcode"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "make"
          },
          {
            "name": "pod"
          },
          {
            "name": "attr"
          },
          {
            "name": "writeCommon"
          },
          {
            "name": "readCommon"
          }
        ],
        "name": "FSlot",
        "fields": [
          {
            "name": "flags",
            "type": "compiler::FSlot.flags"
          },
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fparent",
            "type": "compiler::FSlot.fparent"
          },
          {
            "name": "nameIndex",
            "type": "compiler::FSlot.nameIndex"
          },
          {
            "name": "fattrs",
            "type": "compiler::FSlot.fattrs"
          },
          {
            "name": "ffacets",
            "type": "compiler::FSlot.ffacets"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "fieldType"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "pod"
          },
          {
            "name": "attr"
          },
          {
            "name": "writeCommon"
          },
          {
            "name": "readCommon"
          },
          {
            "name": "make"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          }
        ],
        "name": "FField",
        "fields": [
          {
            "name": "flags",
            "type": "compiler::FSlot.flags"
          },
          {
            "name": "getter",
            "type": "compiler::FField.getter"
          },
          {
            "name": "setter",
            "type": "compiler::FField.setter"
          },
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fparent",
            "type": "compiler::FSlot.fparent"
          },
          {
            "name": "nameIndex",
            "type": "compiler::FSlot.nameIndex"
          },
          {
            "name": "fattrs",
            "type": "compiler::FSlot.fattrs"
          },
          {
            "name": "ffacets",
            "type": "compiler::FSlot.ffacets"
          },
          {
            "name": "typeRef",
            "type": "compiler::FField.typeRef"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "all"
          },
          {
            "name": "tables"
          },
          {
            "name": "table"
          },
          {
            "name": "ftypes"
          },
          {
            "name": "ftype"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "code"
          },
          {
            "name": "attrs"
          },
          {
            "name": "attr"
          },
          {
            "name": "sourceFileAttr"
          },
          {
            "name": "lineNumberAttr"
          },
          {
            "name": "facetsAttr"
          },
          {
            "name": "enumOrdinalAttr"
          },
          {
            "name": "errTableAttr"
          },
          {
            "name": "lineNumbersAttr"
          },
          {
            "name": "typeRef"
          },
          {
            "name": "name"
          },
          {
            "name": "flags"
          },
          {
            "name": "index"
          },
          {
            "name": "print"
          },
          {
            "name": "printLine"
          }
        ],
        "name": "FPrinter",
        "fields": [
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "pod",
            "type": "compiler::FPrinter.pod"
          },
          {
            "name": "out",
            "type": "compiler::FPrinter.out"
          },
          {
            "name": "showIndex",
            "type": "compiler::FPrinter.showIndex"
          },
          {
            "name": "showCode",
            "type": "compiler::FPrinter.showCode"
          },
          {
            "name": "showLines",
            "type": "compiler::FPrinter.showLines"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "returnType"
          },
          {
            "name": "params"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "generic"
          },
          {
            "name": "calcGeneric"
          },
          {
            "name": "nameAndParamTypesToStr"
          },
          {
            "name": "hasSameParams"
          },
          {
            "name": "pod"
          },
          {
            "name": "attr"
          },
          {
            "name": "writeCommon"
          },
          {
            "name": "readCommon"
          },
          {
            "name": "make"
          },
          {
            "name": "fparams"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          },
          {
            "name": "dump"
          }
        ],
        "name": "FMethod",
        "fields": [
          {
            "name": "flags",
            "type": "compiler::FSlot.flags"
          },
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fparent",
            "type": "compiler::FSlot.fparent"
          },
          {
            "name": "nameIndex",
            "type": "compiler::FSlot.nameIndex"
          },
          {
            "name": "fattrs",
            "type": "compiler::FSlot.fattrs"
          },
          {
            "name": "ffacets",
            "type": "compiler::FSlot.ffacets"
          },
          {
            "name": "ret",
            "type": "compiler::FMethod.ret"
          },
          {
            "name": "inheritedRet",
            "type": "compiler::FMethod.inheritedRet"
          },
          {
            "name": "vars",
            "type": "compiler::FMethod.vars"
          },
          {
            "name": "paramCount",
            "type": "compiler::FMethod.paramCount"
          },
          {
            "name": "localCount",
            "type": "compiler::FMethod.localCount"
          },
          {
            "name": "code",
            "type": "compiler::FMethod.code"
          },
          {
            "name": "maxStack",
            "type": "compiler::FMethod.maxStack"
          },
          {
            "name": "isGeneric$Store",
            "type": "compiler::FMethod.isGeneric$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "name"
          },
          {
            "name": "paramType"
          },
          {
            "name": "hasDefault"
          },
          {
            "name": "make"
          },
          {
            "name": "isParam"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          },
          {
            "name": "fpod"
          }
        ],
        "name": "FMethodVar",
        "fields": [
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "fmethod",
            "type": "compiler::FMethodVar.fmethod"
          },
          {
            "name": "nameIndex",
            "type": "compiler::FMethodVar.nameIndex"
          },
          {
            "name": "typeRef",
            "type": "compiler::FMethodVar.typeRef"
          },
          {
            "name": "flags",
            "type": "compiler::FMethodVar.flags"
          },
          {
            "name": "defNameIndex",
            "type": "compiler::FMethodVar.defNameIndex"
          },
          {
            "name": "def",
            "type": "compiler::FMethodVar.def"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "utf"
          },
          {
            "name": "u2"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          },
          {
            "name": "make"
          }
        ],
        "name": "FAttr",
        "fields": [
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "name",
            "type": "compiler::FAttr.name"
          },
          {
            "name": "data",
            "type": "compiler::FAttr.data"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "get"
          },
          {
            "name": "decode"
          },
          {
            "name": "make"
          }
        ],
        "name": "FFacet",
        "fields": [
          {
            "name": "qname",
            "type": "compiler::FFacet.qname"
          },
          {
            "name": "val",
            "type": "compiler::FFacet.val"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "code"
          },
          {
            "name": "op"
          },
          {
            "name": "printSwitch"
          },
          {
            "name": "index"
          },
          {
            "name": "print"
          },
          {
            "name": "printLine"
          }
        ],
        "name": "FCodePrinter",
        "fields": [
          {
            "name": "FCodeVersion",
            "type": "compiler::FConst.FCodeVersion"
          },
          {
            "name": "Abstract",
            "type": "compiler::FConst.Abstract"
          },
          {
            "name": "Const",
            "type": "compiler::FConst.Const"
          },
          {
            "name": "Ctor",
            "type": "compiler::FConst.Ctor"
          },
          {
            "name": "Enum",
            "type": "compiler::FConst.Enum"
          },
          {
            "name": "Facet",
            "type": "compiler::FConst.Facet"
          },
          {
            "name": "Final",
            "type": "compiler::FConst.Final"
          },
          {
            "name": "Getter",
            "type": "compiler::FConst.Getter"
          },
          {
            "name": "Internal",
            "type": "compiler::FConst.Internal"
          },
          {
            "name": "Mixin",
            "type": "compiler::FConst.Mixin"
          },
          {
            "name": "Native",
            "type": "compiler::FConst.Native"
          },
          {
            "name": "Override",
            "type": "compiler::FConst.Override"
          },
          {
            "name": "Private",
            "type": "compiler::FConst.Private"
          },
          {
            "name": "Protected",
            "type": "compiler::FConst.Protected"
          },
          {
            "name": "Public",
            "type": "compiler::FConst.Public"
          },
          {
            "name": "Setter",
            "type": "compiler::FConst.Setter"
          },
          {
            "name": "Static",
            "type": "compiler::FConst.Static"
          },
          {
            "name": "Storage",
            "type": "compiler::FConst.Storage"
          },
          {
            "name": "Synthetic",
            "type": "compiler::FConst.Synthetic"
          },
          {
            "name": "Virtual",
            "type": "compiler::FConst.Virtual"
          },
          {
            "name": "Once",
            "type": "compiler::FConst.Once"
          },
          {
            "name": "FlagsMask",
            "type": "compiler::FConst.FlagsMask"
          },
          {
            "name": "Param",
            "type": "compiler::FConst.Param"
          },
          {
            "name": "ErrTableAttr",
            "type": "compiler::FConst.ErrTableAttr"
          },
          {
            "name": "FacetsAttr",
            "type": "compiler::FConst.FacetsAttr"
          },
          {
            "name": "LineNumberAttr",
            "type": "compiler::FConst.LineNumberAttr"
          },
          {
            "name": "LineNumbersAttr",
            "type": "compiler::FConst.LineNumbersAttr"
          },
          {
            "name": "SourceFileAttr",
            "type": "compiler::FConst.SourceFileAttr"
          },
          {
            "name": "ParamDefaultAttr",
            "type": "compiler::FConst.ParamDefaultAttr"
          },
          {
            "name": "EnumOrdinalAttr",
            "type": "compiler::FConst.EnumOrdinalAttr"
          },
          {
            "name": "pod",
            "type": "compiler::FCodePrinter.pod"
          },
          {
            "name": "out",
            "type": "compiler::FCodePrinter.out"
          },
          {
            "name": "showIndex",
            "type": "compiler::FCodePrinter.showIndex"
          },
          {
            "name": "buf",
            "type": "compiler::FCodePrinter.buf"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "FOp",
        "fields": [
          {
            "name": "Nop",
            "type": "compiler::FOp.Nop"
          },
          {
            "name": "LoadNull",
            "type": "compiler::FOp.LoadNull"
          },
          {
            "name": "LoadFalse",
            "type": "compiler::FOp.LoadFalse"
          },
          {
            "name": "LoadTrue",
            "type": "compiler::FOp.LoadTrue"
          },
          {
            "name": "LoadInt",
            "type": "compiler::FOp.LoadInt"
          },
          {
            "name": "LoadFloat",
            "type": "compiler::FOp.LoadFloat"
          },
          {
            "name": "LoadDecimal",
            "type": "compiler::FOp.LoadDecimal"
          },
          {
            "name": "LoadStr",
            "type": "compiler::FOp.LoadStr"
          },
          {
            "name": "LoadDuration",
            "type": "compiler::FOp.LoadDuration"
          },
          {
            "name": "LoadType",
            "type": "compiler::FOp.LoadType"
          },
          {
            "name": "LoadUri",
            "type": "compiler::FOp.LoadUri"
          },
          {
            "name": "LoadVar",
            "type": "compiler::FOp.LoadVar"
          },
          {
            "name": "StoreVar",
            "type": "compiler::FOp.StoreVar"
          },
          {
            "name": "LoadInstance",
            "type": "compiler::FOp.LoadInstance"
          },
          {
            "name": "StoreInstance",
            "type": "compiler::FOp.StoreInstance"
          },
          {
            "name": "LoadStatic",
            "type": "compiler::FOp.LoadStatic"
          },
          {
            "name": "StoreStatic",
            "type": "compiler::FOp.StoreStatic"
          },
          {
            "name": "LoadMixinStatic",
            "type": "compiler::FOp.LoadMixinStatic"
          },
          {
            "name": "StoreMixinStatic",
            "type": "compiler::FOp.StoreMixinStatic"
          },
          {
            "name": "CallNew",
            "type": "compiler::FOp.CallNew"
          },
          {
            "name": "CallCtor",
            "type": "compiler::FOp.CallCtor"
          },
          {
            "name": "CallStatic",
            "type": "compiler::FOp.CallStatic"
          },
          {
            "name": "CallVirtual",
            "type": "compiler::FOp.CallVirtual"
          },
          {
            "name": "CallNonVirtual",
            "type": "compiler::FOp.CallNonVirtual"
          },
          {
            "name": "CallMixinStatic",
            "type": "compiler::FOp.CallMixinStatic"
          },
          {
            "name": "CallMixinVirtual",
            "type": "compiler::FOp.CallMixinVirtual"
          },
          {
            "name": "CallMixinNonVirtual",
            "type": "compiler::FOp.CallMixinNonVirtual"
          },
          {
            "name": "Jump",
            "type": "compiler::FOp.Jump"
          },
          {
            "name": "JumpTrue",
            "type": "compiler::FOp.JumpTrue"
          },
          {
            "name": "JumpFalse",
            "type": "compiler::FOp.JumpFalse"
          },
          {
            "name": "CmpEQ",
            "type": "compiler::FOp.CmpEQ"
          },
          {
            "name": "CmpNE",
            "type": "compiler::FOp.CmpNE"
          },
          {
            "name": "Cmp",
            "type": "compiler::FOp.Cmp"
          },
          {
            "name": "CmpLE",
            "type": "compiler::FOp.CmpLE"
          },
          {
            "name": "CmpLT",
            "type": "compiler::FOp.CmpLT"
          },
          {
            "name": "CmpGT",
            "type": "compiler::FOp.CmpGT"
          },
          {
            "name": "CmpGE",
            "type": "compiler::FOp.CmpGE"
          },
          {
            "name": "CmpSame",
            "type": "compiler::FOp.CmpSame"
          },
          {
            "name": "CmpNotSame",
            "type": "compiler::FOp.CmpNotSame"
          },
          {
            "name": "CmpNull",
            "type": "compiler::FOp.CmpNull"
          },
          {
            "name": "CmpNotNull",
            "type": "compiler::FOp.CmpNotNull"
          },
          {
            "name": "Return",
            "type": "compiler::FOp.Return"
          },
          {
            "name": "Pop",
            "type": "compiler::FOp.Pop"
          },
          {
            "name": "Dup",
            "type": "compiler::FOp.Dup"
          },
          {
            "name": "Is",
            "type": "compiler::FOp.Is"
          },
          {
            "name": "As",
            "type": "compiler::FOp.As"
          },
          {
            "name": "Coerce",
            "type": "compiler::FOp.Coerce"
          },
          {
            "name": "Switch",
            "type": "compiler::FOp.Switch"
          },
          {
            "name": "Throw",
            "type": "compiler::FOp.Throw"
          },
          {
            "name": "Leave",
            "type": "compiler::FOp.Leave"
          },
          {
            "name": "JumpFinally",
            "type": "compiler::FOp.JumpFinally"
          },
          {
            "name": "CatchAllStart",
            "type": "compiler::FOp.CatchAllStart"
          },
          {
            "name": "CatchErrStart",
            "type": "compiler::FOp.CatchErrStart"
          },
          {
            "name": "CatchEnd",
            "type": "compiler::FOp.CatchEnd"
          },
          {
            "name": "FinallyStart",
            "type": "compiler::FOp.FinallyStart"
          },
          {
            "name": "FinallyEnd",
            "type": "compiler::FOp.FinallyEnd"
          },
          {
            "name": "vals",
            "type": "compiler::FOp.vals"
          },
          {
            "name": "arg",
            "type": "compiler::FOp.arg"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "FOpArg",
        "fields": [
          {
            "name": "None",
            "type": "compiler::FOpArg.None"
          },
          {
            "name": "Int",
            "type": "compiler::FOpArg.Int"
          },
          {
            "name": "Float",
            "type": "compiler::FOpArg.Float"
          },
          {
            "name": "Decimal",
            "type": "compiler::FOpArg.Decimal"
          },
          {
            "name": "Str",
            "type": "compiler::FOpArg.Str"
          },
          {
            "name": "Duration",
            "type": "compiler::FOpArg.Duration"
          },
          {
            "name": "Uri",
            "type": "compiler::FOpArg.Uri"
          },
          {
            "name": "Register",
            "type": "compiler::FOpArg.Register"
          },
          {
            "name": "TypeRef",
            "type": "compiler::FOpArg.TypeRef"
          },
          {
            "name": "FieldRef",
            "type": "compiler::FOpArg.FieldRef"
          },
          {
            "name": "MethodRef",
            "type": "compiler::FOpArg.MethodRef"
          },
          {
            "name": "Jump",
            "type": "compiler::FOpArg.Jump"
          },
          {
            "name": "TypePair",
            "type": "compiler::FOpArg.TypePair"
          },
          {
            "name": "vals",
            "type": "compiler::FOpArg.vals"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "makeStrs"
          },
          {
            "name": "makeTypeRefs"
          },
          {
            "name": "makeFieldRefs"
          },
          {
            "name": "makeMethodRefs"
          },
          {
            "name": "makeInts"
          },
          {
            "name": "makeFloats"
          },
          {
            "name": "makeDecimals"
          },
          {
            "name": "makeDurations"
          },
          {
            "name": "make"
          },
          {
            "name": "isEmpty"
          },
          {
            "name": "get"
          },
          {
            "name": "add"
          },
          {
            "name": "read"
          },
          {
            "name": "write"
          }
        ],
        "name": "FTable",
        "fields": [
          {
            "name": "pod",
            "type": "compiler::FTable.pod"
          },
          {
            "name": "table",
            "type": "compiler::FTable.table"
          },
          {
            "name": "reverse",
            "type": "compiler::FTable.reverse"
          },
          {
            "name": "writer",
            "type": "compiler::FTable.writer"
          },
          {
            "name": "reader",
            "type": "compiler::FTable.reader"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "init"
          },
          {
            "name": "genericParam"
          },
          {
            "name": "sysType"
          },
          {
            "name": "sysMethod"
          },
          {
            "name": "cleanup"
          },
          {
            "name": "resolveBridge"
          },
          {
            "name": "findBridge"
          },
          {
            "name": "resolvePod"
          },
          {
            "name": "findPod"
          },
          {
            "name": "resolveType"
          },
          {
            "name": "resolveSlot"
          },
          {
            "name": "genericParameter"
          },
          {
            "name": "compiler"
          },
          {
            "name": "make"
          }
        ],
        "name": "CNamespace",
        "fields": [
          {
            "name": "bridgeCache",
            "type": "compiler::CNamespace.bridgeCache"
          },
          {
            "name": "podCache",
            "type": "compiler::CNamespace.podCache"
          },
          {
            "name": "typeCache",
            "type": "compiler::CNamespace.typeCache"
          },
          {
            "name": "c",
            "type": "compiler::CNamespace.c"
          },
          {
            "name": "depends",
            "type": "compiler::CNamespace.depends"
          },
          {
            "name": "sysPod",
            "type": "compiler::CNamespace.sysPod"
          },
          {
            "name": "genericParams",
            "type": "compiler::CNamespace.genericParams"
          },
          {
            "name": "error",
            "type": "compiler::CNamespace.error"
          },
          {
            "name": "nothingType",
            "type": "compiler::CNamespace.nothingType"
          },
          {
            "name": "itBlockType",
            "type": "compiler::CNamespace.itBlockType"
          },
          {
            "name": "objType",
            "type": "compiler::CNamespace.objType"
          },
          {
            "name": "boolType",
            "type": "compiler::CNamespace.boolType"
          },
          {
            "name": "enumType",
            "type": "compiler::CNamespace.enumType"
          },
          {
            "name": "facetType",
            "type": "compiler::CNamespace.facetType"
          },
          {
            "name": "intType",
            "type": "compiler::CNamespace.intType"
          },
          {
            "name": "floatType",
            "type": "compiler::CNamespace.floatType"
          },
          {
            "name": "decimalType",
            "type": "compiler::CNamespace.decimalType"
          },
          {
            "name": "strType",
            "type": "compiler::CNamespace.strType"
          },
          {
            "name": "strBufType",
            "type": "compiler::CNamespace.strBufType"
          },
          {
            "name": "durationType",
            "type": "compiler::CNamespace.durationType"
          },
          {
            "name": "listType",
            "type": "compiler::CNamespace.listType"
          },
          {
            "name": "mapType",
            "type": "compiler::CNamespace.mapType"
          },
          {
            "name": "funcType",
            "type": "compiler::CNamespace.funcType"
          },
          {
            "name": "errType",
            "type": "compiler::CNamespace.errType"
          },
          {
            "name": "podType",
            "type": "compiler::CNamespace.podType"
          },
          {
            "name": "typeType",
            "type": "compiler::CNamespace.typeType"
          },
          {
            "name": "slotType",
            "type": "compiler::CNamespace.slotType"
          },
          {
            "name": "fieldType",
            "type": "compiler::CNamespace.fieldType"
          },
          {
            "name": "methodType",
            "type": "compiler::CNamespace.methodType"
          },
          {
            "name": "rangeType",
            "type": "compiler::CNamespace.rangeType"
          },
          {
            "name": "testType",
            "type": "compiler::CNamespace.testType"
          },
          {
            "name": "uriType",
            "type": "compiler::CNamespace.uriType"
          },
          {
            "name": "voidType",
            "type": "compiler::CNamespace.voidType"
          },
          {
            "name": "fieldNotSetErrType",
            "type": "compiler::CNamespace.fieldNotSetErrType"
          },
          {
            "name": "notImmutableErrType",
            "type": "compiler::CNamespace.notImmutableErrType"
          },
          {
            "name": "objTrap",
            "type": "compiler::CNamespace.objTrap"
          },
          {
            "name": "objWith",
            "type": "compiler::CNamespace.objWith"
          },
          {
            "name": "objToImmutable",
            "type": "compiler::CNamespace.objToImmutable"
          },
          {
            "name": "boolNot",
            "type": "compiler::CNamespace.boolNot"
          },
          {
            "name": "intIncrement",
            "type": "compiler::CNamespace.intIncrement"
          },
          {
            "name": "intDecrement",
            "type": "compiler::CNamespace.intDecrement"
          },
          {
            "name": "intPlus",
            "type": "compiler::CNamespace.intPlus"
          },
          {
            "name": "floatPlus",
            "type": "compiler::CNamespace.floatPlus"
          },
          {
            "name": "floatMinus",
            "type": "compiler::CNamespace.floatMinus"
          },
          {
            "name": "strPlus",
            "type": "compiler::CNamespace.strPlus"
          },
          {
            "name": "strBufMake",
            "type": "compiler::CNamespace.strBufMake"
          },
          {
            "name": "strBufAdd",
            "type": "compiler::CNamespace.strBufAdd"
          },
          {
            "name": "strBufToStr",
            "type": "compiler::CNamespace.strBufToStr"
          },
          {
            "name": "listMake",
            "type": "compiler::CNamespace.listMake"
          },
          {
            "name": "listMakeObj",
            "type": "compiler::CNamespace.listMakeObj"
          },
          {
            "name": "listAdd",
            "type": "compiler::CNamespace.listAdd"
          },
          {
            "name": "mapMake",
            "type": "compiler::CNamespace.mapMake"
          },
          {
            "name": "mapSet",
            "type": "compiler::CNamespace.mapSet"
          },
          {
            "name": "enumOrdinal",
            "type": "compiler::CNamespace.enumOrdinal"
          },
          {
            "name": "funcBind",
            "type": "compiler::CNamespace.funcBind"
          },
          {
            "name": "rangeMakeInclusive",
            "type": "compiler::CNamespace.rangeMakeInclusive"
          },
          {
            "name": "rangeMakeExclusive",
            "type": "compiler::CNamespace.rangeMakeExclusive"
          },
          {
            "name": "slotFindMethod",
            "type": "compiler::CNamespace.slotFindMethod"
          },
          {
            "name": "slotFindFunc",
            "type": "compiler::CNamespace.slotFindFunc"
          },
          {
            "name": "podFind",
            "type": "compiler::CNamespace.podFind"
          },
          {
            "name": "podLocale",
            "type": "compiler::CNamespace.podLocale"
          },
          {
            "name": "typePod",
            "type": "compiler::CNamespace.typePod"
          },
          {
            "name": "typeField",
            "type": "compiler::CNamespace.typeField"
          },
          {
            "name": "typeMethod",
            "type": "compiler::CNamespace.typeMethod"
          },
          {
            "name": "funcEnterCtor",
            "type": "compiler::CNamespace.funcEnterCtor"
          },
          {
            "name": "funcExitCtor",
            "type": "compiler::CNamespace.funcExitCtor"
          },
          {
            "name": "funcCheckInCtor",
            "type": "compiler::CNamespace.funcCheckInCtor"
          },
          {
            "name": "funcCall",
            "type": "compiler::CNamespace.funcCall"
          },
          {
            "name": "fieldNotSetErrMake",
            "type": "compiler::CNamespace.fieldNotSetErrMake"
          },
          {
            "name": "notImmutableErrMake",
            "type": "compiler::CNamespace.notImmutableErrMake"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "init"
          },
          {
            "name": "genericParam"
          },
          {
            "name": "sysType"
          },
          {
            "name": "sysMethod"
          },
          {
            "name": "cleanup"
          },
          {
            "name": "resolveBridge"
          },
          {
            "name": "findBridge"
          },
          {
            "name": "resolvePod"
          },
          {
            "name": "findPod"
          },
          {
            "name": "resolveType"
          },
          {
            "name": "resolveSlot"
          },
          {
            "name": "genericParameter"
          },
          {
            "name": "compiler"
          },
          {
            "name": "make"
          }
        ],
        "name": "FPodNamespace",
        "fields": [
          {
            "name": "bridgeCache",
            "type": "compiler::CNamespace.bridgeCache"
          },
          {
            "name": "podCache",
            "type": "compiler::CNamespace.podCache"
          },
          {
            "name": "typeCache",
            "type": "compiler::CNamespace.typeCache"
          },
          {
            "name": "c",
            "type": "compiler::CNamespace.c"
          },
          {
            "name": "depends",
            "type": "compiler::CNamespace.depends"
          },
          {
            "name": "sysPod",
            "type": "compiler::CNamespace.sysPod"
          },
          {
            "name": "genericParams",
            "type": "compiler::CNamespace.genericParams"
          },
          {
            "name": "error",
            "type": "compiler::CNamespace.error"
          },
          {
            "name": "nothingType",
            "type": "compiler::CNamespace.nothingType"
          },
          {
            "name": "itBlockType",
            "type": "compiler::CNamespace.itBlockType"
          },
          {
            "name": "objType",
            "type": "compiler::CNamespace.objType"
          },
          {
            "name": "boolType",
            "type": "compiler::CNamespace.boolType"
          },
          {
            "name": "enumType",
            "type": "compiler::CNamespace.enumType"
          },
          {
            "name": "facetType",
            "type": "compiler::CNamespace.facetType"
          },
          {
            "name": "intType",
            "type": "compiler::CNamespace.intType"
          },
          {
            "name": "floatType",
            "type": "compiler::CNamespace.floatType"
          },
          {
            "name": "decimalType",
            "type": "compiler::CNamespace.decimalType"
          },
          {
            "name": "strType",
            "type": "compiler::CNamespace.strType"
          },
          {
            "name": "strBufType",
            "type": "compiler::CNamespace.strBufType"
          },
          {
            "name": "durationType",
            "type": "compiler::CNamespace.durationType"
          },
          {
            "name": "listType",
            "type": "compiler::CNamespace.listType"
          },
          {
            "name": "mapType",
            "type": "compiler::CNamespace.mapType"
          },
          {
            "name": "funcType",
            "type": "compiler::CNamespace.funcType"
          },
          {
            "name": "errType",
            "type": "compiler::CNamespace.errType"
          },
          {
            "name": "podType",
            "type": "compiler::CNamespace.podType"
          },
          {
            "name": "typeType",
            "type": "compiler::CNamespace.typeType"
          },
          {
            "name": "slotType",
            "type": "compiler::CNamespace.slotType"
          },
          {
            "name": "fieldType",
            "type": "compiler::CNamespace.fieldType"
          },
          {
            "name": "methodType",
            "type": "compiler::CNamespace.methodType"
          },
          {
            "name": "rangeType",
            "type": "compiler::CNamespace.rangeType"
          },
          {
            "name": "testType",
            "type": "compiler::CNamespace.testType"
          },
          {
            "name": "uriType",
            "type": "compiler::CNamespace.uriType"
          },
          {
            "name": "voidType",
            "type": "compiler::CNamespace.voidType"
          },
          {
            "name": "fieldNotSetErrType",
            "type": "compiler::CNamespace.fieldNotSetErrType"
          },
          {
            "name": "notImmutableErrType",
            "type": "compiler::CNamespace.notImmutableErrType"
          },
          {
            "name": "objTrap",
            "type": "compiler::CNamespace.objTrap"
          },
          {
            "name": "objWith",
            "type": "compiler::CNamespace.objWith"
          },
          {
            "name": "objToImmutable",
            "type": "compiler::CNamespace.objToImmutable"
          },
          {
            "name": "boolNot",
            "type": "compiler::CNamespace.boolNot"
          },
          {
            "name": "intIncrement",
            "type": "compiler::CNamespace.intIncrement"
          },
          {
            "name": "intDecrement",
            "type": "compiler::CNamespace.intDecrement"
          },
          {
            "name": "intPlus",
            "type": "compiler::CNamespace.intPlus"
          },
          {
            "name": "floatPlus",
            "type": "compiler::CNamespace.floatPlus"
          },
          {
            "name": "floatMinus",
            "type": "compiler::CNamespace.floatMinus"
          },
          {
            "name": "strPlus",
            "type": "compiler::CNamespace.strPlus"
          },
          {
            "name": "strBufMake",
            "type": "compiler::CNamespace.strBufMake"
          },
          {
            "name": "strBufAdd",
            "type": "compiler::CNamespace.strBufAdd"
          },
          {
            "name": "strBufToStr",
            "type": "compiler::CNamespace.strBufToStr"
          },
          {
            "name": "listMake",
            "type": "compiler::CNamespace.listMake"
          },
          {
            "name": "listMakeObj",
            "type": "compiler::CNamespace.listMakeObj"
          },
          {
            "name": "listAdd",
            "type": "compiler::CNamespace.listAdd"
          },
          {
            "name": "mapMake",
            "type": "compiler::CNamespace.mapMake"
          },
          {
            "name": "mapSet",
            "type": "compiler::CNamespace.mapSet"
          },
          {
            "name": "enumOrdinal",
            "type": "compiler::CNamespace.enumOrdinal"
          },
          {
            "name": "funcBind",
            "type": "compiler::CNamespace.funcBind"
          },
          {
            "name": "rangeMakeInclusive",
            "type": "compiler::CNamespace.rangeMakeInclusive"
          },
          {
            "name": "rangeMakeExclusive",
            "type": "compiler::CNamespace.rangeMakeExclusive"
          },
          {
            "name": "slotFindMethod",
            "type": "compiler::CNamespace.slotFindMethod"
          },
          {
            "name": "slotFindFunc",
            "type": "compiler::CNamespace.slotFindFunc"
          },
          {
            "name": "podFind",
            "type": "compiler::CNamespace.podFind"
          },
          {
            "name": "podLocale",
            "type": "compiler::CNamespace.podLocale"
          },
          {
            "name": "typePod",
            "type": "compiler::CNamespace.typePod"
          },
          {
            "name": "typeField",
            "type": "compiler::CNamespace.typeField"
          },
          {
            "name": "typeMethod",
            "type": "compiler::CNamespace.typeMethod"
          },
          {
            "name": "funcEnterCtor",
            "type": "compiler::CNamespace.funcEnterCtor"
          },
          {
            "name": "funcExitCtor",
            "type": "compiler::CNamespace.funcExitCtor"
          },
          {
            "name": "funcCheckInCtor",
            "type": "compiler::CNamespace.funcCheckInCtor"
          },
          {
            "name": "funcCall",
            "type": "compiler::CNamespace.funcCall"
          },
          {
            "name": "fieldNotSetErrMake",
            "type": "compiler::CNamespace.fieldNotSetErrMake"
          },
          {
            "name": "notImmutableErrMake",
            "type": "compiler::CNamespace.notImmutableErrMake"
          },
          {
            "name": "dir",
            "type": "compiler::FPodNamespace.dir"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "execute"
          },
          {
            "name": "executeFile"
          },
          {
            "name": "printPod"
          },
          {
            "name": "printType"
          },
          {
            "name": "printSlot"
          },
          {
            "name": "printer"
          },
          {
            "name": "fpod"
          },
          {
            "name": "ftype"
          },
          {
            "name": "fslot"
          },
          {
            "name": "run"
          },
          {
            "name": "help"
          },
          {
            "name": "main"
          },
          {
            "name": "make"
          }
        ],
        "name": "Fanp",
        "fields": [
          {
            "name": "compiler",
            "type": "compiler::Fanp.compiler"
          },
          {
            "name": "showTables",
            "type": "compiler::Fanp.showTables"
          },
          {
            "name": "showCode",
            "type": "compiler::Fanp.showCode"
          },
          {
            "name": "showLines",
            "type": "compiler::Fanp.showLines"
          },
          {
            "name": "showIndex",
            "type": "compiler::Fanp.showIndex"
          },
          {
            "name": "file",
            "type": "compiler::Fanp.file"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "make"
          },
          {
            "name": "attr"
          },
          {
            "name": "reflect"
          },
          {
            "name": "inherit"
          },
          {
            "name": "writeMeta"
          },
          {
            "name": "readMeta"
          },
          {
            "name": "uri"
          },
          {
            "name": "write"
          },
          {
            "name": "read"
          }
        ],
        "name": "FType",
        "fields": [
          {
            "name": "base",
            "type": "compiler::FType.base"
          },
          {
            "name": "flags",
            "type": "compiler::FType.flags"
          },
          {
            "name": "slotsCached",
            "type": "compiler::FType.slotsCached"
          },
          {
            "name": "hollow",
            "type": "compiler::FType.hollow"
          },
          {
            "name": "fpod",
            "type": "compiler::FType.fpod"
          },
          {
            "name": "self",
            "type": "compiler::FType.self"
          },
          {
            "name": "fbase",
            "type": "compiler::FType.fbase"
          },
          {
            "name": "fmixins",
            "type": "compiler::FType.fmixins"
          },
          {
            "name": "ffields",
            "type": "compiler::FType.ffields"
          },
          {
            "name": "fmethods",
            "type": "compiler::FType.fmethods"
          },
          {
            "name": "fattrs",
            "type": "compiler::FType.fattrs"
          },
          {
            "name": "ffacets",
            "type": "compiler::FType.ffacets"
          },
          {
            "name": "name$Store",
            "type": "compiler::FType.name$Store"
          },
          {
            "name": "qname$Store",
            "type": "compiler::FType.qname$Store"
          },
          {
            "name": "mixins$Store",
            "type": "compiler::FType.mixins$Store"
          },
          {
            "name": "isVal$Store",
            "type": "compiler::FType.isVal$Store"
          },
          {
            "name": "operators$Store",
            "type": "compiler::FType.operators$Store"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::FType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::FType.toListOf$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "toPrefix"
          },
          {
            "name": "find"
          }
        ],
        "name": "COperators",
        "fields": [
          {
            "name": "prefixes",
            "type": "compiler::COperators.prefixes"
          },
          {
            "name": "exacts",
            "type": "compiler::COperators.exacts"
          },
          {
            "name": "parent",
            "type": "compiler::COperators.parent"
          },
          {
            "name": "byPrefix",
            "type": "compiler::COperators.byPrefix"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "parent"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "slot"
          },
          {
            "name": "make"
          }
        ],
        "name": "ReflectSlot",
        "fields": [
          {
            "name": "flags$Store",
            "type": "compiler::ReflectSlot.flags$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "slot"
          },
          {
            "name": "make"
          }
        ],
        "name": "ReflectField",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::ReflectField.ns"
          },
          {
            "name": "parent",
            "type": "compiler::ReflectField.parent"
          },
          {
            "name": "fieldType",
            "type": "compiler::ReflectField.fieldType"
          },
          {
            "name": "getter",
            "type": "compiler::ReflectField.getter"
          },
          {
            "name": "setter",
            "type": "compiler::ReflectField.setter"
          },
          {
            "name": "flags$Store",
            "type": "compiler::ReflectSlot.flags$Store"
          },
          {
            "name": "f",
            "type": "compiler::ReflectField.f"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "generic"
          },
          {
            "name": "calcGeneric"
          },
          {
            "name": "nameAndParamTypesToStr"
          },
          {
            "name": "hasSameParams"
          },
          {
            "name": "slot"
          },
          {
            "name": "make"
          }
        ],
        "name": "ReflectMethod",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::ReflectMethod.ns"
          },
          {
            "name": "parent",
            "type": "compiler::ReflectMethod.parent"
          },
          {
            "name": "returnType",
            "type": "compiler::ReflectMethod.returnType"
          },
          {
            "name": "params",
            "type": "compiler::ReflectMethod.params"
          },
          {
            "name": "isGeneric",
            "type": "compiler::ReflectMethod.isGeneric"
          },
          {
            "name": "flags$Store",
            "type": "compiler::ReflectSlot.flags$Store"
          },
          {
            "name": "m",
            "type": "compiler::ReflectMethod.m"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "name"
          },
          {
            "name": "hasDefault"
          },
          {
            "name": "make"
          }
        ],
        "name": "ReflectParam",
        "fields": [
          {
            "name": "paramType",
            "type": "compiler::ReflectParam.paramType"
          },
          {
            "name": "p",
            "type": "compiler::ReflectParam.p"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "qname"
          },
          {
            "name": "get"
          },
          {
            "name": "map"
          },
          {
            "name": "make"
          }
        ],
        "name": "ReflectFacet",
        "fields": [
          {
            "name": "f",
            "type": "compiler::ReflectFacet.f"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "name"
          },
          {
            "name": "version"
          },
          {
            "name": "depends"
          },
          {
            "name": "types"
          },
          {
            "name": "file"
          },
          {
            "name": "meta"
          },
          {
            "name": "hasJs"
          },
          {
            "name": "resolveType"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "make"
          }
        ],
        "name": "ReflectPod",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::ReflectPod.ns"
          },
          {
            "name": "pod",
            "type": "compiler::ReflectPod.pod"
          },
          {
            "name": "typeMap",
            "type": "compiler::ReflectPod.typeMap"
          },
          {
            "name": "loadedAllTypes",
            "type": "compiler::ReflectPod.loadedAllTypes"
          },
          {
            "name": "depends$Store",
            "type": "compiler::ReflectPod.depends$Store"
          },
          {
            "name": "file$Store",
            "type": "compiler::ReflectPod.file$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "deref"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "make"
          }
        ],
        "name": "ReflectType",
        "fields": [
          {
            "name": "pod",
            "type": "compiler::ReflectType.pod"
          },
          {
            "name": "isVal",
            "type": "compiler::ReflectType.isVal"
          },
          {
            "name": "base",
            "type": "compiler::ReflectType.base"
          },
          {
            "name": "mixins",
            "type": "compiler::ReflectType.mixins"
          },
          {
            "name": "t",
            "type": "compiler::ReflectType.t"
          },
          {
            "name": "slotMap",
            "type": "compiler::ReflectType.slotMap"
          },
          {
            "name": "slotsLoaded",
            "type": "compiler::ReflectType.slotsLoaded"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::ReflectType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::ReflectType.toListOf$Store"
          },
          {
            "name": "operators$Store",
            "type": "compiler::ReflectType.operators$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "get"
          },
          {
            "name": "make"
          }
        ],
        "name": "MarkerFacet",
        "fields": [
          {
            "name": "qname",
            "type": "compiler::MarkerFacet.qname"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "init"
          },
          {
            "name": "genericParam"
          },
          {
            "name": "sysType"
          },
          {
            "name": "sysMethod"
          },
          {
            "name": "cleanup"
          },
          {
            "name": "resolveBridge"
          },
          {
            "name": "findBridge"
          },
          {
            "name": "resolvePod"
          },
          {
            "name": "findPod"
          },
          {
            "name": "resolveType"
          },
          {
            "name": "resolveSlot"
          },
          {
            "name": "genericParameter"
          },
          {
            "name": "compiler"
          },
          {
            "name": "make"
          },
          {
            "name": "importPod"
          },
          {
            "name": "importType"
          },
          {
            "name": "importTypes"
          },
          {
            "name": "importSlot"
          },
          {
            "name": "importField"
          },
          {
            "name": "importMethod"
          }
        ],
        "name": "ReflectNamespace",
        "fields": [
          {
            "name": "bridgeCache",
            "type": "compiler::CNamespace.bridgeCache"
          },
          {
            "name": "podCache",
            "type": "compiler::CNamespace.podCache"
          },
          {
            "name": "typeCache",
            "type": "compiler::CNamespace.typeCache"
          },
          {
            "name": "c",
            "type": "compiler::CNamespace.c"
          },
          {
            "name": "depends",
            "type": "compiler::CNamespace.depends"
          },
          {
            "name": "sysPod",
            "type": "compiler::CNamespace.sysPod"
          },
          {
            "name": "genericParams",
            "type": "compiler::CNamespace.genericParams"
          },
          {
            "name": "error",
            "type": "compiler::CNamespace.error"
          },
          {
            "name": "nothingType",
            "type": "compiler::CNamespace.nothingType"
          },
          {
            "name": "itBlockType",
            "type": "compiler::CNamespace.itBlockType"
          },
          {
            "name": "objType",
            "type": "compiler::CNamespace.objType"
          },
          {
            "name": "boolType",
            "type": "compiler::CNamespace.boolType"
          },
          {
            "name": "enumType",
            "type": "compiler::CNamespace.enumType"
          },
          {
            "name": "facetType",
            "type": "compiler::CNamespace.facetType"
          },
          {
            "name": "intType",
            "type": "compiler::CNamespace.intType"
          },
          {
            "name": "floatType",
            "type": "compiler::CNamespace.floatType"
          },
          {
            "name": "decimalType",
            "type": "compiler::CNamespace.decimalType"
          },
          {
            "name": "strType",
            "type": "compiler::CNamespace.strType"
          },
          {
            "name": "strBufType",
            "type": "compiler::CNamespace.strBufType"
          },
          {
            "name": "durationType",
            "type": "compiler::CNamespace.durationType"
          },
          {
            "name": "listType",
            "type": "compiler::CNamespace.listType"
          },
          {
            "name": "mapType",
            "type": "compiler::CNamespace.mapType"
          },
          {
            "name": "funcType",
            "type": "compiler::CNamespace.funcType"
          },
          {
            "name": "errType",
            "type": "compiler::CNamespace.errType"
          },
          {
            "name": "podType",
            "type": "compiler::CNamespace.podType"
          },
          {
            "name": "typeType",
            "type": "compiler::CNamespace.typeType"
          },
          {
            "name": "slotType",
            "type": "compiler::CNamespace.slotType"
          },
          {
            "name": "fieldType",
            "type": "compiler::CNamespace.fieldType"
          },
          {
            "name": "methodType",
            "type": "compiler::CNamespace.methodType"
          },
          {
            "name": "rangeType",
            "type": "compiler::CNamespace.rangeType"
          },
          {
            "name": "testType",
            "type": "compiler::CNamespace.testType"
          },
          {
            "name": "uriType",
            "type": "compiler::CNamespace.uriType"
          },
          {
            "name": "voidType",
            "type": "compiler::CNamespace.voidType"
          },
          {
            "name": "fieldNotSetErrType",
            "type": "compiler::CNamespace.fieldNotSetErrType"
          },
          {
            "name": "notImmutableErrType",
            "type": "compiler::CNamespace.notImmutableErrType"
          },
          {
            "name": "objTrap",
            "type": "compiler::CNamespace.objTrap"
          },
          {
            "name": "objWith",
            "type": "compiler::CNamespace.objWith"
          },
          {
            "name": "objToImmutable",
            "type": "compiler::CNamespace.objToImmutable"
          },
          {
            "name": "boolNot",
            "type": "compiler::CNamespace.boolNot"
          },
          {
            "name": "intIncrement",
            "type": "compiler::CNamespace.intIncrement"
          },
          {
            "name": "intDecrement",
            "type": "compiler::CNamespace.intDecrement"
          },
          {
            "name": "intPlus",
            "type": "compiler::CNamespace.intPlus"
          },
          {
            "name": "floatPlus",
            "type": "compiler::CNamespace.floatPlus"
          },
          {
            "name": "floatMinus",
            "type": "compiler::CNamespace.floatMinus"
          },
          {
            "name": "strPlus",
            "type": "compiler::CNamespace.strPlus"
          },
          {
            "name": "strBufMake",
            "type": "compiler::CNamespace.strBufMake"
          },
          {
            "name": "strBufAdd",
            "type": "compiler::CNamespace.strBufAdd"
          },
          {
            "name": "strBufToStr",
            "type": "compiler::CNamespace.strBufToStr"
          },
          {
            "name": "listMake",
            "type": "compiler::CNamespace.listMake"
          },
          {
            "name": "listMakeObj",
            "type": "compiler::CNamespace.listMakeObj"
          },
          {
            "name": "listAdd",
            "type": "compiler::CNamespace.listAdd"
          },
          {
            "name": "mapMake",
            "type": "compiler::CNamespace.mapMake"
          },
          {
            "name": "mapSet",
            "type": "compiler::CNamespace.mapSet"
          },
          {
            "name": "enumOrdinal",
            "type": "compiler::CNamespace.enumOrdinal"
          },
          {
            "name": "funcBind",
            "type": "compiler::CNamespace.funcBind"
          },
          {
            "name": "rangeMakeInclusive",
            "type": "compiler::CNamespace.rangeMakeInclusive"
          },
          {
            "name": "rangeMakeExclusive",
            "type": "compiler::CNamespace.rangeMakeExclusive"
          },
          {
            "name": "slotFindMethod",
            "type": "compiler::CNamespace.slotFindMethod"
          },
          {
            "name": "slotFindFunc",
            "type": "compiler::CNamespace.slotFindFunc"
          },
          {
            "name": "podFind",
            "type": "compiler::CNamespace.podFind"
          },
          {
            "name": "podLocale",
            "type": "compiler::CNamespace.podLocale"
          },
          {
            "name": "typePod",
            "type": "compiler::CNamespace.typePod"
          },
          {
            "name": "typeField",
            "type": "compiler::CNamespace.typeField"
          },
          {
            "name": "typeMethod",
            "type": "compiler::CNamespace.typeMethod"
          },
          {
            "name": "funcEnterCtor",
            "type": "compiler::CNamespace.funcEnterCtor"
          },
          {
            "name": "funcExitCtor",
            "type": "compiler::CNamespace.funcExitCtor"
          },
          {
            "name": "funcCheckInCtor",
            "type": "compiler::CNamespace.funcCheckInCtor"
          },
          {
            "name": "funcCall",
            "type": "compiler::CNamespace.funcCall"
          },
          {
            "name": "fieldNotSetErrMake",
            "type": "compiler::CNamespace.fieldNotSetErrMake"
          },
          {
            "name": "notImmutableErrMake",
            "type": "compiler::CNamespace.notImmutableErrMake"
          },
          {
            "name": "pods",
            "type": "compiler::ReflectNamespace.pods"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "resolvePod"
          },
          {
            "name": "coerce"
          },
          {
            "name": "resolveConstruction"
          },
          {
            "name": "resolveConstructorChain"
          },
          {
            "name": "resolveSlotAccess"
          },
          {
            "name": "resolveCall"
          },
          {
            "name": "checkOverride"
          },
          {
            "name": "checkType"
          },
          {
            "name": "cleanup"
          }
        ],
        "name": "CBridge",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "base"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "make"
          }
        ],
        "name": "NullableType",
        "fields": [
          {
            "name": "signature",
            "type": "compiler::NullableType.signature"
          },
          {
            "name": "root",
            "type": "compiler::NullableType.root"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::NullableType.toListOf$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          }
        ],
        "name": "MDoc",
        "fields": [
          {
            "name": "text",
            "type": "compiler::MDoc.text"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "make"
          },
          {
            "name": "parameterizeSlots"
          },
          {
            "name": "parameterizeSlot"
          },
          {
            "name": "parameterize"
          },
          {
            "name": "parameterizeListType"
          },
          {
            "name": "parameterizeMapType"
          },
          {
            "name": "parameterizeFuncType"
          },
          {
            "name": "doParameterize"
          }
        ],
        "name": "GenericType",
        "fields": [
          {
            "name": "base",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "type": "compiler::GenericType.operators$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "parameterizeSlots"
          },
          {
            "name": "parameterizeSlot"
          },
          {
            "name": "parameterize"
          },
          {
            "name": "parameterizeListType"
          },
          {
            "name": "parameterizeMapType"
          },
          {
            "name": "parameterizeFuncType"
          },
          {
            "name": "doParameterize"
          },
          {
            "name": "make"
          }
        ],
        "name": "ListType",
        "fields": [
          {
            "name": "signature",
            "type": "compiler::ListType.signature"
          },
          {
            "name": "base",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "type": "compiler::GenericType.operators$Store"
          },
          {
            "name": "v",
            "type": "compiler::ListType.v"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "parameterizeSlots"
          },
          {
            "name": "parameterizeSlot"
          },
          {
            "name": "parameterize"
          },
          {
            "name": "parameterizeListType"
          },
          {
            "name": "parameterizeMapType"
          },
          {
            "name": "parameterizeFuncType"
          },
          {
            "name": "doParameterize"
          },
          {
            "name": "make"
          }
        ],
        "name": "MapType",
        "fields": [
          {
            "name": "signature",
            "type": "compiler::MapType.signature"
          },
          {
            "name": "base",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "type": "compiler::GenericType.operators$Store"
          },
          {
            "name": "k",
            "type": "compiler::MapType.k"
          },
          {
            "name": "v",
            "type": "compiler::MapType.v"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "parameterizeSlots"
          },
          {
            "name": "parameterizeSlot"
          },
          {
            "name": "parameterize"
          },
          {
            "name": "parameterizeListType"
          },
          {
            "name": "parameterizeMapType"
          },
          {
            "name": "parameterizeFuncType"
          },
          {
            "name": "doParameterize"
          },
          {
            "name": "make"
          },
          {
            "name": "makeItBlock"
          },
          {
            "name": "arity"
          },
          {
            "name": "toArity"
          },
          {
            "name": "mostSpecific"
          },
          {
            "name": "toMostSpecific"
          },
          {
            "name": "toParamDefs"
          },
          {
            "name": "usesThis"
          }
        ],
        "name": "FuncType",
        "fields": [
          {
            "name": "signature",
            "type": "compiler::FuncType.signature"
          },
          {
            "name": "isGenericParameter",
            "type": "compiler::FuncType.isGenericParameter"
          },
          {
            "name": "base",
            "type": "compiler::GenericType.base"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::GenericType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::GenericType.toListOf$Store"
          },
          {
            "name": "slots$Store",
            "type": "compiler::GenericType.slots$Store"
          },
          {
            "name": "operators$Store",
            "type": "compiler::GenericType.operators$Store"
          },
          {
            "name": "params",
            "type": "compiler::FuncType.params"
          },
          {
            "name": "names",
            "type": "compiler::FuncType.names"
          },
          {
            "name": "ret",
            "type": "compiler::FuncType.ret"
          },
          {
            "name": "unnamed",
            "type": "compiler::FuncType.unnamed"
          },
          {
            "name": "inferredSignature",
            "type": "compiler::FuncType.inferredSignature"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "pod"
          },
          {
            "name": "signature"
          },
          {
            "name": "deref"
          },
          {
            "name": "isVal"
          },
          {
            "name": "isValType"
          },
          {
            "name": "isNullable"
          },
          {
            "name": "toNullable"
          },
          {
            "name": "toNonNullable"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "foreignInheritance"
          },
          {
            "name": "bridge"
          },
          {
            "name": "inferredAs"
          },
          {
            "name": "isSupported"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "isGenericParameter"
          },
          {
            "name": "toListOf"
          },
          {
            "name": "raw"
          },
          {
            "name": "parameterizeThis"
          },
          {
            "name": "base"
          },
          {
            "name": "mixins"
          },
          {
            "name": "fits"
          },
          {
            "name": "fitsAny"
          },
          {
            "name": "common"
          },
          {
            "name": "commonClass"
          },
          {
            "name": "commonMixin"
          },
          {
            "name": "commonParameterized"
          },
          {
            "name": "commonList"
          },
          {
            "name": "commonExact"
          },
          {
            "name": "flags"
          },
          {
            "name": "isClass"
          },
          {
            "name": "isMixin"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isFacet"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isFinal"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isObj"
          },
          {
            "name": "isBool"
          },
          {
            "name": "isInt"
          },
          {
            "name": "isFloat"
          },
          {
            "name": "isDecimal"
          },
          {
            "name": "isRange"
          },
          {
            "name": "isStr"
          },
          {
            "name": "isThis"
          },
          {
            "name": "isType"
          },
          {
            "name": "isVoid"
          },
          {
            "name": "isBuf"
          },
          {
            "name": "isList"
          },
          {
            "name": "isMap"
          },
          {
            "name": "isFunc"
          },
          {
            "name": "isNothing"
          },
          {
            "name": "isValid"
          },
          {
            "name": "isConstFieldType"
          },
          {
            "name": "slots"
          },
          {
            "name": "hasSlot"
          },
          {
            "name": "slot"
          },
          {
            "name": "field"
          },
          {
            "name": "method"
          },
          {
            "name": "fields"
          },
          {
            "name": "methods"
          },
          {
            "name": "ctors"
          },
          {
            "name": "instanceCtors"
          },
          {
            "name": "operators"
          },
          {
            "name": "make"
          }
        ],
        "name": "GenericParameterType",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::GenericParameterType.ns"
          },
          {
            "name": "name",
            "type": "compiler::GenericParameterType.name"
          },
          {
            "name": "qname",
            "type": "compiler::GenericParameterType.qname"
          },
          {
            "name": "toNullable$Store",
            "type": "compiler::GenericParameterType.toNullable$Store"
          },
          {
            "name": "toListOf$Store",
            "type": "compiler::GenericParameterType.toListOf$Store"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "make"
          }
        ],
        "name": "ParameterizedField",
        "fields": [
          {
            "name": "parent",
            "type": "compiler::ParameterizedField.parent"
          },
          {
            "name": "fieldType",
            "type": "compiler::ParameterizedField.fieldType"
          },
          {
            "name": "getter",
            "type": "compiler::ParameterizedField.getter"
          },
          {
            "name": "setter",
            "type": "compiler::ParameterizedField.setter"
          },
          {
            "name": "generic",
            "type": "compiler::ParameterizedField.generic"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "name"
          },
          {
            "name": "qname"
          },
          {
            "name": "flags"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "calcGeneric"
          },
          {
            "name": "nameAndParamTypesToStr"
          },
          {
            "name": "hasSameParams"
          },
          {
            "name": "make"
          }
        ],
        "name": "ParameterizedMethod",
        "fields": [
          {
            "name": "parent",
            "type": "compiler::ParameterizedMethod.parent"
          },
          {
            "name": "signature",
            "type": "compiler::ParameterizedMethod.signature"
          },
          {
            "name": "returnType",
            "type": "compiler::ParameterizedMethod.returnType"
          },
          {
            "name": "params",
            "type": "compiler::ParameterizedMethod.params"
          },
          {
            "name": "generic",
            "type": "compiler::ParameterizedMethod.generic"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "name"
          },
          {
            "name": "hasDefault"
          },
          {
            "name": "make"
          }
        ],
        "name": "ParameterizedMethodParam",
        "fields": [
          {
            "name": "paramType",
            "type": "compiler::ParameterizedMethodParam.paramType"
          },
          {
            "name": "generic",
            "type": "compiler::ParameterizedMethodParam.generic"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "make"
          }
        ],
        "name": "MockSlot",
        "fields": [
          {
            "name": "parent",
            "type": "compiler::MockSlot.parent"
          },
          {
            "name": "name",
            "type": "compiler::MockSlot.name"
          },
          {
            "name": "flags",
            "type": "compiler::MockSlot.flags"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "getter"
          },
          {
            "name": "setter"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "make"
          }
        ],
        "name": "MockField",
        "fields": [
          {
            "name": "parent",
            "type": "compiler::MockSlot.parent"
          },
          {
            "name": "name",
            "type": "compiler::MockSlot.name"
          },
          {
            "name": "flags",
            "type": "compiler::MockSlot.flags"
          },
          {
            "name": "fieldType",
            "type": "compiler::MockField.fieldType"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "ns"
          },
          {
            "name": "doc"
          },
          {
            "name": "facet"
          },
          {
            "name": "hasFacet"
          },
          {
            "name": "isNoDoc"
          },
          {
            "name": "qname"
          },
          {
            "name": "signature"
          },
          {
            "name": "isAbstract"
          },
          {
            "name": "isAccessor"
          },
          {
            "name": "isConst"
          },
          {
            "name": "isCtor"
          },
          {
            "name": "isEnum"
          },
          {
            "name": "isGetter"
          },
          {
            "name": "isInternal"
          },
          {
            "name": "isNative"
          },
          {
            "name": "isOverride"
          },
          {
            "name": "isPrivate"
          },
          {
            "name": "isProtected"
          },
          {
            "name": "isPublic"
          },
          {
            "name": "isSetter"
          },
          {
            "name": "isStatic"
          },
          {
            "name": "isStorage"
          },
          {
            "name": "isSynthetic"
          },
          {
            "name": "isVirtual"
          },
          {
            "name": "isOnce"
          },
          {
            "name": "isInstanceCtor"
          },
          {
            "name": "isStaticCtor"
          },
          {
            "name": "isForeign"
          },
          {
            "name": "usesForeign"
          },
          {
            "name": "bridge"
          },
          {
            "name": "usesBridge"
          },
          {
            "name": "isVisibleTo"
          },
          {
            "name": "inheritedReturnType"
          },
          {
            "name": "isCovariant"
          },
          {
            "name": "isGeneric"
          },
          {
            "name": "isParameterized"
          },
          {
            "name": "generic"
          },
          {
            "name": "calcGeneric"
          },
          {
            "name": "nameAndParamTypesToStr"
          },
          {
            "name": "hasSameParams"
          },
          {
            "name": "make"
          }
        ],
        "name": "MockMethod",
        "fields": [
          {
            "name": "parent",
            "type": "compiler::MockSlot.parent"
          },
          {
            "name": "name",
            "type": "compiler::MockSlot.name"
          },
          {
            "name": "flags",
            "type": "compiler::MockSlot.flags"
          },
          {
            "name": "returnType",
            "type": "compiler::MockMethod.returnType"
          },
          {
            "name": "params",
            "type": "compiler::MockMethod.params"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "hasDefault"
          },
          {
            "name": "make"
          }
        ],
        "name": "MockParam",
        "fields": [
          {
            "name": "name",
            "type": "compiler::MockParam.name"
          },
          {
            "name": "paramType",
            "type": "compiler::MockParam.paramType"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "resolve"
          },
          {
            "name": "make"
          },
          {
            "name": "loadTop"
          },
          {
            "name": "loadAny"
          },
          {
            "name": "loadMap"
          },
          {
            "name": "loadFunc"
          },
          {
            "name": "loadFFI"
          },
          {
            "name": "loadBasic"
          },
          {
            "name": "consume"
          },
          {
            "name": "isIdChar"
          },
          {
            "name": "err"
          }
        ],
        "name": "TypeParser",
        "fields": [
          {
            "name": "ns",
            "type": "compiler::TypeParser.ns"
          },
          {
            "name": "sig",
            "type": "compiler::TypeParser.sig"
          },
          {
            "name": "len",
            "type": "compiler::TypeParser.len"
          },
          {
            "name": "pos",
            "type": "compiler::TypeParser.pos"
          },
          {
            "name": "cur",
            "type": "compiler::TypeParser.cur"
          },
          {
            "name": "peek",
            "type": "compiler::TypeParser.peek"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "fromStr"
          },
          {
            "name": "make"
          },
          {
            "name": "makeList"
          },
          {
            "name": "name"
          }
        ],
        "name": "CDepend",
        "fields": [
          {
            "name": "depend",
            "type": "compiler::CDepend.depend"
          },
          {
            "name": "pod",
            "type": "compiler::CDepend.pod"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "tokenize"
          },
          {
            "name": "next"
          },
          {
            "name": "find"
          },
          {
            "name": "word"
          },
          {
            "name": "isIdentifierStart"
          },
          {
            "name": "number"
          },
          {
            "name": "hexInt"
          },
          {
            "name": "binaryInt"
          },
          {
            "name": "quoted"
          },
          {
            "name": "skipStrWs"
          },
          {
            "name": "interpolation"
          },
          {
            "name": "endOfQuoted"
          },
          {
            "name": "makeVirtualToken"
          },
          {
            "name": "ch"
          },
          {
            "name": "escape"
          },
          {
            "name": "dsl"
          },
          {
            "name": "skipCommentSL"
          },
          {
            "name": "skipCommentML"
          },
          {
            "name": "docComment"
          },
          {
            "name": "symbol"
          },
          {
            "name": "peekPeek"
          },
          {
            "name": "consume"
          }
        ],
        "name": "Tokenizer",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "buf",
            "type": "compiler::Tokenizer.buf"
          },
          {
            "name": "pos",
            "type": "compiler::Tokenizer.pos"
          },
          {
            "name": "isDoc",
            "type": "compiler::Tokenizer.isDoc"
          },
          {
            "name": "filename",
            "type": "compiler::Tokenizer.filename"
          },
          {
            "name": "line",
            "type": "compiler::Tokenizer.line"
          },
          {
            "name": "col",
            "type": "compiler::Tokenizer.col"
          },
          {
            "name": "curLine",
            "type": "compiler::Tokenizer.curLine"
          },
          {
            "name": "cur",
            "type": "compiler::Tokenizer.cur"
          },
          {
            "name": "peek",
            "type": "compiler::Tokenizer.peek"
          },
          {
            "name": "lastLine",
            "type": "compiler::Tokenizer.lastLine"
          },
          {
            "name": "posOfLine",
            "type": "compiler::Tokenizer.posOfLine"
          },
          {
            "name": "tokens",
            "type": "compiler::Tokenizer.tokens"
          },
          {
            "name": "inStrLiteral",
            "type": "compiler::Tokenizer.inStrLiteral"
          },
          {
            "name": "whitespace",
            "type": "compiler::Tokenizer.whitespace"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "isUri"
          },
          {
            "name": "isTriple"
          },
          {
            "name": "make"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "Quoted",
        "fields": [
          {
            "name": "toStr",
            "type": "compiler::Quoted.toStr"
          },
          {
            "name": "normal",
            "type": "compiler::Quoted.normal"
          },
          {
            "name": "triple",
            "type": "compiler::Quoted.triple"
          },
          {
            "name": "uri",
            "type": "compiler::Quoted.uri"
          },
          {
            "name": "vals",
            "type": "compiler::Quoted.vals"
          },
          {
            "name": "multiLine",
            "type": "compiler::Quoted.multiLine"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "filename"
          },
          {
            "name": "fileUri"
          },
          {
            "name": "toLocStr"
          },
          {
            "name": "make"
          },
          {
            "name": "toCode"
          },
          {
            "name": "isCallOpenParen"
          },
          {
            "name": "isIndexOpenBracket"
          }
        ],
        "name": "TokenVal",
        "fields": [
          {
            "name": "file",
            "type": "compiler::Loc.file"
          },
          {
            "name": "line",
            "type": "compiler::Loc.line"
          },
          {
            "name": "col",
            "type": "compiler::Loc.col"
          },
          {
            "name": "kind",
            "type": "compiler::TokenVal.kind"
          },
          {
            "name": "val",
            "type": "compiler::TokenVal.val"
          },
          {
            "name": "newline",
            "type": "compiler::TokenVal.newline"
          },
          {
            "name": "whitespace",
            "type": "compiler::TokenVal.whitespace"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "filename"
          },
          {
            "name": "fileUri"
          },
          {
            "name": "toLocStr"
          },
          {
            "name": "toCode"
          },
          {
            "name": "isCallOpenParen"
          },
          {
            "name": "isIndexOpenBracket"
          },
          {
            "name": "make"
          }
        ],
        "name": "TokenValDsl",
        "fields": [
          {
            "name": "file",
            "type": "compiler::Loc.file"
          },
          {
            "name": "line",
            "type": "compiler::Loc.line"
          },
          {
            "name": "col",
            "type": "compiler::Loc.col"
          },
          {
            "name": "kind",
            "type": "compiler::TokenVal.kind"
          },
          {
            "name": "val",
            "type": "compiler::TokenVal.val"
          },
          {
            "name": "newline",
            "type": "compiler::TokenVal.newline"
          },
          {
            "name": "whitespace",
            "type": "compiler::TokenVal.whitespace"
          },
          {
            "name": "leadingTabs",
            "type": "compiler::TokenValDsl.leadingTabs"
          },
          {
            "name": "leadingSpaces",
            "type": "compiler::TokenValDsl.leadingSpaces"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "parse"
          },
          {
            "name": "usings"
          },
          {
            "name": "skipUsing"
          },
          {
            "name": "typeDef"
          },
          {
            "name": "inheritType"
          },
          {
            "name": "flags"
          },
          {
            "name": "enumDefs"
          },
          {
            "name": "enumDef"
          },
          {
            "name": "slotDef"
          },
          {
            "name": "fieldDef"
          },
          {
            "name": "defGetAndSet"
          },
          {
            "name": "defGet"
          },
          {
            "name": "defSet"
          },
          {
            "name": "genSyntheticGet"
          },
          {
            "name": "genSyntheticSet"
          },
          {
            "name": "getOrSet"
          },
          {
            "name": "methodDef"
          },
          {
            "name": "paramDef"
          },
          {
            "name": "ctorChain"
          },
          {
            "name": "facets"
          },
          {
            "name": "block"
          },
          {
            "name": "stmtOrBlock"
          },
          {
            "name": "stmt"
          },
          {
            "name": "exprOrLocalDefStmt"
          },
          {
            "name": "itAdd"
          },
          {
            "name": "localDefStmt"
          },
          {
            "name": "ifStmt"
          },
          {
            "name": "returnStmt"
          },
          {
            "name": "throwStmt"
          },
          {
            "name": "whileStmt"
          },
          {
            "name": "forStmt"
          },
          {
            "name": "breakStmt"
          },
          {
            "name": "continueStmt"
          },
          {
            "name": "tryStmt"
          },
          {
            "name": "tryCatch"
          },
          {
            "name": "switchStmt"
          },
          {
            "name": "switchBlock"
          },
          {
            "name": "expr"
          },
          {
            "name": "assignExpr"
          },
          {
            "name": "ifExpr"
          },
          {
            "name": "ifExprBody"
          },
          {
            "name": "condOrExpr"
          },
          {
            "name": "condAndExpr"
          },
          {
            "name": "equalityExpr"
          },
          {
            "name": "relationalExpr"
          },
          {
            "name": "rangeExpr"
          },
          {
            "name": "addExpr"
          },
          {
            "name": "multExpr"
          },
          {
            "name": "parenExpr"
          },
          {
            "name": "unaryExpr"
          },
          {
            "name": "termExpr"
          },
          {
            "name": "termBaseExpr"
          },
          {
            "name": "typeBaseExpr"
          },
          {
            "name": "termChainExpr"
          },
          {
            "name": "idExpr"
          },
          {
            "name": "callExpr"
          },
          {
            "name": "callArgs"
          },
          {
            "name": "callOp"
          },
          {
            "name": "indexExpr"
          },
          {
            "name": "collectionLiteralExpr"
          },
          {
            "name": "listLiteralExpr"
          },
          {
            "name": "mapLiteralExpr"
          },
          {
            "name": "tryClosure"
          },
          {
            "name": "tryItBlock"
          },
          {
            "name": "closure"
          },
          {
            "name": "complexLiteral"
          },
          {
            "name": "typeRef"
          },
          {
            "name": "tryType"
          },
          {
            "name": "ctype"
          },
          {
            "name": "simpleType"
          },
          {
            "name": "funcType"
          },
          {
            "name": "funcTypeFormal"
          },
          {
            "name": "doc"
          },
          {
            "name": "consumeId"
          },
          {
            "name": "verify"
          },
          {
            "name": "consume"
          },
          {
            "name": "endOfStmt"
          },
          {
            "name": "reset"
          }
        ],
        "name": "Parser",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "ProtectionMask",
            "type": "compiler::Parser.ProtectionMask"
          },
          {
            "name": "unit",
            "type": "compiler::Parser.unit"
          },
          {
            "name": "tokens",
            "type": "compiler::Parser.tokens"
          },
          {
            "name": "numTokens",
            "type": "compiler::Parser.numTokens"
          },
          {
            "name": "pos",
            "type": "compiler::Parser.pos"
          },
          {
            "name": "cur",
            "type": "compiler::Parser.cur"
          },
          {
            "name": "curt",
            "type": "compiler::Parser.curt"
          },
          {
            "name": "peek",
            "type": "compiler::Parser.peek"
          },
          {
            "name": "peekt",
            "type": "compiler::Parser.peekt"
          },
          {
            "name": "inFieldInit",
            "type": "compiler::Parser.inFieldInit"
          },
          {
            "name": "curType",
            "type": "compiler::Parser.curType"
          },
          {
            "name": "curSlot",
            "type": "compiler::Parser.curSlot"
          },
          {
            "name": "curClosure",
            "type": "compiler::Parser.curClosure"
          },
          {
            "name": "closureCount",
            "type": "compiler::Parser.closureCount"
          },
          {
            "name": "closures",
            "type": "compiler::Parser.closures"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "doFromStr"
          },
          {
            "name": "name"
          },
          {
            "name": "ordinal"
          },
          {
            "name": "make"
          },
          {
            "name": "toExprId"
          },
          {
            "name": "toShortcutOp"
          },
          {
            "name": "isProtectionKeyword"
          },
          {
            "name": "isIncrementOrDecrement"
          },
          {
            "name": "main"
          },
          {
            "name": "fromStr"
          }
        ],
        "name": "Token",
        "fields": [
          {
            "name": "identifier",
            "type": "compiler::Token.identifier"
          },
          {
            "name": "strLiteral",
            "type": "compiler::Token.strLiteral"
          },
          {
            "name": "intLiteral",
            "type": "compiler::Token.intLiteral"
          },
          {
            "name": "floatLiteral",
            "type": "compiler::Token.floatLiteral"
          },
          {
            "name": "decimalLiteral",
            "type": "compiler::Token.decimalLiteral"
          },
          {
            "name": "durationLiteral",
            "type": "compiler::Token.durationLiteral"
          },
          {
            "name": "uriLiteral",
            "type": "compiler::Token.uriLiteral"
          },
          {
            "name": "dsl",
            "type": "compiler::Token.dsl"
          },
          {
            "name": "localeLiteral",
            "type": "compiler::Token.localeLiteral"
          },
          {
            "name": "dot",
            "type": "compiler::Token.dot"
          },
          {
            "name": "semicolon",
            "type": "compiler::Token.semicolon"
          },
          {
            "name": "comma",
            "type": "compiler::Token.comma"
          },
          {
            "name": "colon",
            "type": "compiler::Token.colon"
          },
          {
            "name": "doubleColon",
            "type": "compiler::Token.doubleColon"
          },
          {
            "name": "plus",
            "type": "compiler::Token.plus"
          },
          {
            "name": "minus",
            "type": "compiler::Token.minus"
          },
          {
            "name": "star",
            "type": "compiler::Token.star"
          },
          {
            "name": "slash",
            "type": "compiler::Token.slash"
          },
          {
            "name": "percent",
            "type": "compiler::Token.percent"
          },
          {
            "name": "pound",
            "type": "compiler::Token.pound"
          },
          {
            "name": "increment",
            "type": "compiler::Token.increment"
          },
          {
            "name": "decrement",
            "type": "compiler::Token.decrement"
          },
          {
            "name": "bang",
            "type": "compiler::Token.bang"
          },
          {
            "name": "question",
            "type": "compiler::Token.question"
          },
          {
            "name": "tilde",
            "type": "compiler::Token.tilde"
          },
          {
            "name": "pipe",
            "type": "compiler::Token.pipe"
          },
          {
            "name": "amp",
            "type": "compiler::Token.amp"
          },
          {
            "name": "caret",
            "type": "compiler::Token.caret"
          },
          {
            "name": "at",
            "type": "compiler::Token.at"
          },
          {
            "name": "doublePipe",
            "type": "compiler::Token.doublePipe"
          },
          {
            "name": "doubleAmp",
            "type": "compiler::Token.doubleAmp"
          },
          {
            "name": "same",
            "type": "compiler::Token.same"
          },
          {
            "name": "notSame",
            "type": "compiler::Token.notSame"
          },
          {
            "name": "eq",
            "type": "compiler::Token.eq"
          },
          {
            "name": "notEq",
            "type": "compiler::Token.notEq"
          },
          {
            "name": "cmp",
            "type": "compiler::Token.cmp"
          },
          {
            "name": "lt",
            "type": "compiler::Token.lt"
          },
          {
            "name": "ltEq",
            "type": "compiler::Token.ltEq"
          },
          {
            "name": "gt",
            "type": "compiler::Token.gt"
          },
          {
            "name": "gtEq",
            "type": "compiler::Token.gtEq"
          },
          {
            "name": "lbrace",
            "type": "compiler::Token.lbrace"
          },
          {
            "name": "rbrace",
            "type": "compiler::Token.rbrace"
          },
          {
            "name": "lparen",
            "type": "compiler::Token.lparen"
          },
          {
            "name": "rparen",
            "type": "compiler::Token.rparen"
          },
          {
            "name": "lbracket",
            "type": "compiler::Token.lbracket"
          },
          {
            "name": "rbracket",
            "type": "compiler::Token.rbracket"
          },
          {
            "name": "dotDot",
            "type": "compiler::Token.dotDot"
          },
          {
            "name": "dotDotLt",
            "type": "compiler::Token.dotDotLt"
          },
          {
            "name": "defAssign",
            "type": "compiler::Token.defAssign"
          },
          {
            "name": "assign",
            "type": "compiler::Token.assign"
          },
          {
            "name": "assignPlus",
            "type": "compiler::Token.assignPlus"
          },
          {
            "name": "assignMinus",
            "type": "compiler::Token.assignMinus"
          },
          {
            "name": "assignStar",
            "type": "compiler::Token.assignStar"
          },
          {
            "name": "assignSlash",
            "type": "compiler::Token.assignSlash"
          },
          {
            "name": "assignPercent",
            "type": "compiler::Token.assignPercent"
          },
          {
            "name": "arrow",
            "type": "compiler::Token.arrow"
          },
          {
            "name": "elvis",
            "type": "compiler::Token.elvis"
          },
          {
            "name": "safeDot",
            "type": "compiler::Token.safeDot"
          },
          {
            "name": "safeArrow",
            "type": "compiler::Token.safeArrow"
          },
          {
            "name": "docComment",
            "type": "compiler::Token.docComment"
          },
          {
            "name": "dollar",
            "type": "compiler::Token.dollar"
          },
          {
            "name": "lparenSynthetic",
            "type": "compiler::Token.lparenSynthetic"
          },
          {
            "name": "abstractKeyword",
            "type": "compiler::Token.abstractKeyword"
          },
          {
            "name": "asKeyword",
            "type": "compiler::Token.asKeyword"
          },
          {
            "name": "assertKeyword",
            "type": "compiler::Token.assertKeyword"
          },
          {
            "name": "breakKeyword",
            "type": "compiler::Token.breakKeyword"
          },
          {
            "name": "caseKeyword",
            "type": "compiler::Token.caseKeyword"
          },
          {
            "name": "catchKeyword",
            "type": "compiler::Token.catchKeyword"
          },
          {
            "name": "classKeyword",
            "type": "compiler::Token.classKeyword"
          },
          {
            "name": "constKeyword",
            "type": "compiler::Token.constKeyword"
          },
          {
            "name": "continueKeyword",
            "type": "compiler::Token.continueKeyword"
          },
          {
            "name": "defaultKeyword",
            "type": "compiler::Token.defaultKeyword"
          },
          {
            "name": "doKeyword",
            "type": "compiler::Token.doKeyword"
          },
          {
            "name": "elseKeyword",
            "type": "compiler::Token.elseKeyword"
          },
          {
            "name": "falseKeyword",
            "type": "compiler::Token.falseKeyword"
          },
          {
            "name": "finalKeyword",
            "type": "compiler::Token.finalKeyword"
          },
          {
            "name": "finallyKeyword",
            "type": "compiler::Token.finallyKeyword"
          },
          {
            "name": "forKeyword",
            "type": "compiler::Token.forKeyword"
          },
          {
            "name": "foreachKeyword",
            "type": "compiler::Token.foreachKeyword"
          },
          {
            "name": "ifKeyword",
            "type": "compiler::Token.ifKeyword"
          },
          {
            "name": "internalKeyword",
            "type": "compiler::Token.internalKeyword"
          },
          {
            "name": "isKeyword",
            "type": "compiler::Token.isKeyword"
          },
          {
            "name": "isnotKeyword",
            "type": "compiler::Token.isnotKeyword"
          },
          {
            "name": "itKeyword",
            "type": "compiler::Token.itKeyword"
          },
          {
            "name": "mixinKeyword",
            "type": "compiler::Token.mixinKeyword"
          },
          {
            "name": "nativeKeyword",
            "type": "compiler::Token.nativeKeyword"
          },
          {
            "name": "newKeyword",
            "type": "compiler::Token.newKeyword"
          },
          {
            "name": "nullKeyword",
            "type": "compiler::Token.nullKeyword"
          },
          {
            "name": "onceKeyword",
            "type": "compiler::Token.onceKeyword"
          },
          {
            "name": "overrideKeyword",
            "type": "compiler::Token.overrideKeyword"
          },
          {
            "name": "privateKeyword",
            "type": "compiler::Token.privateKeyword"
          },
          {
            "name": "protectedKeyword",
            "type": "compiler::Token.protectedKeyword"
          },
          {
            "name": "publicKeyword",
            "type": "compiler::Token.publicKeyword"
          },
          {
            "name": "readonlyKeyword",
            "type": "compiler::Token.readonlyKeyword"
          },
          {
            "name": "returnKeyword",
            "type": "compiler::Token.returnKeyword"
          },
          {
            "name": "staticKeyword",
            "type": "compiler::Token.staticKeyword"
          },
          {
            "name": "superKeyword",
            "type": "compiler::Token.superKeyword"
          },
          {
            "name": "switchKeyword",
            "type": "compiler::Token.switchKeyword"
          },
          {
            "name": "thisKeyword",
            "type": "compiler::Token.thisKeyword"
          },
          {
            "name": "throwKeyword",
            "type": "compiler::Token.throwKeyword"
          },
          {
            "name": "trueKeyword",
            "type": "compiler::Token.trueKeyword"
          },
          {
            "name": "tryKeyword",
            "type": "compiler::Token.tryKeyword"
          },
          {
            "name": "usingKeyword",
            "type": "compiler::Token.usingKeyword"
          },
          {
            "name": "virtualKeyword",
            "type": "compiler::Token.virtualKeyword"
          },
          {
            "name": "volatileKeyword",
            "type": "compiler::Token.volatileKeyword"
          },
          {
            "name": "voidKeyword",
            "type": "compiler::Token.voidKeyword"
          },
          {
            "name": "whileKeyword",
            "type": "compiler::Token.whileKeyword"
          },
          {
            "name": "eof",
            "type": "compiler::Token.eof"
          },
          {
            "name": "vals",
            "type": "compiler::Token.vals"
          },
          {
            "name": "keywords",
            "type": "compiler::Token.keywords"
          },
          {
            "name": "symbol",
            "type": "compiler::Token.symbol"
          },
          {
            "name": "keyword",
            "type": "compiler::Token.keyword"
          },
          {
            "name": "isAssign",
            "type": "compiler::Token.isAssign"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "compile"
          },
          {
            "name": "genTsDecl"
          },
          {
            "name": "needCompileEs"
          },
          {
            "name": "needCompileJs"
          }
        ],
        "name": "CompileJs",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "hasJs",
            "type": "compiler::CompileJs.hasJs"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "validateInput"
          },
          {
            "name": "validatePodName"
          },
          {
            "name": "isValidPodName"
          },
          {
            "name": "initNamespace"
          },
          {
            "name": "initPod"
          },
          {
            "name": "initDepends"
          },
          {
            "name": "initFiles"
          },
          {
            "name": "findFiles"
          }
        ],
        "name": "InitInput",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "loc",
            "type": "compiler::InitInput.loc"
          },
          {
            "name": "input",
            "type": "compiler::InitInput.input"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "addDefaultCtor"
          }
        ],
        "name": "DefaultCtor",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "resolveImports"
          },
          {
            "name": "resolveImportedTypes"
          },
          {
            "name": "addAll"
          },
          {
            "name": "remove"
          },
          {
            "name": "resolveQualified"
          },
          {
            "name": "resolvePod"
          },
          {
            "name": "checkUsingPod"
          }
        ],
        "name": "ResolveImports",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "resolved",
            "type": "compiler::ResolveImports.resolved"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "appendStaticInit"
          },
          {
            "name": "normalizeMethod"
          },
          {
            "name": "addImplicitReturn"
          },
          {
            "name": "insertSuperCtor"
          },
          {
            "name": "normalizeOnce"
          },
          {
            "name": "callInstanceInit"
          },
          {
            "name": "normalizeField"
          },
          {
            "name": "inferFieldListType"
          },
          {
            "name": "inferFieldMapType"
          },
          {
            "name": "genSyntheticOverrideGet"
          },
          {
            "name": "genSyntheticOverrideSet"
          },
          {
            "name": "fieldInitStmt"
          }
        ],
        "name": "Normalize",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "addCtor"
          },
          {
            "name": "addFromStr"
          },
          {
            "name": "makeField"
          },
          {
            "name": "makeValsField"
          }
        ],
        "name": "InitEnum",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "checkPodDef"
          },
          {
            "name": "isRestrictedName"
          },
          {
            "name": "checkResConflicts"
          },
          {
            "name": "checkTypeFlags"
          },
          {
            "name": "checkAbstractSlots"
          },
          {
            "name": "checkConstType"
          },
          {
            "name": "checkBase"
          },
          {
            "name": "checkMixin"
          },
          {
            "name": "checkFieldFlags"
          },
          {
            "name": "checkMethodFlags"
          },
          {
            "name": "checkParams"
          },
          {
            "name": "checkParam"
          },
          {
            "name": "checkParamFuncType"
          },
          {
            "name": "checkMethodReturn"
          },
          {
            "name": "checkInstanceCtor"
          },
          {
            "name": "checkDefiniteAssign"
          },
          {
            "name": "checkOperatorMethod"
          },
          {
            "name": "checkFacets"
          },
          {
            "name": "checkFacet"
          },
          {
            "name": "checkExprStmt"
          },
          {
            "name": "checkLocalDef"
          },
          {
            "name": "checkIf"
          },
          {
            "name": "checkThrow"
          },
          {
            "name": "checkThrowExpr"
          },
          {
            "name": "checkFor"
          },
          {
            "name": "checkWhile"
          },
          {
            "name": "checkBreak"
          },
          {
            "name": "checkContinue"
          },
          {
            "name": "checkReturn"
          },
          {
            "name": "checkTry"
          },
          {
            "name": "checkSwitch"
          },
          {
            "name": "checkTypeLiteral"
          },
          {
            "name": "checkSlotLiteral"
          },
          {
            "name": "checkListLiteral"
          },
          {
            "name": "checkMapLiteral"
          },
          {
            "name": "checkRangeLiteral"
          },
          {
            "name": "checkBool"
          },
          {
            "name": "checkCompareNull"
          },
          {
            "name": "checkBools"
          },
          {
            "name": "checkSame"
          },
          {
            "name": "checkCompare"
          },
          {
            "name": "checkAssign"
          },
          {
            "name": "checkElvis"
          },
          {
            "name": "checkNoNullSafes"
          },
          {
            "name": "checkShortcut"
          },
          {
            "name": "checkAssignField"
          },
          {
            "name": "implicitToImmutable"
          },
          {
            "name": "checkConstruction"
          },
          {
            "name": "checkCall"
          },
          {
            "name": "checkField"
          },
          {
            "name": "useFieldAccessor"
          },
          {
            "name": "checkThis"
          },
          {
            "name": "checkSuper"
          },
          {
            "name": "checkTypeCheck"
          },
          {
            "name": "checkTernary"
          },
          {
            "name": "checkArgs"
          },
          {
            "name": "paramTypeStr"
          },
          {
            "name": "checkValidType"
          },
          {
            "name": "checkProtectionFlags"
          },
          {
            "name": "checkTypeProtection"
          },
          {
            "name": "checkSlotProtection"
          },
          {
            "name": "isSlotVisible"
          },
          {
            "name": "slotProtectionErr"
          },
          {
            "name": "checkDeprecated"
          },
          {
            "name": "box"
          },
          {
            "name": "coerceBoxed"
          },
          {
            "name": "canCoerce"
          },
          {
            "name": "coerce"
          },
          {
            "name": "doCoerce"
          },
          {
            "name": "isFuncAutoCoerce"
          },
          {
            "name": "isFuncAutoCoerceMatch"
          },
          {
            "name": "needCoerce"
          }
        ],
        "name": "CheckErrors",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "protectedRegionDepth",
            "type": "compiler::CheckErrors.protectedRegionDepth"
          },
          {
            "name": "finallyDepth",
            "type": "compiler::CheckErrors.finallyDepth"
          },
          {
            "name": "isSys",
            "type": "compiler::CheckErrors.isSys"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "resolveDepend"
          }
        ],
        "name": "ResolveDepends",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "loc",
            "type": "compiler::ResolveDepends.loc"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "resolveExprStmt"
          },
          {
            "name": "resolveLocalVarDef"
          },
          {
            "name": "resolveFor"
          },
          {
            "name": "resolveBreak"
          },
          {
            "name": "resolveContinue"
          },
          {
            "name": "resolveExpr"
          },
          {
            "name": "resolveLocaleLiteral"
          },
          {
            "name": "resolveSlotLiteral"
          },
          {
            "name": "resolveList"
          },
          {
            "name": "resolveMap"
          },
          {
            "name": "resolveThis"
          },
          {
            "name": "resolveSuper"
          },
          {
            "name": "resolveIt"
          },
          {
            "name": "resolveAssign"
          },
          {
            "name": "resolveVar"
          },
          {
            "name": "resolveStorage"
          },
          {
            "name": "resolveElvis"
          },
          {
            "name": "resolveTernary"
          },
          {
            "name": "resolveCall"
          },
          {
            "name": "resolveTrapCall"
          },
          {
            "name": "resolveCallOnLocalVar"
          },
          {
            "name": "resolveConstruction"
          },
          {
            "name": "findCtorMatches"
          },
          {
            "name": "isCtorMethod"
          },
          {
            "name": "resolveShortcut"
          },
          {
            "name": "resolveBinaryOperator"
          },
          {
            "name": "resolveIndexedAssign"
          },
          {
            "name": "resolveClosure"
          },
          {
            "name": "resolveDsl"
          },
          {
            "name": "initMethodVars"
          },
          {
            "name": "bindToMethodVar"
          },
          {
            "name": "resolveLocal"
          },
          {
            "name": "localsInScope"
          },
          {
            "name": "currentBlock"
          },
          {
            "name": "isBlockInScope"
          },
          {
            "name": "findLoop"
          }
        ],
        "name": "ResolveExpr",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "stmtStack",
            "type": "compiler::ResolveExpr.stmtStack"
          },
          {
            "name": "blockStack",
            "type": "compiler::ResolveExpr.blockStack"
          },
          {
            "name": "inClosure",
            "type": "compiler::ResolveExpr.inClosure"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "scanType"
          },
          {
            "name": "processMethod"
          },
          {
            "name": "wrapNonFinalVars"
          },
          {
            "name": "walkMethod"
          },
          {
            "name": "fixLocalDef"
          },
          {
            "name": "initWrapper"
          },
          {
            "name": "fixWrappedVar"
          },
          {
            "name": "fixWrappedParams"
          },
          {
            "name": "processClosure"
          },
          {
            "name": "addVarToClosure"
          },
          {
            "name": "makeOuterThisField"
          },
          {
            "name": "addToClosure"
          },
          {
            "name": "genWrapper"
          },
          {
            "name": "toSafe"
          },
          {
            "name": "fieldExpr"
          }
        ],
        "name": "ClosureVars",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "syntheticFieldFlags",
            "type": "compiler::ClosureVars.syntheticFieldFlags"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          }
        ],
        "name": "Parse",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "checkOutOfOrder"
          },
          {
            "name": "checkExtends"
          },
          {
            "name": "checkMixin"
          }
        ],
        "name": "CheckInheritance",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "runStrMode"
          },
          {
            "name": "runFileMode"
          },
          {
            "name": "tokenize"
          }
        ],
        "name": "Tokenize",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "input",
            "type": "compiler::Tokenize.input"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "load"
          }
        ],
        "name": "LoadPod",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "inheritType"
          },
          {
            "name": "inheritSlot"
          },
          {
            "name": "matchingSignatures"
          },
          {
            "name": "keep"
          },
          {
            "name": "checkOverride"
          },
          {
            "name": "isOverrideProtectionErr"
          },
          {
            "name": "checkMethodMethodOverride"
          },
          {
            "name": "checkMethodFieldOverride"
          },
          {
            "name": "checkFieldFieldOverride"
          }
        ],
        "name": "Inherit",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "initCurType"
          },
          {
            "name": "errorChecks"
          },
          {
            "name": "initSingleton"
          },
          {
            "name": "initStruct"
          }
        ],
        "name": "InitFacet",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "ctors",
            "type": "compiler::InitFacet.ctors"
          },
          {
            "name": "fields",
            "type": "compiler::InitFacet.fields"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          }
        ],
        "name": "LocaleProps",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          }
        ],
        "name": "GenerateOutput",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "usedInSuccDef"
          }
        ],
        "name": "CheckParamDefs",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "name",
            "type": "compiler::CheckParamDefs.name"
          },
          {
            "name": "used",
            "type": "compiler::CheckParamDefs.used"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          }
        ],
        "name": "Assemble",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "process"
          },
          {
            "name": "setup"
          },
          {
            "name": "genClass"
          },
          {
            "name": "genCtor"
          },
          {
            "name": "genDoCall"
          },
          {
            "name": "genCall"
          },
          {
            "name": "genMethodCall"
          },
          {
            "name": "substitute"
          }
        ],
        "name": "InitClosures",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "closure",
            "type": "compiler::InitClosures.closure"
          },
          {
            "name": "loc",
            "type": "compiler::InitClosures.loc"
          },
          {
            "name": "signature",
            "type": "compiler::InitClosures.signature"
          },
          {
            "name": "enclosingType",
            "type": "compiler::InitClosures.enclosingType"
          },
          {
            "name": "cls",
            "type": "compiler::InitClosures.cls"
          },
          {
            "name": "ctor",
            "type": "compiler::InitClosures.ctor"
          },
          {
            "name": "doCall",
            "type": "compiler::InitClosures.doCall"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          }
        ],
        "name": "ScanForUsingsAndTypes",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "parse"
          },
          {
            "name": "parseUsing"
          },
          {
            "name": "parseType"
          },
          {
            "name": "consumeId"
          },
          {
            "name": "verify"
          },
          {
            "name": "consume"
          },
          {
            "name": "curt"
          }
        ],
        "name": "UsingAndTypeScanner",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "unit",
            "type": "compiler::UsingAndTypeScanner.unit"
          },
          {
            "name": "tokens",
            "type": "compiler::UsingAndTypeScanner.tokens"
          },
          {
            "name": "pos",
            "type": "compiler::UsingAndTypeScanner.pos"
          },
          {
            "name": "isSys",
            "type": "compiler::UsingAndTypeScanner.isSys"
          },
          {
            "name": "allTypes",
            "type": "compiler::UsingAndTypeScanner.allTypes"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "process"
          },
          {
            "name": "isAlwaysImmutable"
          },
          {
            "name": "isNeverImmutable"
          },
          {
            "name": "setAllFieldsConst"
          },
          {
            "name": "genIsImmutable"
          },
          {
            "name": "genToImmutableErr"
          },
          {
            "name": "genToImmutable"
          },
          {
            "name": "stubToImmutable"
          }
        ],
        "name": "ClosureToImmutable",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "processClosure"
          },
          {
            "name": "processCtor"
          },
          {
            "name": "itBlockVar"
          },
          {
            "name": "genFieldCheck"
          }
        ],
        "name": "ConstChecks",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "curCtor",
            "type": "compiler::ConstChecks.curCtor"
          },
          {
            "name": "fieldCheck",
            "type": "compiler::ConstChecks.fieldCheck"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "write"
          },
          {
            "name": "writeStr"
          },
          {
            "name": "writeRes"
          },
          {
            "name": "writeResZip"
          },
          {
            "name": "writeSrc"
          },
          {
            "name": "writeDocs"
          },
          {
            "name": "writePodDocs"
          },
          {
            "name": "writeApiDoc"
          }
        ],
        "name": "WritePod",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "loc",
            "type": "compiler::WritePod.loc"
          },
          {
            "name": "noFacets",
            "type": "compiler::WritePod.noFacets"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "walk"
          },
          {
            "name": "enterUnit"
          },
          {
            "name": "exitUnit"
          },
          {
            "name": "enterTypeDef"
          },
          {
            "name": "exitTypeDef"
          },
          {
            "name": "visitTypeDef"
          },
          {
            "name": "enterFieldDef"
          },
          {
            "name": "exitFieldDef"
          },
          {
            "name": "visitFieldDef"
          },
          {
            "name": "enterMethodDef"
          },
          {
            "name": "exitMethodDef"
          },
          {
            "name": "visitMethodDef"
          },
          {
            "name": "enterBlock"
          },
          {
            "name": "exitBlock"
          },
          {
            "name": "visitBlock"
          },
          {
            "name": "enterStmt"
          },
          {
            "name": "exitStmt"
          },
          {
            "name": "visitStmt"
          },
          {
            "name": "enterFinally"
          },
          {
            "name": "exitFinally"
          },
          {
            "name": "visitExpr"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "run"
          },
          {
            "name": "inStatic"
          },
          {
            "name": "make"
          },
          {
            "name": "process"
          }
        ],
        "name": "OrderByInheritance",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CompilerStep.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CompilerStep.curMethod"
          },
          {
            "name": "curUnit",
            "type": "compiler::CompilerStep.curUnit"
          },
          {
            "name": "processing",
            "type": "compiler::OrderByInheritance.processing"
          },
          {
            "name": "todo",
            "type": "compiler::OrderByInheritance.todo"
          },
          {
            "name": "ordered",
            "type": "compiler::OrderByInheritance.ordered"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "fold"
          },
          {
            "name": "exprToConst"
          },
          {
            "name": "constToExpr"
          }
        ],
        "name": "ConstantFolder",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "never",
            "type": "compiler::ConstantFolder.never"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "make"
          },
          {
            "name": "close"
          },
          {
            "name": "writeType"
          },
          {
            "name": "writeSlot"
          },
          {
            "name": "writeFieldStart"
          },
          {
            "name": "writeMethodStart"
          },
          {
            "name": "writeAttr"
          },
          {
            "name": "writeFacets"
          },
          {
            "name": "writeFacet"
          },
          {
            "name": "writeDoc"
          },
          {
            "name": "w"
          },
          {
            "name": "encodeBase"
          },
          {
            "name": "encodeMixins"
          },
          {
            "name": "encodeLoc"
          },
          {
            "name": "encodeExpr"
          },
          {
            "name": "encodeFlags"
          }
        ],
        "name": "ApiDocWriter",
        "fields": [
          {
            "name": "typePrefix",
            "type": "compiler::ApiDocWriter.typePrefix"
          },
          {
            "name": "slotPrefix",
            "type": "compiler::ApiDocWriter.slotPrefix"
          },
          {
            "name": "protectionMask",
            "type": "compiler::ApiDocWriter.protectionMask"
          },
          {
            "name": "out",
            "type": "compiler::ApiDocWriter.out"
          }
        ]
      },
      {
        "methods": [
          {
            "name": "equals"
          },
          {
            "name": "compare"
          },
          {
            "name": "hash"
          },
          {
            "name": "toStr"
          },
          {
            "name": "trap"
          },
          {
            "name": "with"
          },
          {
            "name": "isImmutable"
          },
          {
            "name": "toImmutable"
          },
          {
            "name": "typeof"
          },
          {
            "name": "echo"
          },
          {
            "name": "compiler"
          },
          {
            "name": "ns"
          },
          {
            "name": "pod"
          },
          {
            "name": "units"
          },
          {
            "name": "syntheticsUnit"
          },
          {
            "name": "types"
          },
          {
            "name": "log"
          },
          {
            "name": "addTypeDef"
          },
          {
            "name": "removeTypeDef"
          },
          {
            "name": "err"
          },
          {
            "name": "warn"
          },
          {
            "name": "errReport"
          },
          {
            "name": "bombIfErr"
          },
          {
            "name": "make"
          },
          {
            "name": "resolve"
          },
          {
            "name": "isStaticLiteral"
          },
          {
            "name": "resolveBase"
          },
          {
            "name": "find"
          },
          {
            "name": "findOn"
          },
          {
            "name": "isAmbiguous"
          },
          {
            "name": "errSig"
          },
          {
            "name": "insertImplicitThisOrIt"
          },
          {
            "name": "resolveToExpr"
          },
          {
            "name": "resolveToCallExpr"
          },
          {
            "name": "resolveToFieldExpr"
          },
          {
            "name": "inferClosureType"
          },
          {
            "name": "inferClosureTypeFromCall"
          },
          {
            "name": "resolveForeign"
          },
          {
            "name": "constantFolding"
          },
          {
            "name": "castForThisType"
          },
          {
            "name": "safeToNullable"
          },
          {
            "name": "ffiCoercion"
          }
        ],
        "name": "CallResolver",
        "fields": [
          {
            "name": "c",
            "type": "compiler::CompilerSupport.c"
          },
          {
            "name": "suppressErr",
            "type": "compiler::CompilerSupport.suppressErr"
          },
          {
            "name": "curType",
            "type": "compiler::CallResolver.curType"
          },
          {
            "name": "curMethod",
            "type": "compiler::CallResolver.curMethod"
          },
          {
            "name": "expr",
            "type": "compiler::CallResolver.expr"
          },
          {
            "name": "loc",
            "type": "compiler::CallResolver.loc"
          },
          {
            "name": "target",
            "type": "compiler::CallResolver.target"
          },
          {
            "name": "name",
            "type": "compiler::CallResolver.name"
          },
          {
            "name": "isItAdd",
            "type": "compiler::CallResolver.isItAdd"
          },
          {
            "name": "isVar",
            "type": "compiler::CallResolver.isVar"
          },
          {
            "name": "isFuncFieldCall",
            "type": "compiler::CallResolver.isFuncFieldCall"
          },
          {
            "name": "args",
            "type": "compiler::CallResolver.args"
          },
          {
            "name": "base",
            "type": "compiler::CallResolver.base"
          },
          {
            "name": "baseIt",
            "type": "compiler::CallResolver.baseIt"
          },
          {
            "name": "found",
            "type": "compiler::CallResolver.found"
          },
          {
            "name": "foundOnIt",
            "type": "compiler::CallResolver.foundOnIt"
          },
          {
            "name": "result",
            "type": "compiler::CallResolver.result"
          }
        ]
      }
    ],
    "name": "compiler",
    "type": "pod"
  }
]